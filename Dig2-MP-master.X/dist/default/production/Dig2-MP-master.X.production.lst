

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Feb 17 11:11:59 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	psect	text27,local,class=CODE,merge=1,delta=2
    40                           	psect	intentry,global,class=CODE,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    48                           	dabs	1,0x7E,2
    49  0000                     
    50                           ; Version 2.20
    51                           ; Generated 12/02/2020 GMT
    52                           ; 
    53                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    54                           ; All rights reserved.
    55                           ; 
    56                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    57                           ; 
    58                           ; Redistribution and use in source and binary forms, with or without modification, are
    59                           ; permitted provided that the following conditions are met:
    60                           ; 
    61                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    62                           ;        conditions and the following disclaimer.
    63                           ; 
    64                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    65                           ;        of conditions and the following disclaimer in the documentation and/or other
    66                           ;        materials provided with the distribution.
    67                           ; 
    68                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    69                           ;        software without specific prior written permission.
    70                           ; 
    71                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    72                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    73                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    74                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    75                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    76                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    77                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    78                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    79                           ; 
    80                           ; 
    81                           ; Code-generator required, PIC16F887 Definitions
    82                           ; 
    83                           ; SFR Addresses
    84  0000                     	;# 
    85  0001                     	;# 
    86  0002                     	;# 
    87  0003                     	;# 
    88  0004                     	;# 
    89  0005                     	;# 
    90  0006                     	;# 
    91  0007                     	;# 
    92  0008                     	;# 
    93  0009                     	;# 
    94  000A                     	;# 
    95  000B                     	;# 
    96  000C                     	;# 
    97  000D                     	;# 
    98  000E                     	;# 
    99  000E                     	;# 
   100  000F                     	;# 
   101  0010                     	;# 
   102  0011                     	;# 
   103  0012                     	;# 
   104  0013                     	;# 
   105  0014                     	;# 
   106  0015                     	;# 
   107  0015                     	;# 
   108  0016                     	;# 
   109  0017                     	;# 
   110  0018                     	;# 
   111  0019                     	;# 
   112  001A                     	;# 
   113  001B                     	;# 
   114  001B                     	;# 
   115  001C                     	;# 
   116  001D                     	;# 
   117  001E                     	;# 
   118  001F                     	;# 
   119  0081                     	;# 
   120  0085                     	;# 
   121  0086                     	;# 
   122  0087                     	;# 
   123  0088                     	;# 
   124  0089                     	;# 
   125  008C                     	;# 
   126  008D                     	;# 
   127  008E                     	;# 
   128  008F                     	;# 
   129  0090                     	;# 
   130  0091                     	;# 
   131  0092                     	;# 
   132  0093                     	;# 
   133  0093                     	;# 
   134  0093                     	;# 
   135  0094                     	;# 
   136  0095                     	;# 
   137  0096                     	;# 
   138  0097                     	;# 
   139  0098                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009C                     	;# 
   144  009D                     	;# 
   145  009E                     	;# 
   146  009F                     	;# 
   147  0105                     	;# 
   148  0107                     	;# 
   149  0108                     	;# 
   150  0109                     	;# 
   151  010C                     	;# 
   152  010C                     	;# 
   153  010D                     	;# 
   154  010E                     	;# 
   155  010F                     	;# 
   156  0185                     	;# 
   157  0187                     	;# 
   158  0188                     	;# 
   159  0189                     	;# 
   160  018C                     	;# 
   161  018D                     	;# 
   162  0000                     	;# 
   163  0001                     	;# 
   164  0002                     	;# 
   165  0003                     	;# 
   166  0004                     	;# 
   167  0005                     	;# 
   168  0006                     	;# 
   169  0007                     	;# 
   170  0008                     	;# 
   171  0009                     	;# 
   172  000A                     	;# 
   173  000B                     	;# 
   174  000C                     	;# 
   175  000D                     	;# 
   176  000E                     	;# 
   177  000E                     	;# 
   178  000F                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0013                     	;# 
   183  0014                     	;# 
   184  0015                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0017                     	;# 
   188  0018                     	;# 
   189  0019                     	;# 
   190  001A                     	;# 
   191  001B                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  001D                     	;# 
   195  001E                     	;# 
   196  001F                     	;# 
   197  0081                     	;# 
   198  0085                     	;# 
   199  0086                     	;# 
   200  0087                     	;# 
   201  0088                     	;# 
   202  0089                     	;# 
   203  008C                     	;# 
   204  008D                     	;# 
   205  008E                     	;# 
   206  008F                     	;# 
   207  0090                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0093                     	;# 
   211  0093                     	;# 
   212  0093                     	;# 
   213  0094                     	;# 
   214  0095                     	;# 
   215  0096                     	;# 
   216  0097                     	;# 
   217  0098                     	;# 
   218  0099                     	;# 
   219  009A                     	;# 
   220  009B                     	;# 
   221  009C                     	;# 
   222  009D                     	;# 
   223  009E                     	;# 
   224  009F                     	;# 
   225  0105                     	;# 
   226  0107                     	;# 
   227  0108                     	;# 
   228  0109                     	;# 
   229  010C                     	;# 
   230  010C                     	;# 
   231  010D                     	;# 
   232  010E                     	;# 
   233  010F                     	;# 
   234  0185                     	;# 
   235  0187                     	;# 
   236  0188                     	;# 
   237  0189                     	;# 
   238  018C                     	;# 
   239  018D                     	;# 
   240  0000                     	;# 
   241  0001                     	;# 
   242  0002                     	;# 
   243  0003                     	;# 
   244  0004                     	;# 
   245  0005                     	;# 
   246  0006                     	;# 
   247  0007                     	;# 
   248  0008                     	;# 
   249  0009                     	;# 
   250  000A                     	;# 
   251  000B                     	;# 
   252  000C                     	;# 
   253  000D                     	;# 
   254  000E                     	;# 
   255  000E                     	;# 
   256  000F                     	;# 
   257  0010                     	;# 
   258  0011                     	;# 
   259  0012                     	;# 
   260  0013                     	;# 
   261  0014                     	;# 
   262  0015                     	;# 
   263  0015                     	;# 
   264  0016                     	;# 
   265  0017                     	;# 
   266  0018                     	;# 
   267  0019                     	;# 
   268  001A                     	;# 
   269  001B                     	;# 
   270  001B                     	;# 
   271  001C                     	;# 
   272  001D                     	;# 
   273  001E                     	;# 
   274  001F                     	;# 
   275  0081                     	;# 
   276  0085                     	;# 
   277  0086                     	;# 
   278  0087                     	;# 
   279  0088                     	;# 
   280  0089                     	;# 
   281  008C                     	;# 
   282  008D                     	;# 
   283  008E                     	;# 
   284  008F                     	;# 
   285  0090                     	;# 
   286  0091                     	;# 
   287  0092                     	;# 
   288  0093                     	;# 
   289  0093                     	;# 
   290  0093                     	;# 
   291  0094                     	;# 
   292  0095                     	;# 
   293  0096                     	;# 
   294  0097                     	;# 
   295  0098                     	;# 
   296  0099                     	;# 
   297  009A                     	;# 
   298  009B                     	;# 
   299  009C                     	;# 
   300  009D                     	;# 
   301  009E                     	;# 
   302  009F                     	;# 
   303  0105                     	;# 
   304  0107                     	;# 
   305  0108                     	;# 
   306  0109                     	;# 
   307  010C                     	;# 
   308  010C                     	;# 
   309  010D                     	;# 
   310  010E                     	;# 
   311  010F                     	;# 
   312  0185                     	;# 
   313  0187                     	;# 
   314  0188                     	;# 
   315  0189                     	;# 
   316  018C                     	;# 
   317  018D                     	;# 
   318  0000                     	;# 
   319  0001                     	;# 
   320  0002                     	;# 
   321  0003                     	;# 
   322  0004                     	;# 
   323  0005                     	;# 
   324  0006                     	;# 
   325  0007                     	;# 
   326  0008                     	;# 
   327  0009                     	;# 
   328  000A                     	;# 
   329  000B                     	;# 
   330  000C                     	;# 
   331  000D                     	;# 
   332  000E                     	;# 
   333  000E                     	;# 
   334  000F                     	;# 
   335  0010                     	;# 
   336  0011                     	;# 
   337  0012                     	;# 
   338  0013                     	;# 
   339  0014                     	;# 
   340  0015                     	;# 
   341  0015                     	;# 
   342  0016                     	;# 
   343  0017                     	;# 
   344  0018                     	;# 
   345  0019                     	;# 
   346  001A                     	;# 
   347  001B                     	;# 
   348  001B                     	;# 
   349  001C                     	;# 
   350  001D                     	;# 
   351  001E                     	;# 
   352  001F                     	;# 
   353  0081                     	;# 
   354  0085                     	;# 
   355  0086                     	;# 
   356  0087                     	;# 
   357  0088                     	;# 
   358  0089                     	;# 
   359  008C                     	;# 
   360  008D                     	;# 
   361  008E                     	;# 
   362  008F                     	;# 
   363  0090                     	;# 
   364  0091                     	;# 
   365  0092                     	;# 
   366  0093                     	;# 
   367  0093                     	;# 
   368  0093                     	;# 
   369  0094                     	;# 
   370  0095                     	;# 
   371  0096                     	;# 
   372  0097                     	;# 
   373  0098                     	;# 
   374  0099                     	;# 
   375  009A                     	;# 
   376  009B                     	;# 
   377  009C                     	;# 
   378  009D                     	;# 
   379  009E                     	;# 
   380  009F                     	;# 
   381  0105                     	;# 
   382  0107                     	;# 
   383  0108                     	;# 
   384  0109                     	;# 
   385  010C                     	;# 
   386  010C                     	;# 
   387  010D                     	;# 
   388  010E                     	;# 
   389  010F                     	;# 
   390  0185                     	;# 
   391  0187                     	;# 
   392  0188                     	;# 
   393  0189                     	;# 
   394  018C                     	;# 
   395  018D                     	;# 
   396  0000                     	;# 
   397  0001                     	;# 
   398  0002                     	;# 
   399  0003                     	;# 
   400  0004                     	;# 
   401  0005                     	;# 
   402  0006                     	;# 
   403  0007                     	;# 
   404  0008                     	;# 
   405  0009                     	;# 
   406  000A                     	;# 
   407  000B                     	;# 
   408  000C                     	;# 
   409  000D                     	;# 
   410  000E                     	;# 
   411  000E                     	;# 
   412  000F                     	;# 
   413  0010                     	;# 
   414  0011                     	;# 
   415  0012                     	;# 
   416  0013                     	;# 
   417  0014                     	;# 
   418  0015                     	;# 
   419  0015                     	;# 
   420  0016                     	;# 
   421  0017                     	;# 
   422  0018                     	;# 
   423  0019                     	;# 
   424  001A                     	;# 
   425  001B                     	;# 
   426  001B                     	;# 
   427  001C                     	;# 
   428  001D                     	;# 
   429  001E                     	;# 
   430  001F                     	;# 
   431  0081                     	;# 
   432  0085                     	;# 
   433  0086                     	;# 
   434  0087                     	;# 
   435  0088                     	;# 
   436  0089                     	;# 
   437  008C                     	;# 
   438  008D                     	;# 
   439  008E                     	;# 
   440  008F                     	;# 
   441  0090                     	;# 
   442  0091                     	;# 
   443  0092                     	;# 
   444  0093                     	;# 
   445  0093                     	;# 
   446  0093                     	;# 
   447  0094                     	;# 
   448  0095                     	;# 
   449  0096                     	;# 
   450  0097                     	;# 
   451  0098                     	;# 
   452  0099                     	;# 
   453  009A                     	;# 
   454  009B                     	;# 
   455  009C                     	;# 
   456  009D                     	;# 
   457  009E                     	;# 
   458  009F                     	;# 
   459  0105                     	;# 
   460  0107                     	;# 
   461  0108                     	;# 
   462  0109                     	;# 
   463  010C                     	;# 
   464  010C                     	;# 
   465  010D                     	;# 
   466  010E                     	;# 
   467  010F                     	;# 
   468  0185                     	;# 
   469  0187                     	;# 
   470  0188                     	;# 
   471  0189                     	;# 
   472  018C                     	;# 
   473  018D                     	;# 
   474                           
   475                           	psect	strings
   476  058A                     __pstrings:
   477  058A                     stringtab:
   478  058A                     __stringtab:
   479                           
   480                           ;	String table - string pointers are 1 byte each
   481  058A  1BFF               	btfsc	btemp+1,7
   482  058B  2D94               	ljmp	stringcode
   483  058C  1383               	bcf	3,7
   484  058D  187F               	btfsc	btemp+1,0
   485  058E  1783               	bsf	3,7
   486  058F  0800               	movf	0,w
   487  0590  0A84               	incf	4,f
   488  0591  1903               	skipnz
   489  0592  0AFF               	incf	btemp+1,f
   490  0593  0008               	return
   491  0594                     stringcode:
   492  0594                     stringdir:
   493  0594  3005               	movlw	high stringdir
   494  0595  008A               	movwf	10
   495  0596  0804               	movf	4,w
   496  0597  0A84               	incf	4,f
   497  0598  0782               	addwf	2,f
   498  0599                     __stringbase:
   499  0599  3400               	retlw	0
   500  059A                     __end_of__stringtab:
   501  059A                     _dpowers:
   502  059A  3401               	retlw	1
   503  059B  3400               	retlw	0
   504  059C  340A               	retlw	10
   505  059D  3400               	retlw	0
   506  059E  3464               	retlw	100
   507  059F  3400               	retlw	0
   508  05A0  34E8               	retlw	232
   509  05A1  3403               	retlw	3
   510  05A2  3410               	retlw	16
   511  05A3  3427               	retlw	39
   512  05A4                     __end_of_dpowers:
   513  05A4                     _intro:
   514  05A4  3420               	retlw	32
   515  05A5  3453               	retlw	83
   516  05A6  3431               	retlw	49
   517  05A7  343A               	retlw	58
   518  05A8  3420               	retlw	32
   519  05A9  3420               	retlw	32
   520  05AA  3420               	retlw	32
   521  05AB  3453               	retlw	83
   522  05AC  3432               	retlw	50
   523  05AD  343A               	retlw	58
   524  05AE  3420               	retlw	32
   525  05AF  3420               	retlw	32
   526  05B0  3453               	retlw	83
   527  05B1  3433               	retlw	51
   528  05B2  343A               	retlw	58
   529  05B3  3400               	retlw	0
   530  05B4                     __end_of_intro:
   531  0019                     _TXREG	set	25
   532  0018                     _RCSTAbits	set	24
   533  0010                     _T1CONbits	set	16
   534  000B                     _INTCONbits	set	11
   535  0008                     _PORTD	set	8
   536  0007                     _PORTC	set	7
   537  0006                     _PORTB	set	6
   538  0005                     _PORTA	set	5
   539  000E                     _TMR1L	set	14
   540  000F                     _TMR1H	set	15
   541  000C                     _PIR1bits	set	12
   542  0013                     _SSPBUF	set	19
   543  0014                     _SSPCON	set	20
   544  0037                     _RB7	set	55
   545  0040                     _RD0	set	64
   546  0035                     _RB5	set	53
   547  0036                     _RB6	set	54
   548  0034                     _RB4	set	52
   549  0098                     _TXSTAbits	set	152
   550  0099                     _SPBRG	set	153
   551  009A                     _SPBRGH	set	154
   552  0085                     _TRISA	set	133
   553  008C                     _PIE1bits	set	140
   554  008F                     _OSCCONbits	set	143
   555  0089                     _TRISE	set	137
   556  0088                     _TRISD	set	136
   557  0086                     _TRISB	set	134
   558  0094                     _SSPSTATbits	set	148
   559  0094                     _SSPSTAT	set	148
   560  043C                     _TRISC4	set	1084
   561  042D                     _TRISA5	set	1069
   562  043B                     _TRISC3	set	1083
   563  043D                     _TRISC5	set	1085
   564  0187                     _BAUDCTLbits	set	391
   565  0189                     _ANSELH	set	393
   566  0188                     _ANSEL	set	392
   567  05B4                     STR_7:
   568  05B4  3420               	retlw	32	;' '
   569  05B5  3453               	retlw	83	;'S'
   570  05B6  3431               	retlw	49	;'1'
   571  05B7  343A               	retlw	58	;':'
   572  05B8  3420               	retlw	32	;' '
   573  05B9  3420               	retlw	32	;' '
   574  05BA  3453               	retlw	83	;'S'
   575  05BB  3432               	retlw	50	;'2'
   576  05BC  343A               	retlw	58	;':'
   577  05BD  3420               	retlw	32	;' '
   578  05BE  3420               	retlw	32	;' '
   579  05BF  3453               	retlw	83	;'S'
   580  05C0  3433               	retlw	51	;'3'
   581  05C1  343A               	retlw	58	;':'
   582  05C2  3400               	retlw	0
   583  05C3                     STR_4:
   584  05C3  3425               	retlw	37	;'%'
   585  05C4  3464               	retlw	100	;'d'
   586  05C5  342E               	retlw	46	;'.'
   587  05C6  3425               	retlw	37	;'%'
   588  05C7  3464               	retlw	100	;'d'
   589  05C8  3425               	retlw	37	;'%'
   590  05C9  3464               	retlw	100	;'d'
   591  05CA  3456               	retlw	86	;'V'
   592  05CB  3420               	retlw	32	;' '
   593  05CC  3420               	retlw	32	;' '
   594  05CD  3400               	retlw	0
   595  05CE                     STR_5:
   596  05CE  3425               	retlw	37	;'%'
   597  05CF  3464               	retlw	100	;'d'
   598  05D0  3425               	retlw	37	;'%'
   599  05D1  3464               	retlw	100	;'d'
   600  05D2  3425               	retlw	37	;'%'
   601  05D3  3464               	retlw	100	;'d'
   602  05D4  3420               	retlw	32	;' '
   603  05D5  3420               	retlw	32	;' '
   604  05D6  3400               	retlw	0
   605  05D7                     STR_1:
   606  05D7  3425               	retlw	37	;'%'
   607  05D8  3464               	retlw	100	;'d'
   608  05D9  342E               	retlw	46	;'.'
   609  05DA  3425               	retlw	37	;'%'
   610  05DB  3464               	retlw	100	;'d'
   611  05DC  3425               	retlw	37	;'%'
   612  05DD  3464               	retlw	100	;'d'
   613  05DE  3456               	retlw	86	;'V'
   614  05DF  3400               	retlw	0
   615  05E0                     STR_2:
   616  05E0  3425               	retlw	37	;'%'
   617  05E1  3464               	retlw	100	;'d'
   618  05E2  3425               	retlw	37	;'%'
   619  05E3  3464               	retlw	100	;'d'
   620  05E4  3425               	retlw	37	;'%'
   621  05E5  3464               	retlw	100	;'d'
   622  05E6  3400               	retlw	0
   623  05E0                     
   624                           	psect	cinit
   625  0015                     start_initialization:	
   626                           ; #config settings
   627                           
   628  0015                     __initialization:
   629                           
   630                           ; Clear objects allocated to BANK0
   631  0015  1383               	bcf	3,7	;select IRP bank0
   632  0016  3044               	movlw	low __pbssBANK0
   633  0017  0084               	movwf	4
   634  0018  3054               	movlw	low (__pbssBANK0+16)
   635  0019  120A  158A  26A6  120A  118A  	fcall	clear_ram0
   636                           
   637                           ; Clear objects allocated to BANK1
   638  001E  30A0               	movlw	low __pbssBANK1
   639  001F  0084               	movwf	4
   640  0020  30CD               	movlw	low (__pbssBANK1+45)
   641  0021  120A  158A  26A6  120A  118A  	fcall	clear_ram0
   642  0026                     end_of_initialization:	
   643                           ;End of C runtime variable initialization code
   644                           
   645  0026                     __end_of__initialization:
   646  0026  0183               	clrf	3
   647  0027  120A  158A  2F03   	ljmp	_main	;jump to C main() function
   648                           
   649                           	psect	bssBANK0
   650  0044                     __pbssBANK0:
   651  0044                     _lector:
   652  0044                     	ds	3
   653  0047                     _state:
   654  0047                     	ds	1
   655  0048                     _trash:
   656  0048                     	ds	1
   657  0049                     _tem:
   658  0049                     	ds	3
   659  004C                     _bot:
   660  004C                     	ds	3
   661  004F                     _pot:
   662  004F                     	ds	3
   663  0052                     _final:
   664  0052                     	ds	2
   665                           
   666                           	psect	bssBANK1
   667  00A0                     __pbssBANK1:
   668  00A0                     _buffer:
   669  00A0                     	ds	45
   670                           
   671                           	psect	clrtext
   672  0EA6                     clear_ram0:	
   673                           ;	Called with FSR containing the base address, and
   674                           ;	W with the last address+1
   675                           
   676  0EA6  0064               	clrwdt	;clear the watchdog before getting into this loop
   677  0EA7                     clrloop0:
   678  0EA7  0180               	clrf	0	;clear RAM location pointed to by FSR
   679  0EA8  0A84               	incf	4,f	;increment pointer
   680  0EA9  0604               	xorwf	4,w	;XOR with final address
   681  0EAA  1903               	btfsc	3,2	;have we reached the end yet?
   682  0EAB  3400               	retlw	0	;all done for this memory range, return
   683  0EAC  0604               	xorwf	4,w	;XOR again to restore value
   684  0EAD  2EA7               	goto	clrloop0	;do the next byte
   685                           
   686                           	psect	cstackBANK1
   687  00CD                     __pcstackBANK1:
   688  00CD                     ?___awdiv:
   689  00CD                     ?___lwmod:	
   690                           ; 2 bytes @ 0x0
   691                           
   692  00CD                     LCD_writeString@i:	
   693                           ; 2 bytes @ 0x0
   694                           
   695  00CD                     ___awdiv@divisor:	
   696                           ; 2 bytes @ 0x0
   697                           
   698  00CD                     ___lwmod@divisor:	
   699                           ; 2 bytes @ 0x0
   700                           
   701                           
   702                           ; 2 bytes @ 0x0
   703  00CD                     	ds	2
   704  00CF                     ___awdiv@dividend:
   705  00CF                     ___lwmod@dividend:	
   706                           ; 2 bytes @ 0x2
   707                           
   708                           
   709                           ; 2 bytes @ 0x2
   710  00CF                     	ds	2
   711  00D1                     ??___lwmod:
   712  00D1                     ___awdiv@counter:	
   713                           ; 1 bytes @ 0x4
   714                           
   715                           
   716                           ; 1 bytes @ 0x4
   717  00D1                     	ds	1
   718  00D2                     ___awdiv@sign:
   719  00D2                     ___lwmod@counter:	
   720                           ; 1 bytes @ 0x5
   721                           
   722                           
   723                           ; 1 bytes @ 0x5
   724  00D2                     	ds	1
   725  00D3                     ?_division:
   726  00D3                     ?_sprintf:	
   727                           ; 1 bytes @ 0x6
   728                           
   729  00D3                     sprintf@f:	
   730                           ; 2 bytes @ 0x6
   731                           
   732  00D3                     division@value:	
   733                           ; 1 bytes @ 0x6
   734                           
   735  00D3                     ___awdiv@quotient:	
   736                           ; 2 bytes @ 0x6
   737                           
   738                           
   739                           ; 2 bytes @ 0x6
   740  00D3                     	ds	2
   741  00D5                     ??_mapeo:
   742  00D5                     division@centena:	
   743                           ; 1 bytes @ 0x8
   744                           
   745                           
   746                           ; 1 bytes @ 0x8
   747  00D5                     	ds	1
   748  00D6                     division@decena:
   749                           
   750                           ; 1 bytes @ 0x9
   751  00D6                     	ds	1
   752  00D7                     division@unidad:
   753  00D7                     mapeo@valor:	
   754                           ; 1 bytes @ 0xA
   755                           
   756                           
   757                           ; 1 bytes @ 0xA
   758  00D7                     	ds	1
   759  00D8                     ??_division:
   760                           
   761                           ; 1 bytes @ 0xB
   762  00D8                     	ds	1
   763  00D9                     _division$1331:
   764                           
   765                           ; 2 bytes @ 0xC
   766  00D9                     	ds	1
   767  00DA                     ??_sprintf:
   768                           
   769                           ; 1 bytes @ 0xD
   770  00DA                     	ds	3
   771  00DD                     sprintf@ap:
   772                           
   773                           ; 1 bytes @ 0x10
   774  00DD                     	ds	1
   775  00DE                     sprintf@flag:
   776                           
   777                           ; 1 bytes @ 0x11
   778  00DE                     	ds	1
   779  00DF                     sprintf@prec:
   780                           
   781                           ; 1 bytes @ 0x12
   782  00DF                     	ds	1
   783  00E0                     sprintf@val:
   784                           
   785                           ; 2 bytes @ 0x13
   786  00E0                     	ds	2
   787  00E2                     sprintf@sp:
   788                           
   789                           ; 1 bytes @ 0x15
   790  00E2                     	ds	1
   791  00E3                     sprintf@c:
   792                           
   793                           ; 1 bytes @ 0x16
   794  00E3                     	ds	1
   795  00E4                     ??_lcd_show:
   796                           
   797                           ; 1 bytes @ 0x17
   798  00E4                     	ds	7
   799                           
   800                           	psect	cstackCOMMON
   801  0070                     __pcstackCOMMON:
   802  0070                     ?_print:
   803  0070                     ?_uartWrite:	
   804                           ; 1 bytes @ 0x0
   805                           
   806  0070                     ?_uartEnter:	
   807                           ; 1 bytes @ 0x0
   808                           
   809  0070                     ??_uartEnter:	
   810                           ; 1 bytes @ 0x0
   811                           
   812  0070                     ?_setup:	
   813                           ; 1 bytes @ 0x0
   814                           
   815  0070                     ?_config_io:	
   816                           ; 1 bytes @ 0x0
   817                           
   818  0070                     ?_config_clock:	
   819                           ; 1 bytes @ 0x0
   820                           
   821  0070                     ?_config_lcd:	
   822                           ; 1 bytes @ 0x0
   823                           
   824  0070                     ?_config_tmr1:	
   825                           ; 1 bytes @ 0x0
   826                           
   827  0070                     ?_config_ie:	
   828                           ; 1 bytes @ 0x0
   829                           
   830  0070                     ?_uartInit:	
   831                           ; 1 bytes @ 0x0
   832                           
   833  0070                     ?_LCD_START:	
   834                           ; 1 bytes @ 0x0
   835                           
   836  0070                     ?_spiReceiveWait:	
   837                           ; 1 bytes @ 0x0
   838                           
   839  0070                     ?_spiWrite:	
   840                           ; 1 bytes @ 0x0
   841                           
   842  0070                     ?_spiRead:	
   843                           ; 1 bytes @ 0x0
   844                           
   845  0070                     ?_isr:	
   846                           ; 1 bytes @ 0x0
   847                           
   848  0070                     ?_flip_slave:	
   849                           ; 1 bytes @ 0x0
   850                           
   851  0070                     ?_lcd_show:	
   852                           ; 1 bytes @ 0x0
   853                           
   854  0070                     ?_main:	
   855                           ; 1 bytes @ 0x0
   856                           
   857  0070                     ?_flip_EN:	
   858                           ; 1 bytes @ 0x0
   859                           
   860  0070                     ?_LCD_CMD:	
   861                           ; 1 bytes @ 0x0
   862                           
   863  0070                     ?_LCD_write:	
   864                           ; 1 bytes @ 0x0
   865                           
   866  0070                     ?i1___lwdiv:	
   867                           ; 1 bytes @ 0x0
   868                           
   869  0070                     uartWrite@word:	
   870                           ; 2 bytes @ 0x0
   871                           
   872  0070                     i1___lwdiv@divisor:	
   873                           ; 2 bytes @ 0x0
   874                           
   875                           
   876                           ; 2 bytes @ 0x0
   877  0070                     	ds	2
   878  0072                     ??_uartWrite:
   879  0072                     i1___lwdiv@dividend:	
   880                           ; 1 bytes @ 0x2
   881                           
   882                           
   883                           ; 2 bytes @ 0x2
   884  0072                     	ds	2
   885  0074                     ??i1___lwdiv:
   886                           
   887                           ; 1 bytes @ 0x4
   888  0074                     	ds	1
   889  0075                     i1___lwdiv@quotient:
   890                           
   891                           ; 2 bytes @ 0x5
   892  0075                     	ds	2
   893  0077                     i1___lwdiv@counter:
   894                           
   895                           ; 1 bytes @ 0x7
   896  0077                     	ds	1
   897  0078                     ?i1___lwmod:
   898  0078                     i1___lwmod@divisor:	
   899                           ; 2 bytes @ 0x8
   900                           
   901                           
   902                           ; 2 bytes @ 0x8
   903  0078                     	ds	2
   904  007A                     i1___lwmod@dividend:
   905                           
   906                           ; 2 bytes @ 0xA
   907  007A                     	ds	2
   908  007C                     ??i1___lwmod:
   909                           
   910                           ; 1 bytes @ 0xC
   911  007C                     	ds	1
   912  007D                     i1___lwmod@counter:
   913                           
   914                           ; 1 bytes @ 0xD
   915  007D                     	ds	1
   916                           
   917                           	psect	cstackBANK0
   918  0020                     __pcstackBANK0:
   919  0020                     ?i1_sprintf:
   920  0020                     i1sprintf@f:	
   921                           ; 2 bytes @ 0x0
   922                           
   923                           
   924                           ; 1 bytes @ 0x0
   925  0020                     	ds	7
   926  0027                     ??i1_sprintf:
   927                           
   928                           ; 1 bytes @ 0x7
   929  0027                     	ds	3
   930  002A                     i1sprintf@ap:
   931                           
   932                           ; 1 bytes @ 0xA
   933  002A                     	ds	1
   934  002B                     i1sprintf@flag:
   935                           
   936                           ; 1 bytes @ 0xB
   937  002B                     	ds	1
   938  002C                     i1sprintf@prec:
   939                           
   940                           ; 1 bytes @ 0xC
   941  002C                     	ds	1
   942  002D                     i1sprintf@val:
   943                           
   944                           ; 2 bytes @ 0xD
   945  002D                     	ds	2
   946  002F                     i1sprintf@sp:
   947                           
   948                           ; 1 bytes @ 0xF
   949  002F                     	ds	1
   950  0030                     i1sprintf@c:
   951                           
   952                           ; 1 bytes @ 0x10
   953  0030                     	ds	1
   954  0031                     ??_print:
   955                           
   956                           ; 1 bytes @ 0x11
   957  0031                     	ds	7
   958  0038                     ??_isr:
   959                           
   960                           ; 1 bytes @ 0x18
   961  0038                     	ds	4
   962  003C                     ??_config_io:
   963  003C                     ??_config_clock:	
   964                           ; 1 bytes @ 0x1C
   965                           
   966  003C                     ??_config_tmr1:	
   967                           ; 1 bytes @ 0x1C
   968                           
   969  003C                     ??_config_ie:	
   970                           ; 1 bytes @ 0x1C
   971                           
   972  003C                     ??_uartInit:	
   973                           ; 1 bytes @ 0x1C
   974                           
   975  003C                     ?_spiInit:	
   976                           ; 1 bytes @ 0x1C
   977                           
   978  003C                     ??_spiReceiveWait:	
   979                           ; 1 bytes @ 0x1C
   980                           
   981  003C                     ??_spiWrite:	
   982                           ; 1 bytes @ 0x1C
   983                           
   984  003C                     ??_spiRead:	
   985                           ; 1 bytes @ 0x1C
   986                           
   987  003C                     ??_flip_EN:	
   988                           ; 1 bytes @ 0x1C
   989                           
   990  003C                     ?___wmul:	
   991                           ; 1 bytes @ 0x1C
   992                           
   993  003C                     ?___lwdiv:	
   994                           ; 2 bytes @ 0x1C
   995                           
   996  003C                     spiInit@sDataSample:	
   997                           ; 2 bytes @ 0x1C
   998                           
   999  003C                     spiWrite@dat:	
  1000                           ; 1 bytes @ 0x1C
  1001                           
  1002  003C                     ___wmul@multiplier:	
  1003                           ; 1 bytes @ 0x1C
  1004                           
  1005  003C                     ___lwdiv@divisor:	
  1006                           ; 2 bytes @ 0x1C
  1007                           
  1008                           
  1009                           ; 2 bytes @ 0x1C
  1010  003C                     	ds	1
  1011  003D                     ??_flip_slave:
  1012  003D                     spiInit@sClockIdle:	
  1013                           ; 1 bytes @ 0x1D
  1014                           
  1015                           
  1016                           ; 1 bytes @ 0x1D
  1017  003D                     	ds	1
  1018  003E                     ??_LCD_CMD:
  1019  003E                     ??_LCD_write:	
  1020                           ; 1 bytes @ 0x1E
  1021                           
  1022  003E                     spiInit@sTransmitEdge:	
  1023                           ; 1 bytes @ 0x1E
  1024                           
  1025  003E                     LCD_CMD@cmd:	
  1026                           ; 1 bytes @ 0x1E
  1027                           
  1028  003E                     LCD_write@value:	
  1029                           ; 1 bytes @ 0x1E
  1030                           
  1031  003E                     ___wmul@multiplicand:	
  1032                           ; 1 bytes @ 0x1E
  1033                           
  1034  003E                     ___lwdiv@dividend:	
  1035                           ; 2 bytes @ 0x1E
  1036                           
  1037                           
  1038                           ; 2 bytes @ 0x1E
  1039  003E                     	ds	1
  1040  003F                     ?_LCD_setCursor:
  1041  003F                     ?_LCD_writeString:	
  1042                           ; 1 bytes @ 0x1F
  1043                           
  1044  003F                     ??_LCD_START:	
  1045                           ; 1 bytes @ 0x1F
  1046                           
  1047  003F                     ??_spiInit:	
  1048                           ; 1 bytes @ 0x1F
  1049                           
  1050  003F                     spiInit@sType:	
  1051                           ; 1 bytes @ 0x1F
  1052                           
  1053  003F                     LCD_setCursor@columna:	
  1054                           ; 1 bytes @ 0x1F
  1055                           
  1056  003F                     LCD_writeString@text:	
  1057                           ; 1 bytes @ 0x1F
  1058                           
  1059                           
  1060                           ; 2 bytes @ 0x1F
  1061  003F                     	ds	1
  1062  0040                     ??_LCD_setCursor:
  1063  0040                     ??___wmul:	
  1064                           ; 1 bytes @ 0x20
  1065                           
  1066  0040                     ??___lwdiv:	
  1067                           ; 1 bytes @ 0x20
  1068                           
  1069  0040                     ___wmul@product:	
  1070                           ; 1 bytes @ 0x20
  1071                           
  1072                           
  1073                           ; 2 bytes @ 0x20
  1074  0040                     	ds	1
  1075  0041                     ??_LCD_writeString:
  1076  0041                     ___lwdiv@counter:	
  1077                           ; 1 bytes @ 0x21
  1078                           
  1079                           
  1080                           ; 1 bytes @ 0x21
  1081  0041                     	ds	1
  1082  0042                     ??___awdiv:
  1083  0042                     LCD_setCursor@fila:	
  1084                           ; 1 bytes @ 0x22
  1085                           
  1086  0042                     ___lwdiv@quotient:	
  1087                           ; 1 bytes @ 0x22
  1088                           
  1089                           
  1090                           ; 2 bytes @ 0x22
  1091  0042                     	ds	1
  1092  0043                     ?_mapeo:
  1093  0043                     mapeo@mapeado:	
  1094                           ; 1 bytes @ 0x23
  1095                           
  1096                           
  1097                           ; 1 bytes @ 0x23
  1098  0043                     	ds	1
  1099  0044                     ??_setup:
  1100  0044                     ??_config_lcd:	
  1101                           ; 1 bytes @ 0x24
  1102                           
  1103  0044                     ??_main:	
  1104                           ; 1 bytes @ 0x24
  1105                           
  1106                           
  1107                           	psect	maintext
  1108  0F03                     __pmaintext:	
  1109                           ; 1 bytes @ 0x24
  1110 ;;
  1111 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1112 ;;
  1113 ;; *************** function _main *****************
  1114 ;; Defined at:
  1115 ;;		line 271 in file "main.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;		None
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;		None
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  1    wreg      void 
  1122 ;; Registers used:
  1123 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1124 ;; Tracked objects:
  1125 ;;		On entry : B00/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1129 ;;      Params:         0       0       0       0       0
  1130 ;;      Locals:         0       0       0       0       0
  1131 ;;      Temps:          0       0       0       0       0
  1132 ;;      Totals:         0       0       0       0       0
  1133 ;;Total ram usage:        0 bytes
  1134 ;; Hardware stack levels required when called: 9
  1135 ;; This function calls:
  1136 ;;		_flip_slave
  1137 ;;		_lcd_show
  1138 ;;		_setup
  1139 ;; This function is called by:
  1140 ;;		Startup code after reset
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           
  1145                           ;psect for function _main
  1146  0F03                     _main:
  1147  0F03                     l2475:	
  1148                           ;incstack = 0
  1149 ;; hardware stack exceeded
  1150                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1151                           
  1152                           
  1153                           ;main.c: 272:     setup();
  1154  0F03  120A  158A  27D6  120A  158A  	fcall	_setup
  1155  0F08                     l2477:
  1156                           
  1157                           ;main.c: 276:         flip_slave();
  1158  0F08  120A  118A  233E  120A  158A  	fcall	_flip_slave
  1159  0F0D                     l2479:
  1160                           
  1161                           ;main.c: 278:         lcd_show();
  1162  0F0D  120A  118A  202A  120A  158A  	fcall	_lcd_show
  1163  0F12  2F08               	goto	l2477
  1164  0F13  120A  118A  2812   	ljmp	start
  1165  0F16                     __end_of_main:
  1166                           
  1167                           	psect	text1
  1168  0FD6                     __ptext1:	
  1169 ;; *************** function _setup *****************
  1170 ;; Defined at:
  1171 ;;		line 293 in file "main.c"
  1172 ;; Parameters:    Size  Location     Type
  1173 ;;		None
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;		None
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      void 
  1178 ;; Registers used:
  1179 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1185 ;;      Params:         0       0       0       0       0
  1186 ;;      Locals:         0       0       0       0       0
  1187 ;;      Temps:          0       0       0       0       0
  1188 ;;      Totals:         0       0       0       0       0
  1189 ;;Total ram usage:        0 bytes
  1190 ;; Hardware stack levels used: 1
  1191 ;; Hardware stack levels required when called: 8
  1192 ;; This function calls:
  1193 ;;		_config_clock
  1194 ;;		_config_ie
  1195 ;;		_config_io
  1196 ;;		_config_lcd
  1197 ;;		_config_tmr1
  1198 ;;		_spiInit
  1199 ;;		_uartInit
  1200 ;; This function is called by:
  1201 ;;		_main
  1202 ;; This function uses a non-reentrant model
  1203 ;;
  1204                           
  1205                           
  1206                           ;psect for function _setup
  1207  0FD6                     _setup:
  1208  0FD6                     l2463:	
  1209                           ;incstack = 0
  1210 ;; hardware stack exceeded
  1211                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1212                           
  1213                           
  1214                           ;main.c: 294:     config_io();
  1215  0FD6  120A  158A  26E0  120A  158A  	fcall	_config_io
  1216                           
  1217                           ;main.c: 295:     config_clock();
  1218  0FDB  120A  158A  269E  120A  158A  	fcall	_config_clock
  1219  0FE0                     l2465:
  1220                           
  1221                           ;main.c: 296:     config_lcd();
  1222  0FE0  120A  158A  2731  120A  158A  	fcall	_config_lcd
  1223  0FE5                     l2467:
  1224                           
  1225                           ;main.c: 297:     config_tmr1();
  1226  0FE5  120A  158A  26C3  120A  158A  	fcall	_config_tmr1
  1227  0FEA                     l2469:
  1228                           
  1229                           ;main.c: 298:     config_ie();
  1230  0FEA  120A  158A  2691  120A  158A  	fcall	_config_ie
  1231  0FEF                     l2471:
  1232                           
  1233                           ;main.c: 302:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LO
      +                          W, SPI_IDLE_2_ACTIVE);
  1234  0FEF  1283               	bcf	3,5	;RP0=0, select bank0
  1235  0FF0  1303               	bcf	3,6	;RP1=0, select bank0
  1236  0FF1  01BC               	clrf	spiInit@sDataSample
  1237  0FF2  01BD               	clrf	spiInit@sClockIdle
  1238  0FF3  01BE               	clrf	spiInit@sTransmitEdge
  1239  0FF4  3020               	movlw	32
  1240  0FF5  120A  158A  2767  120A  158A  	fcall	_spiInit
  1241  0FFA                     l2473:
  1242                           
  1243                           ;main.c: 303:     uartInit();
  1244  0FFA  120A  158A  274C  120A  158A  	fcall	_uartInit
  1245  0FFF                     l168:
  1246  0FFF  0008               	return
  1247  1000                     __end_of_setup:
  1248                           
  1249                           	psect	text2
  1250  0F4C                     __ptext2:	
  1251 ;; *************** function _uartInit *****************
  1252 ;; Defined at:
  1253 ;;		line 10 in file "UART.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;		None
  1256 ;; Auto vars:     Size  Location     Type
  1257 ;;		None
  1258 ;; Return value:  Size  Location     Type
  1259 ;;                  1    wreg      void 
  1260 ;; Registers used:
  1261 ;;		wreg, status,2
  1262 ;; Tracked objects:
  1263 ;;		On entry : 0/0
  1264 ;;		On exit  : 0/0
  1265 ;;		Unchanged: 0/0
  1266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1267 ;;      Params:         0       0       0       0       0
  1268 ;;      Locals:         0       0       0       0       0
  1269 ;;      Temps:          0       0       0       0       0
  1270 ;;      Totals:         0       0       0       0       0
  1271 ;;Total ram usage:        0 bytes
  1272 ;; Hardware stack levels used: 1
  1273 ;; Hardware stack levels required when called: 4
  1274 ;; This function calls:
  1275 ;;		Nothing
  1276 ;; This function is called by:
  1277 ;;		_setup
  1278 ;; This function uses a non-reentrant model
  1279 ;;
  1280                           
  1281                           
  1282                           ;psect for function _uartInit
  1283  0F4C                     _uartInit:
  1284  0F4C                     l1895:	
  1285                           ;incstack = 0
  1286                           ; Regs used in _uartInit: [wreg+status,2]
  1287                           
  1288                           
  1289                           ;UART.c: 11:     SPBRGH = 0;
  1290  0F4C  1683               	bsf	3,5	;RP0=1, select bank1
  1291  0F4D  1303               	bcf	3,6	;RP1=0, select bank1
  1292  0F4E  019A               	clrf	26	;volatile
  1293  0F4F                     l1897:
  1294                           
  1295                           ;UART.c: 12:     SPBRG = 25;
  1296  0F4F  3019               	movlw	25
  1297  0F50  0099               	movwf	25	;volatile
  1298  0F51                     l1899:
  1299                           
  1300                           ;UART.c: 14:     RCSTAbits.SPEN = 1;
  1301  0F51  1283               	bcf	3,5	;RP0=0, select bank0
  1302  0F52  1303               	bcf	3,6	;RP1=0, select bank0
  1303  0F53  1798               	bsf	24,7	;volatile
  1304  0F54                     l1901:
  1305                           
  1306                           ;UART.c: 15:     RCSTAbits.CREN = 1;
  1307  0F54  1618               	bsf	24,4	;volatile
  1308  0F55                     l1903:
  1309                           
  1310                           ;UART.c: 17:     TXSTAbits.SYNC = 0;
  1311  0F55  1683               	bsf	3,5	;RP0=1, select bank1
  1312  0F56  1303               	bcf	3,6	;RP1=0, select bank1
  1313  0F57  1218               	bcf	24,4	;volatile
  1314  0F58                     l1905:
  1315                           
  1316                           ;UART.c: 20:     TXSTAbits.TX9 = 0;
  1317  0F58  1318               	bcf	24,6	;volatile
  1318  0F59                     l1907:
  1319                           
  1320                           ;UART.c: 21:     TXSTAbits.TXEN = 1;
  1321  0F59  1698               	bsf	24,5	;volatile
  1322  0F5A                     l1909:
  1323                           
  1324                           ;UART.c: 22:     TXSTAbits.BRGH = 1;
  1325  0F5A  1518               	bsf	24,2	;volatile
  1326  0F5B                     l1911:
  1327                           
  1328                           ;UART.c: 24:     RCSTAbits.RX9 = 0;
  1329  0F5B  1283               	bcf	3,5	;RP0=0, select bank0
  1330  0F5C  1303               	bcf	3,6	;RP1=0, select bank0
  1331  0F5D  1318               	bcf	24,6	;volatile
  1332  0F5E                     l1913:
  1333                           
  1334                           ;UART.c: 29:     BAUDCTLbits.BRG16 = 0;
  1335  0F5E  1683               	bsf	3,5	;RP0=1, select bank3
  1336  0F5F  1703               	bsf	3,6	;RP1=1, select bank3
  1337  0F60  1187               	bcf	7,3	;volatile
  1338  0F61                     l1915:
  1339                           
  1340                           ;UART.c: 30:     BAUDCTLbits.WUE = 0;
  1341  0F61  1087               	bcf	7,1	;volatile
  1342  0F62                     l1917:
  1343                           
  1344                           ;UART.c: 32:     PIR1bits.RCIF = 0;
  1345  0F62  1283               	bcf	3,5	;RP0=0, select bank0
  1346  0F63  1303               	bcf	3,6	;RP1=0, select bank0
  1347  0F64  128C               	bcf	12,5	;volatile
  1348  0F65                     l1919:
  1349                           
  1350                           ;UART.c: 33:     PIR1bits.TXIF = 0;
  1351  0F65  120C               	bcf	12,4	;volatile
  1352  0F66                     l245:
  1353  0F66  0008               	return
  1354  0F67                     __end_of_uartInit:
  1355                           
  1356                           	psect	text3
  1357  0F67                     __ptext3:	
  1358 ;; *************** function _spiInit *****************
  1359 ;; Defined at:
  1360 ;;		line 12 in file "SPI.c"
  1361 ;; Parameters:    Size  Location     Type
  1362 ;;  sType           1    wreg     enum E1264
  1363 ;;  sDataSample     1   28[BANK0 ] enum E1272
  1364 ;;  sClockIdle      1   29[BANK0 ] enum E1276
  1365 ;;  sTransmitEdg    1   30[BANK0 ] enum E1280
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  sType           1   31[BANK0 ] enum E1264
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      void 
  1370 ;; Registers used:
  1371 ;;		wreg, status,2, status,0
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1377 ;;      Params:         0       3       0       0       0
  1378 ;;      Locals:         0       1       0       0       0
  1379 ;;      Temps:          0       0       0       0       0
  1380 ;;      Totals:         0       4       0       0       0
  1381 ;;Total ram usage:        4 bytes
  1382 ;; Hardware stack levels used: 1
  1383 ;; Hardware stack levels required when called: 4
  1384 ;; This function calls:
  1385 ;;		Nothing
  1386 ;; This function is called by:
  1387 ;;		_setup
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           
  1392                           ;psect for function _spiInit
  1393  0F67                     _spiInit:
  1394                           
  1395                           ;incstack = 0
  1396                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1397                           ;spiInit@sType stored from wreg
  1398  0F67  1283               	bcf	3,5	;RP0=0, select bank0
  1399  0F68  1303               	bcf	3,6	;RP1=0, select bank0
  1400  0F69  00BF               	movwf	spiInit@sType
  1401  0F6A                     l1767:
  1402                           
  1403                           ;SPI.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 13: {;SPI.c: 14:     TRISC5 = 0;
  1404  0F6A  1683               	bsf	3,5	;RP0=1, select bank1
  1405  0F6B  1303               	bcf	3,6	;RP1=0, select bank1
  1406  0F6C  1287               	bcf	7,5	;volatile
  1407                           
  1408                           ;SPI.c: 15:     if(sType & 0b00000100)
  1409  0F6D  1283               	bcf	3,5	;RP0=0, select bank0
  1410  0F6E  1303               	bcf	3,6	;RP1=0, select bank0
  1411  0F6F  1D3F               	btfss	spiInit@sType,2
  1412  0F70  2F72               	goto	u1071
  1413  0F71  2F73               	goto	u1070
  1414  0F72                     u1071:
  1415  0F72  2F7A               	goto	l1775
  1416  0F73                     u1070:
  1417  0F73                     l1769:
  1418                           
  1419                           ;SPI.c: 16:     {;SPI.c: 17:         SSPSTAT = sTransmitEdge;
  1420  0F73  083E               	movf	spiInit@sTransmitEdge,w
  1421  0F74  1683               	bsf	3,5	;RP0=1, select bank1
  1422  0F75  1303               	bcf	3,6	;RP1=0, select bank1
  1423  0F76  0094               	movwf	20	;volatile
  1424  0F77                     l1771:
  1425                           
  1426                           ;SPI.c: 18:         TRISC3 = 1;
  1427  0F77  1587               	bsf	7,3	;volatile
  1428  0F78                     l1773:
  1429                           
  1430                           ;SPI.c: 19:         TRISA5 = 1;
  1431  0F78  1685               	bsf	5,5	;volatile
  1432                           
  1433                           ;SPI.c: 20:     }
  1434  0F79  2F80               	goto	l1779
  1435  0F7A                     l1775:
  1436                           
  1437                           ;SPI.c: 22:     {;SPI.c: 23:         SSPSTAT = sDataSample | sTransmitEdge;
  1438  0F7A  083C               	movf	spiInit@sDataSample,w
  1439  0F7B  043E               	iorwf	spiInit@sTransmitEdge,w
  1440  0F7C  1683               	bsf	3,5	;RP0=1, select bank1
  1441  0F7D  1303               	bcf	3,6	;RP1=0, select bank1
  1442  0F7E  0094               	movwf	20	;volatile
  1443  0F7F                     l1777:
  1444                           
  1445                           ;SPI.c: 24:         TRISC3 = 0;
  1446  0F7F  1187               	bcf	7,3	;volatile
  1447  0F80                     l1779:
  1448                           
  1449                           ;SPI.c: 26:     TRISC4 = 1;
  1450  0F80  1607               	bsf	7,4	;volatile
  1451                           
  1452                           ;SPI.c: 27:     SSPCON = sType | sClockIdle;
  1453  0F81  1283               	bcf	3,5	;RP0=0, select bank0
  1454  0F82  1303               	bcf	3,6	;RP1=0, select bank0
  1455  0F83  083F               	movf	spiInit@sType,w
  1456  0F84  043D               	iorwf	spiInit@sClockIdle,w
  1457  0F85  0094               	movwf	20	;volatile
  1458  0F86                     l21:
  1459  0F86  0008               	return
  1460  0F87                     __end_of_spiInit:
  1461                           
  1462                           	psect	text4
  1463  0EC3                     __ptext4:	
  1464 ;; *************** function _config_tmr1 *****************
  1465 ;; Defined at:
  1466 ;;		line 343 in file "main.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;		None
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;		None
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  1    wreg      void 
  1473 ;; Registers used:
  1474 ;;		wreg
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1480 ;;      Params:         0       0       0       0       0
  1481 ;;      Locals:         0       0       0       0       0
  1482 ;;      Temps:          0       0       0       0       0
  1483 ;;      Totals:         0       0       0       0       0
  1484 ;;Total ram usage:        0 bytes
  1485 ;; Hardware stack levels used: 1
  1486 ;; Hardware stack levels required when called: 4
  1487 ;; This function calls:
  1488 ;;		Nothing
  1489 ;; This function is called by:
  1490 ;;		_setup
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           
  1495                           ;psect for function _config_tmr1
  1496  0EC3                     _config_tmr1:
  1497  0EC3                     l1887:	
  1498                           ;incstack = 0
  1499                           ; Regs used in _config_tmr1: [wreg]
  1500                           
  1501                           
  1502                           ;main.c: 345:     T1CONbits.T1CKPS1 = 1;
  1503  0EC3  1283               	bcf	3,5	;RP0=0, select bank0
  1504  0EC4  1303               	bcf	3,6	;RP1=0, select bank0
  1505  0EC5  1690               	bsf	16,5	;volatile
  1506                           
  1507                           ;main.c: 346:     T1CONbits.T1CKPS0 = 1;
  1508  0EC6  1610               	bsf	16,4	;volatile
  1509                           
  1510                           ;main.c: 347:     T1CONbits.T1OSCEN = 0;
  1511  0EC7  1190               	bcf	16,3	;volatile
  1512                           
  1513                           ;main.c: 348:     T1CONbits.T1SYNC = 1;
  1514  0EC8  1510               	bsf	16,2	;volatile
  1515                           
  1516                           ;main.c: 349:     T1CONbits.TMR1CS = 0;
  1517  0EC9  1090               	bcf	16,1	;volatile
  1518                           
  1519                           ;main.c: 350:     T1CONbits.TMR1ON = 1;
  1520  0ECA  1410               	bsf	16,0	;volatile
  1521  0ECB                     l1889:
  1522                           
  1523                           ;main.c: 351:     TMR1H = 11;
  1524  0ECB  300B               	movlw	11
  1525  0ECC  008F               	movwf	15	;volatile
  1526                           
  1527                           ;main.c: 352:     TMR1L = 220;
  1528  0ECD  30DC               	movlw	220
  1529  0ECE  008E               	movwf	14	;volatile
  1530  0ECF                     l1891:
  1531                           
  1532                           ;main.c: 356:     PIR1bits.TMR1IF = 0;
  1533  0ECF  100C               	bcf	12,0	;volatile
  1534  0ED0                     l183:
  1535  0ED0  0008               	return
  1536  0ED1                     __end_of_config_tmr1:
  1537                           
  1538                           	psect	text5
  1539  0F31                     __ptext5:	
  1540 ;; *************** function _config_lcd *****************
  1541 ;; Defined at:
  1542 ;;		line 329 in file "main.c"
  1543 ;; Parameters:    Size  Location     Type
  1544 ;;		None
  1545 ;; Auto vars:     Size  Location     Type
  1546 ;;		None
  1547 ;; Return value:  Size  Location     Type
  1548 ;;                  1    wreg      void 
  1549 ;; Registers used:
  1550 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1551 ;; Tracked objects:
  1552 ;;		On entry : 0/0
  1553 ;;		On exit  : 0/0
  1554 ;;		Unchanged: 0/0
  1555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1556 ;;      Params:         0       0       0       0       0
  1557 ;;      Locals:         0       0       0       0       0
  1558 ;;      Temps:          0       0       0       0       0
  1559 ;;      Totals:         0       0       0       0       0
  1560 ;;Total ram usage:        0 bytes
  1561 ;; Hardware stack levels used: 1
  1562 ;; Hardware stack levels required when called: 7
  1563 ;; This function calls:
  1564 ;;		_LCD_START
  1565 ;;		_LCD_setCursor
  1566 ;;		_LCD_writeString
  1567 ;; This function is called by:
  1568 ;;		_setup
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           
  1573                           ;psect for function _config_lcd
  1574  0F31                     _config_lcd:
  1575  0F31                     l2439:	
  1576                           ;incstack = 0
  1577 ;; hardware stack exceeded
  1578                           ; Regs used in _config_lcd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1579                           
  1580                           
  1581                           ;main.c: 330:     LCD_START();
  1582  0F31  120A  118A  25E7  120A  158A  	fcall	_LCD_START
  1583  0F36                     l2441:
  1584                           
  1585                           ;main.c: 332:     LCD_setCursor (1,1);
  1586  0F36  1283               	bcf	3,5	;RP0=0, select bank0
  1587  0F37  1303               	bcf	3,6	;RP1=0, select bank0
  1588  0F38  01BF               	clrf	LCD_setCursor@columna
  1589  0F39  0ABF               	incf	LCD_setCursor@columna,f
  1590  0F3A  3001               	movlw	1
  1591  0F3B  120A  118A  27CC  120A  158A  	fcall	_LCD_setCursor
  1592  0F40                     l2443:
  1593                           
  1594                           ;main.c: 333:     LCD_writeString (" S1:  S2:  S3:");
  1595  0F40  301B               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  1596  0F41  1283               	bcf	3,5	;RP0=0, select bank0
  1597  0F42  1303               	bcf	3,6	;RP1=0, select bank0
  1598  0F43  00BF               	movwf	LCD_writeString@text
  1599  0F44  3080               	movlw	128
  1600  0F45  00C0               	movwf	LCD_writeString@text+1
  1601  0F46  120A  118A  263D  120A  158A  	fcall	_LCD_writeString
  1602  0F4B                     l177:
  1603  0F4B  0008               	return
  1604  0F4C                     __end_of_config_lcd:
  1605                           
  1606                           	psect	text6
  1607  05E7                     __ptext6:	
  1608 ;; *************** function _LCD_START *****************
  1609 ;; Defined at:
  1610 ;;		line 19 in file "lcd_8bitsA.c"
  1611 ;; Parameters:    Size  Location     Type
  1612 ;;		None
  1613 ;; Auto vars:     Size  Location     Type
  1614 ;;		None
  1615 ;; Return value:  Size  Location     Type
  1616 ;;                  1    wreg      void 
  1617 ;; Registers used:
  1618 ;;		wreg, status,2, status,0, pclath, cstack
  1619 ;; Tracked objects:
  1620 ;;		On entry : 0/0
  1621 ;;		On exit  : 0/0
  1622 ;;		Unchanged: 0/0
  1623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1624 ;;      Params:         0       0       0       0       0
  1625 ;;      Locals:         0       0       0       0       0
  1626 ;;      Temps:          0       2       0       0       0
  1627 ;;      Totals:         0       2       0       0       0
  1628 ;;Total ram usage:        2 bytes
  1629 ;; Hardware stack levels used: 1
  1630 ;; Hardware stack levels required when called: 6
  1631 ;; This function calls:
  1632 ;;		_LCD_CMD
  1633 ;; This function is called by:
  1634 ;;		_config_lcd
  1635 ;; This function uses a non-reentrant model
  1636 ;;
  1637                           
  1638                           
  1639                           ;psect for function _LCD_START
  1640  05E7                     _LCD_START:
  1641  05E7                     l2237:	
  1642                           ;incstack = 0
  1643 ;; hardware stack exceeded
  1644                           ; Regs used in _LCD_START: [wreg+status,2+status,0+pclath+cstack]
  1645                           
  1646                           
  1647                           ;lcd_8bitsA.c: 20:     RD0 = 0;
  1648  05E7  1283               	bcf	3,5	;RP0=0, select bank0
  1649  05E8  1303               	bcf	3,6	;RP1=0, select bank0
  1650  05E9  1008               	bcf	8,0	;volatile
  1651                           
  1652                           ;lcd_8bitsA.c: 21:     RB7 = 0;
  1653  05EA  1386               	bcf	6,7	;volatile
  1654  05EB                     l2239:
  1655                           
  1656                           ;lcd_8bitsA.c: 22:     PORTA = 0;
  1657  05EB  0185               	clrf	5	;volatile
  1658                           
  1659                           ;lcd_8bitsA.c: 23:     TRISA = 0;
  1660  05EC  1683               	bsf	3,5	;RP0=1, select bank1
  1661  05ED  1303               	bcf	3,6	;RP1=0, select bank1
  1662  05EE  0185               	clrf	5	;volatile
  1663  05EF                     l2241:
  1664                           
  1665                           ;lcd_8bitsA.c: 26:     _delay((unsigned long)((20)*(4000000/4000.0)));
  1666  05EF  301A               	movlw	26
  1667  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  1668  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  1669  05F2  00C0               	movwf	??_LCD_START+1
  1670  05F3  30F7               	movlw	247
  1671  05F4  00BF               	movwf	??_LCD_START
  1672  05F5                     u1627:
  1673  05F5  0BBF               	decfsz	??_LCD_START,f
  1674  05F6  2DF5               	goto	u1627
  1675  05F7  0BC0               	decfsz	??_LCD_START+1,f
  1676  05F8  2DF5               	goto	u1627
  1677  05F9  2DFA               	nop2
  1678  05FA                     l2243:
  1679                           
  1680                           ;lcd_8bitsA.c: 27:     LCD_CMD (0x30);
  1681  05FA  3030               	movlw	48
  1682  05FB  120A  158A  26B7  120A  118A  	fcall	_LCD_CMD
  1683  0600                     l2245:
  1684                           
  1685                           ;lcd_8bitsA.c: 29:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1686  0600  3007               	movlw	7
  1687  0601  1283               	bcf	3,5	;RP0=0, select bank0
  1688  0602  1303               	bcf	3,6	;RP1=0, select bank0
  1689  0603  00C0               	movwf	??_LCD_START+1
  1690  0604  307C               	movlw	124
  1691  0605  00BF               	movwf	??_LCD_START
  1692  0606                     u1637:
  1693  0606  0BBF               	decfsz	??_LCD_START,f
  1694  0607  2E06               	goto	u1637
  1695  0608  0BC0               	decfsz	??_LCD_START+1,f
  1696  0609  2E06               	goto	u1637
  1697  060A  0000               	nop
  1698  060B                     l2247:
  1699                           
  1700                           ;lcd_8bitsA.c: 30:     LCD_CMD (0x30);
  1701  060B  3030               	movlw	48
  1702  060C  120A  158A  26B7  120A  118A  	fcall	_LCD_CMD
  1703  0611                     l2249:
  1704                           
  1705                           ;lcd_8bitsA.c: 32:     _delay((unsigned long)((200)*(4000000/4000000.0)));
  1706  0611  3041               	movlw	65
  1707  0612  1283               	bcf	3,5	;RP0=0, select bank0
  1708  0613  1303               	bcf	3,6	;RP1=0, select bank0
  1709  0614  00BF               	movwf	??_LCD_START
  1710  0615                     u1647:
  1711  0615  0BBF               	decfsz	??_LCD_START,f
  1712  0616  2E15               	goto	u1647
  1713  0617  2E18               	nop2
  1714  0618                     l2251:
  1715                           
  1716                           ;lcd_8bitsA.c: 33:     LCD_CMD (0x30);
  1717  0618  3030               	movlw	48
  1718  0619  120A  158A  26B7  120A  118A  	fcall	_LCD_CMD
  1719  061E                     l2253:
  1720                           
  1721                           ;lcd_8bitsA.c: 37:     LCD_CMD (0x3C);
  1722  061E  303C               	movlw	60
  1723  061F  120A  158A  26B7  120A  118A  	fcall	_LCD_CMD
  1724  0624                     l2255:
  1725                           
  1726                           ;lcd_8bitsA.c: 40:     LCD_CMD (0x0C);
  1727  0624  300C               	movlw	12
  1728  0625  120A  158A  26B7  120A  118A  	fcall	_LCD_CMD
  1729  062A                     l2257:
  1730                           
  1731                           ;lcd_8bitsA.c: 43:     LCD_CMD (0x10);
  1732  062A  3010               	movlw	16
  1733  062B  120A  158A  26B7  120A  118A  	fcall	_LCD_CMD
  1734  0630                     l2259:
  1735                           
  1736                           ;lcd_8bitsA.c: 46:     LCD_CMD (0x01);
  1737  0630  3001               	movlw	1
  1738  0631  120A  158A  26B7  120A  118A  	fcall	_LCD_CMD
  1739  0636                     l2261:
  1740                           
  1741                           ;lcd_8bitsA.c: 49:     LCD_CMD (0x06);
  1742  0636  3006               	movlw	6
  1743  0637  120A  158A  26B7  120A  118A  	fcall	_LCD_CMD
  1744  063C                     l202:
  1745  063C  0008               	return
  1746  063D                     __end_of_LCD_START:
  1747                           
  1748                           	psect	text7
  1749  0EE0                     __ptext7:	
  1750 ;; *************** function _config_io *****************
  1751 ;; Defined at:
  1752 ;;		line 307 in file "main.c"
  1753 ;; Parameters:    Size  Location     Type
  1754 ;;		None
  1755 ;; Auto vars:     Size  Location     Type
  1756 ;;		None
  1757 ;; Return value:  Size  Location     Type
  1758 ;;                  1    wreg      void 
  1759 ;; Registers used:
  1760 ;;		wreg, status,2
  1761 ;; Tracked objects:
  1762 ;;		On entry : 0/0
  1763 ;;		On exit  : 0/0
  1764 ;;		Unchanged: 0/0
  1765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1766 ;;      Params:         0       0       0       0       0
  1767 ;;      Locals:         0       0       0       0       0
  1768 ;;      Temps:          0       0       0       0       0
  1769 ;;      Totals:         0       0       0       0       0
  1770 ;;Total ram usage:        0 bytes
  1771 ;; Hardware stack levels used: 1
  1772 ;; Hardware stack levels required when called: 4
  1773 ;; This function calls:
  1774 ;;		Nothing
  1775 ;; This function is called by:
  1776 ;;		_setup
  1777 ;; This function uses a non-reentrant model
  1778 ;;
  1779                           
  1780                           
  1781                           ;psect for function _config_io
  1782  0EE0                     _config_io:
  1783  0EE0                     l1869:	
  1784                           ;incstack = 0
  1785                           ; Regs used in _config_io: [wreg+status,2]
  1786                           
  1787                           
  1788                           ;main.c: 308:     ANSEL = 0;
  1789  0EE0  1683               	bsf	3,5	;RP0=1, select bank3
  1790  0EE1  1703               	bsf	3,6	;RP1=1, select bank3
  1791  0EE2  0188               	clrf	8	;volatile
  1792                           
  1793                           ;main.c: 309:     ANSELH = 0;
  1794  0EE3  0189               	clrf	9	;volatile
  1795                           
  1796                           ;main.c: 311:     TRISB = 0;
  1797  0EE4  1683               	bsf	3,5	;RP0=1, select bank1
  1798  0EE5  1303               	bcf	3,6	;RP1=0, select bank1
  1799  0EE6  0186               	clrf	6	;volatile
  1800                           
  1801                           ;main.c: 313:     TRISD = 0;
  1802  0EE7  0188               	clrf	8	;volatile
  1803                           
  1804                           ;main.c: 314:     TRISE = 0;
  1805  0EE8  0189               	clrf	9	;volatile
  1806                           
  1807                           ;main.c: 317:     PORTA = 0;
  1808  0EE9  1283               	bcf	3,5	;RP0=0, select bank0
  1809  0EEA  1303               	bcf	3,6	;RP1=0, select bank0
  1810  0EEB  0185               	clrf	5	;volatile
  1811  0EEC                     l1871:
  1812                           
  1813                           ;main.c: 318:     PORTB = 0x70;
  1814  0EEC  3070               	movlw	112
  1815  0EED  0086               	movwf	6	;volatile
  1816  0EEE                     l1873:
  1817                           
  1818                           ;main.c: 320:     PORTC = 0;
  1819  0EEE  0187               	clrf	7	;volatile
  1820  0EEF                     l1875:
  1821                           
  1822                           ;main.c: 321:     PORTD = 0;
  1823  0EEF  0188               	clrf	8	;volatile
  1824  0EF0                     l171:
  1825  0EF0  0008               	return
  1826  0EF1                     __end_of_config_io:
  1827                           
  1828                           	psect	text8
  1829  0E91                     __ptext8:	
  1830 ;; *************** function _config_ie *****************
  1831 ;; Defined at:
  1832 ;;		line 336 in file "main.c"
  1833 ;; Parameters:    Size  Location     Type
  1834 ;;		None
  1835 ;; Auto vars:     Size  Location     Type
  1836 ;;		None
  1837 ;; Return value:  Size  Location     Type
  1838 ;;                  1    wreg      void 
  1839 ;; Registers used:
  1840 ;;		None
  1841 ;; Tracked objects:
  1842 ;;		On entry : 0/0
  1843 ;;		On exit  : 0/0
  1844 ;;		Unchanged: 0/0
  1845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1846 ;;      Params:         0       0       0       0       0
  1847 ;;      Locals:         0       0       0       0       0
  1848 ;;      Temps:          0       0       0       0       0
  1849 ;;      Totals:         0       0       0       0       0
  1850 ;;Total ram usage:        0 bytes
  1851 ;; Hardware stack levels used: 1
  1852 ;; Hardware stack levels required when called: 4
  1853 ;; This function calls:
  1854 ;;		Nothing
  1855 ;; This function is called by:
  1856 ;;		_setup
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860                           
  1861                           ;psect for function _config_ie
  1862  0E91                     _config_ie:
  1863  0E91                     l1893:	
  1864                           ;incstack = 0
  1865                           ; Regs used in _config_ie: []
  1866                           
  1867                           
  1868                           ;main.c: 337:     INTCONbits.GIE = 1;
  1869  0E91  178B               	bsf	11,7	;volatile
  1870                           
  1871                           ;main.c: 338:     INTCONbits.PEIE = 1;
  1872  0E92  170B               	bsf	11,6	;volatile
  1873                           
  1874                           ;main.c: 340:     PIE1bits.TMR1IE = 1;
  1875  0E93  1683               	bsf	3,5	;RP0=1, select bank1
  1876  0E94  1303               	bcf	3,6	;RP1=0, select bank1
  1877  0E95  140C               	bsf	12,0	;volatile
  1878  0E96                     l180:
  1879  0E96  0008               	return
  1880  0E97                     __end_of_config_ie:
  1881                           
  1882                           	psect	text9
  1883  0E9E                     __ptext9:	
  1884 ;; *************** function _config_clock *****************
  1885 ;; Defined at:
  1886 ;;		line 324 in file "main.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;		None
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;		None
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  1    wreg      void 
  1893 ;; Registers used:
  1894 ;;		wreg, status,2, status,0
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1900 ;;      Params:         0       0       0       0       0
  1901 ;;      Locals:         0       0       0       0       0
  1902 ;;      Temps:          0       0       0       0       0
  1903 ;;      Totals:         0       0       0       0       0
  1904 ;;Total ram usage:        0 bytes
  1905 ;; Hardware stack levels used: 1
  1906 ;; Hardware stack levels required when called: 4
  1907 ;; This function calls:
  1908 ;;		Nothing
  1909 ;; This function is called by:
  1910 ;;		_setup
  1911 ;; This function uses a non-reentrant model
  1912 ;;
  1913                           
  1914                           
  1915                           ;psect for function _config_clock
  1916  0E9E                     _config_clock:
  1917  0E9E                     l1877:	
  1918                           ;incstack = 0
  1919                           ; Regs used in _config_clock: [wreg+status,2+status,0]
  1920                           
  1921                           
  1922                           ;main.c: 325:     OSCCONbits.IRCF = 0b110;
  1923  0E9E  1683               	bsf	3,5	;RP0=1, select bank1
  1924  0E9F  1303               	bcf	3,6	;RP1=0, select bank1
  1925  0EA0  080F               	movf	15,w	;volatile
  1926  0EA1  398F               	andlw	-113
  1927  0EA2  3860               	iorlw	96
  1928  0EA3  008F               	movwf	15	;volatile
  1929  0EA4                     l1879:
  1930                           
  1931                           ;main.c: 326:     OSCCONbits.SCS = 1;
  1932  0EA4  140F               	bsf	15,0	;volatile
  1933  0EA5                     l174:
  1934  0EA5  0008               	return
  1935  0EA6                     __end_of_config_clock:
  1936                           
  1937                           	psect	text10
  1938  002A                     __ptext10:	
  1939 ;; *************** function _lcd_show *****************
  1940 ;; Defined at:
  1941 ;;		line 227 in file "main.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;		None
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;		None
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      void 
  1948 ;; Registers used:
  1949 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1955 ;;      Params:         0       0       0       0       0
  1956 ;;      Locals:         0       0       0       0       0
  1957 ;;      Temps:          0       0       7       0       0
  1958 ;;      Totals:         0       0       7       0       0
  1959 ;;Total ram usage:        7 bytes
  1960 ;; Hardware stack levels used: 1
  1961 ;; Hardware stack levels required when called: 7
  1962 ;; This function calls:
  1963 ;;		_LCD_setCursor
  1964 ;;		_LCD_writeString
  1965 ;;		_division
  1966 ;;		_mapeo
  1967 ;;		_sprintf
  1968 ;; This function is called by:
  1969 ;;		_main
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973                           
  1974                           ;psect for function _lcd_show
  1975  002A                     _lcd_show:
  1976  002A                     l2445:	
  1977                           ;incstack = 0
  1978                           ; Regs used in _lcd_show: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1979                           
  1980                           
  1981                           ;main.c: 229:     mapeo (lector.volt, &final.voltage);
  1982  002A  3052               	movlw	(low (_final| 0))& (0+255)
  1983  002B  1683               	bsf	3,5	;RP0=1, select bank1
  1984  002C  1303               	bcf	3,6	;RP1=0, select bank1
  1985  002D  00E4               	movwf	??_lcd_show^(0+128)
  1986  002E  0864               	movf	??_lcd_show^(0+128),w
  1987  002F  1283               	bcf	3,5	;RP0=0, select bank0
  1988  0030  1303               	bcf	3,6	;RP1=0, select bank0
  1989  0031  00C3               	movwf	mapeo@mapeado
  1990  0032  0844               	movf	_lector,w
  1991  0033  120A  118A  2757  120A  118A  	fcall	_mapeo
  1992                           
  1993                           ;main.c: 230:     division (final.voltage, &pot.cen, &pot.dec, &pot.uni);
  1994  0038  1283               	bcf	3,5	;RP0=0, select bank0
  1995  0039  1303               	bcf	3,6	;RP1=0, select bank0
  1996  003A  0853               	movf	_final+1,w
  1997  003B  1683               	bsf	3,5	;RP0=1, select bank1
  1998  003C  1303               	bcf	3,6	;RP1=0, select bank1
  1999  003D  00D4               	movwf	(division@value+1)^(0+128)
  2000  003E  1283               	bcf	3,5	;RP0=0, select bank0
  2001  003F  1303               	bcf	3,6	;RP1=0, select bank0
  2002  0040  0852               	movf	_final,w
  2003  0041  1683               	bsf	3,5	;RP0=1, select bank1
  2004  0042  1303               	bcf	3,6	;RP1=0, select bank1
  2005  0043  00D3               	movwf	division@value^(0+128)
  2006  0044  304F               	movlw	(low (_pot| 0))& (0+255)
  2007  0045  00E4               	movwf	??_lcd_show^(0+128)
  2008  0046  0864               	movf	??_lcd_show^(0+128),w
  2009  0047  00D5               	movwf	division@centena^(0+128)
  2010  0048  3050               	movlw	(low ((_pot| 0+1)))& (0+255)
  2011  0049  00E5               	movwf	(??_lcd_show+1)^(0+128)
  2012  004A  0865               	movf	(??_lcd_show+1)^(0+128),w
  2013  004B  00D6               	movwf	division@decena^(0+128)
  2014  004C  3051               	movlw	(low ((_pot| 0+2)))& (0+255)
  2015  004D  00E6               	movwf	(??_lcd_show+2)^(0+128)
  2016  004E  0866               	movf	(??_lcd_show+2)^(0+128),w
  2017  004F  00D7               	movwf	division@unidad^(0+128)
  2018  0050  120A  118A  249C  120A  118A  	fcall	_division
  2019  0055                     l2447:
  2020                           
  2021                           ;main.c: 232:     sprintf(buffer.adc, "%d.%d%dV", pot.cen, pot.dec, pot.uni);
  2022  0055  303E               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2023  0056  1683               	bsf	3,5	;RP0=1, select bank1
  2024  0057  1303               	bcf	3,6	;RP1=0, select bank1
  2025  0058  00E4               	movwf	??_lcd_show^(0+128)
  2026  0059  0864               	movf	??_lcd_show^(0+128),w
  2027  005A  00D3               	movwf	sprintf@f^(0+128)
  2028  005B  1283               	bcf	3,5	;RP0=0, select bank0
  2029  005C  1303               	bcf	3,6	;RP1=0, select bank0
  2030  005D  084F               	movf	_pot,w
  2031  005E  1683               	bsf	3,5	;RP0=1, select bank1
  2032  005F  1303               	bcf	3,6	;RP1=0, select bank1
  2033  0060  00E5               	movwf	(??_lcd_show+1)^(0+128)
  2034  0061  01E6               	clrf	((??_lcd_show+1)^(0+128)+1)
  2035  0062  0865               	movf	(??_lcd_show+1)^(0+128),w
  2036  0063  00D4               	movwf	(?_sprintf^(0+128)+1)
  2037  0064  0866               	movf	(??_lcd_show+2)^(0+128),w
  2038  0065  00D5               	movwf	((?_sprintf+1)^(0+128)+1)
  2039  0066  1283               	bcf	3,5	;RP0=0, select bank0
  2040  0067  1303               	bcf	3,6	;RP1=0, select bank0
  2041  0068  0850               	movf	_pot+1,w
  2042  0069  1683               	bsf	3,5	;RP0=1, select bank1
  2043  006A  1303               	bcf	3,6	;RP1=0, select bank1
  2044  006B  00E7               	movwf	(??_lcd_show+3)^(0+128)
  2045  006C  01E8               	clrf	((??_lcd_show+3)^(0+128)+1)
  2046  006D  0867               	movf	(??_lcd_show+3)^(0+128),w
  2047  006E  00D6               	movwf	(?_sprintf^(0+128)+3)
  2048  006F  0868               	movf	(??_lcd_show+4)^(0+128),w
  2049  0070  00D7               	movwf	((?_sprintf+1)^(0+128)+3)
  2050  0071  1283               	bcf	3,5	;RP0=0, select bank0
  2051  0072  1303               	bcf	3,6	;RP1=0, select bank0
  2052  0073  0851               	movf	_pot+2,w
  2053  0074  1683               	bsf	3,5	;RP0=1, select bank1
  2054  0075  1303               	bcf	3,6	;RP1=0, select bank1
  2055  0076  00E9               	movwf	(??_lcd_show+5)^(0+128)
  2056  0077  01EA               	clrf	((??_lcd_show+5)^(0+128)+1)
  2057  0078  0869               	movf	(??_lcd_show+5)^(0+128),w
  2058  0079  00D8               	movwf	(?_sprintf^(0+128)+5)
  2059  007A  086A               	movf	(??_lcd_show+6)^(0+128),w
  2060  007B  00D9               	movwf	((?_sprintf+1)^(0+128)+5)
  2061  007C  30A0               	movlw	(low (_buffer| 0))& (0+255)
  2062  007D  120A  118A  215C  120A  118A  	fcall	_sprintf
  2063  0082                     l2449:
  2064                           
  2065                           ;main.c: 233:     LCD_setCursor (2, 1);
  2066  0082  1283               	bcf	3,5	;RP0=0, select bank0
  2067  0083  1303               	bcf	3,6	;RP1=0, select bank0
  2068  0084  01BF               	clrf	LCD_setCursor@columna
  2069  0085  0ABF               	incf	LCD_setCursor@columna,f
  2070  0086  3002               	movlw	2
  2071  0087  120A  118A  27CC  120A  118A  	fcall	_LCD_setCursor
  2072                           
  2073                           ;main.c: 234:     LCD_writeString (buffer.adc);
  2074  008C  30A0               	movlw	(low (_buffer| 0))& (0+255)
  2075  008D  1283               	bcf	3,5	;RP0=0, select bank0
  2076  008E  1303               	bcf	3,6	;RP1=0, select bank0
  2077  008F  00BF               	movwf	LCD_writeString@text
  2078  0090  3000               	movlw	0
  2079  0091  00C0               	movwf	LCD_writeString@text+1
  2080  0092  120A  118A  263D  120A  118A  	fcall	_LCD_writeString
  2081  0097                     l2451:
  2082                           
  2083                           ;main.c: 238:     division (lector.cont, &bot.cen, &bot.dec, &bot.uni);
  2084  0097  1283               	bcf	3,5	;RP0=0, select bank0
  2085  0098  1303               	bcf	3,6	;RP1=0, select bank0
  2086  0099  0845               	movf	_lector+1,w
  2087  009A  1683               	bsf	3,5	;RP0=1, select bank1
  2088  009B  1303               	bcf	3,6	;RP1=0, select bank1
  2089  009C  00E4               	movwf	??_lcd_show^(0+128)
  2090  009D  01E5               	clrf	(??_lcd_show^(0+128)+1)
  2091  009E  0864               	movf	??_lcd_show^(0+128),w
  2092  009F  00D3               	movwf	division@value^(0+128)
  2093  00A0  0865               	movf	(??_lcd_show+1)^(0+128),w
  2094  00A1  00D4               	movwf	(division@value+1)^(0+128)
  2095  00A2  304C               	movlw	(low (_bot| 0))& (0+255)
  2096  00A3  00E6               	movwf	(??_lcd_show+2)^(0+128)
  2097  00A4  0866               	movf	(??_lcd_show+2)^(0+128),w
  2098  00A5  00D5               	movwf	division@centena^(0+128)
  2099  00A6  304D               	movlw	(low ((_bot| 0+1)))& (0+255)
  2100  00A7  00E7               	movwf	(??_lcd_show+3)^(0+128)
  2101  00A8  0867               	movf	(??_lcd_show+3)^(0+128),w
  2102  00A9  00D6               	movwf	division@decena^(0+128)
  2103  00AA  304E               	movlw	(low ((_bot| 0+2)))& (0+255)
  2104  00AB  00E8               	movwf	(??_lcd_show+4)^(0+128)
  2105  00AC  0868               	movf	(??_lcd_show+4)^(0+128),w
  2106  00AD  00D7               	movwf	division@unidad^(0+128)
  2107  00AE  120A  118A  249C  120A  118A  	fcall	_division
  2108  00B3                     l2453:
  2109                           
  2110                           ;main.c: 240:     sprintf(buffer.boton, "%d%d%d", bot.cen, bot.dec, bot.uni);
  2111  00B3  3047               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2112  00B4  1683               	bsf	3,5	;RP0=1, select bank1
  2113  00B5  1303               	bcf	3,6	;RP1=0, select bank1
  2114  00B6  00E4               	movwf	??_lcd_show^(0+128)
  2115  00B7  0864               	movf	??_lcd_show^(0+128),w
  2116  00B8  00D3               	movwf	sprintf@f^(0+128)
  2117  00B9  1283               	bcf	3,5	;RP0=0, select bank0
  2118  00BA  1303               	bcf	3,6	;RP1=0, select bank0
  2119  00BB  084C               	movf	_bot,w
  2120  00BC  1683               	bsf	3,5	;RP0=1, select bank1
  2121  00BD  1303               	bcf	3,6	;RP1=0, select bank1
  2122  00BE  00E5               	movwf	(??_lcd_show+1)^(0+128)
  2123  00BF  01E6               	clrf	((??_lcd_show+1)^(0+128)+1)
  2124  00C0  0865               	movf	(??_lcd_show+1)^(0+128),w
  2125  00C1  00D4               	movwf	(?_sprintf^(0+128)+1)
  2126  00C2  0866               	movf	(??_lcd_show+2)^(0+128),w
  2127  00C3  00D5               	movwf	((?_sprintf+1)^(0+128)+1)
  2128  00C4  1283               	bcf	3,5	;RP0=0, select bank0
  2129  00C5  1303               	bcf	3,6	;RP1=0, select bank0
  2130  00C6  084D               	movf	_bot+1,w
  2131  00C7  1683               	bsf	3,5	;RP0=1, select bank1
  2132  00C8  1303               	bcf	3,6	;RP1=0, select bank1
  2133  00C9  00E7               	movwf	(??_lcd_show+3)^(0+128)
  2134  00CA  01E8               	clrf	((??_lcd_show+3)^(0+128)+1)
  2135  00CB  0867               	movf	(??_lcd_show+3)^(0+128),w
  2136  00CC  00D6               	movwf	(?_sprintf^(0+128)+3)
  2137  00CD  0868               	movf	(??_lcd_show+4)^(0+128),w
  2138  00CE  00D7               	movwf	((?_sprintf+1)^(0+128)+3)
  2139  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  2140  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  2141  00D1  084E               	movf	_bot+2,w
  2142  00D2  1683               	bsf	3,5	;RP0=1, select bank1
  2143  00D3  1303               	bcf	3,6	;RP1=0, select bank1
  2144  00D4  00E9               	movwf	(??_lcd_show+5)^(0+128)
  2145  00D5  01EA               	clrf	((??_lcd_show+5)^(0+128)+1)
  2146  00D6  0869               	movf	(??_lcd_show+5)^(0+128),w
  2147  00D7  00D8               	movwf	(?_sprintf^(0+128)+5)
  2148  00D8  086A               	movf	(??_lcd_show+6)^(0+128),w
  2149  00D9  00D9               	movwf	((?_sprintf+1)^(0+128)+5)
  2150  00DA  30A5               	movlw	(low ((_buffer| 0+5)))& (0+255)
  2151  00DB  120A  118A  215C  120A  118A  	fcall	_sprintf
  2152                           
  2153                           ;main.c: 241:     LCD_setCursor (2, 7);
  2154  00E0  3007               	movlw	7
  2155  00E1  1683               	bsf	3,5	;RP0=1, select bank1
  2156  00E2  1303               	bcf	3,6	;RP1=0, select bank1
  2157  00E3  00E4               	movwf	??_lcd_show^(0+128)
  2158  00E4  0864               	movf	??_lcd_show^(0+128),w
  2159  00E5  1283               	bcf	3,5	;RP0=0, select bank0
  2160  00E6  1303               	bcf	3,6	;RP1=0, select bank0
  2161  00E7  00BF               	movwf	LCD_setCursor@columna
  2162  00E8  3002               	movlw	2
  2163  00E9  120A  118A  27CC  120A  118A  	fcall	_LCD_setCursor
  2164  00EE                     l2455:
  2165                           
  2166                           ;main.c: 242:     LCD_writeString (buffer.boton);
  2167  00EE  30A5               	movlw	(low ((_buffer| 0+5)))& (0+255)
  2168  00EF  1283               	bcf	3,5	;RP0=0, select bank0
  2169  00F0  1303               	bcf	3,6	;RP1=0, select bank0
  2170  00F1  00BF               	movwf	LCD_writeString@text
  2171  00F2  3000               	movlw	0
  2172  00F3  00C0               	movwf	LCD_writeString@text+1
  2173  00F4  120A  118A  263D  120A  118A  	fcall	_LCD_writeString
  2174  00F9                     l2457:
  2175                           
  2176                           ;main.c: 246:     division (lector.temp, &tem.cen, &tem.dec, &tem.uni);
  2177  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  2178  00FA  1303               	bcf	3,6	;RP1=0, select bank0
  2179  00FB  0846               	movf	_lector+2,w
  2180  00FC  1683               	bsf	3,5	;RP0=1, select bank1
  2181  00FD  1303               	bcf	3,6	;RP1=0, select bank1
  2182  00FE  00E4               	movwf	??_lcd_show^(0+128)
  2183  00FF  01E5               	clrf	(??_lcd_show^(0+128)+1)
  2184  0100  0864               	movf	??_lcd_show^(0+128),w
  2185  0101  00D3               	movwf	division@value^(0+128)
  2186  0102  0865               	movf	(??_lcd_show+1)^(0+128),w
  2187  0103  00D4               	movwf	(division@value+1)^(0+128)
  2188  0104  3049               	movlw	(low (_tem| 0))& (0+255)
  2189  0105  00E6               	movwf	(??_lcd_show+2)^(0+128)
  2190  0106  0866               	movf	(??_lcd_show+2)^(0+128),w
  2191  0107  00D5               	movwf	division@centena^(0+128)
  2192  0108  304A               	movlw	(low ((_tem| 0+1)))& (0+255)
  2193  0109  00E7               	movwf	(??_lcd_show+3)^(0+128)
  2194  010A  0867               	movf	(??_lcd_show+3)^(0+128),w
  2195  010B  00D6               	movwf	division@decena^(0+128)
  2196  010C  304B               	movlw	(low ((_tem| 0+2)))& (0+255)
  2197  010D  00E8               	movwf	(??_lcd_show+4)^(0+128)
  2198  010E  0868               	movf	(??_lcd_show+4)^(0+128),w
  2199  010F  00D7               	movwf	division@unidad^(0+128)
  2200  0110  120A  118A  249C  120A  118A  	fcall	_division
  2201                           
  2202                           ;main.c: 247:     sprintf(buffer.sensor, "%d%d%d", tem.cen, tem.dec, tem.uni);
  2203  0115  3047               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2204  0116  1683               	bsf	3,5	;RP0=1, select bank1
  2205  0117  1303               	bcf	3,6	;RP1=0, select bank1
  2206  0118  00E4               	movwf	??_lcd_show^(0+128)
  2207  0119  0864               	movf	??_lcd_show^(0+128),w
  2208  011A  00D3               	movwf	sprintf@f^(0+128)
  2209  011B  1283               	bcf	3,5	;RP0=0, select bank0
  2210  011C  1303               	bcf	3,6	;RP1=0, select bank0
  2211  011D  0849               	movf	_tem,w
  2212  011E  1683               	bsf	3,5	;RP0=1, select bank1
  2213  011F  1303               	bcf	3,6	;RP1=0, select bank1
  2214  0120  00E5               	movwf	(??_lcd_show+1)^(0+128)
  2215  0121  01E6               	clrf	((??_lcd_show+1)^(0+128)+1)
  2216  0122  0865               	movf	(??_lcd_show+1)^(0+128),w
  2217  0123  00D4               	movwf	(?_sprintf^(0+128)+1)
  2218  0124  0866               	movf	(??_lcd_show+2)^(0+128),w
  2219  0125  00D5               	movwf	((?_sprintf+1)^(0+128)+1)
  2220  0126  1283               	bcf	3,5	;RP0=0, select bank0
  2221  0127  1303               	bcf	3,6	;RP1=0, select bank0
  2222  0128  084A               	movf	_tem+1,w
  2223  0129  1683               	bsf	3,5	;RP0=1, select bank1
  2224  012A  1303               	bcf	3,6	;RP1=0, select bank1
  2225  012B  00E7               	movwf	(??_lcd_show+3)^(0+128)
  2226  012C  01E8               	clrf	((??_lcd_show+3)^(0+128)+1)
  2227  012D  0867               	movf	(??_lcd_show+3)^(0+128),w
  2228  012E  00D6               	movwf	(?_sprintf^(0+128)+3)
  2229  012F  0868               	movf	(??_lcd_show+4)^(0+128),w
  2230  0130  00D7               	movwf	((?_sprintf+1)^(0+128)+3)
  2231  0131  1283               	bcf	3,5	;RP0=0, select bank0
  2232  0132  1303               	bcf	3,6	;RP1=0, select bank0
  2233  0133  084B               	movf	_tem+2,w
  2234  0134  1683               	bsf	3,5	;RP0=1, select bank1
  2235  0135  1303               	bcf	3,6	;RP1=0, select bank1
  2236  0136  00E9               	movwf	(??_lcd_show+5)^(0+128)
  2237  0137  01EA               	clrf	((??_lcd_show+5)^(0+128)+1)
  2238  0138  0869               	movf	(??_lcd_show+5)^(0+128),w
  2239  0139  00D8               	movwf	(?_sprintf^(0+128)+5)
  2240  013A  086A               	movf	(??_lcd_show+6)^(0+128),w
  2241  013B  00D9               	movwf	((?_sprintf+1)^(0+128)+5)
  2242  013C  30AA               	movlw	(low ((_buffer| 0+10)))& (0+255)
  2243  013D  120A  118A  215C  120A  118A  	fcall	_sprintf
  2244  0142                     l2459:
  2245                           
  2246                           ;main.c: 248:     LCD_setCursor (2, 11);
  2247  0142  300B               	movlw	11
  2248  0143  1683               	bsf	3,5	;RP0=1, select bank1
  2249  0144  1303               	bcf	3,6	;RP1=0, select bank1
  2250  0145  00E4               	movwf	??_lcd_show^(0+128)
  2251  0146  0864               	movf	??_lcd_show^(0+128),w
  2252  0147  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0148  1303               	bcf	3,6	;RP1=0, select bank0
  2254  0149  00BF               	movwf	LCD_setCursor@columna
  2255  014A  3002               	movlw	2
  2256  014B  120A  118A  27CC  120A  118A  	fcall	_LCD_setCursor
  2257  0150                     l2461:
  2258                           
  2259                           ;main.c: 249:     LCD_writeString (buffer.sensor);
  2260  0150  30AA               	movlw	(low ((_buffer| 0+10)))& (0+255)
  2261  0151  1283               	bcf	3,5	;RP0=0, select bank0
  2262  0152  1303               	bcf	3,6	;RP1=0, select bank0
  2263  0153  00BF               	movwf	LCD_writeString@text
  2264  0154  3000               	movlw	0
  2265  0155  00C0               	movwf	LCD_writeString@text+1
  2266  0156  120A  118A  263D  120A  118A  	fcall	_LCD_writeString
  2267  015B                     l154:
  2268  015B  0008               	return
  2269  015C                     __end_of_lcd_show:
  2270                           
  2271                           	psect	text11
  2272  015C                     __ptext11:	
  2273 ;; *************** function _sprintf *****************
  2274 ;; Defined at:
  2275 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;  sp              1    wreg     PTR unsigned char 
  2278 ;;		 -> buffer(45), 
  2279 ;;  f               1    6[BANK1 ] PTR const unsigned char 
  2280 ;;		 -> STR_6(7), STR_5(9), STR_4(11), STR_3(7), 
  2281 ;;		 -> STR_2(7), STR_1(9), 
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;  sp              1   21[BANK1 ] PTR unsigned char 
  2284 ;;		 -> buffer(45), 
  2285 ;;  tmpval          4    0        struct .
  2286 ;;  val             2   19[BANK1 ] unsigned int 
  2287 ;;  cp              2    0        PTR const unsigned char 
  2288 ;;  len             2    0        unsigned int 
  2289 ;;  c               1   22[BANK1 ] unsigned char 
  2290 ;;  prec            1   18[BANK1 ] char 
  2291 ;;  flag            1   17[BANK1 ] unsigned char 
  2292 ;;  ap              1   16[BANK1 ] PTR void [1]
  2293 ;;		 -> ?_sprintf(2), 
  2294 ;; Return value:  Size  Location     Type
  2295 ;;                  2    6[BANK1 ] int 
  2296 ;; Registers used:
  2297 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2298 ;; Tracked objects:
  2299 ;;		On entry : 0/0
  2300 ;;		On exit  : 0/0
  2301 ;;		Unchanged: 0/0
  2302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2303 ;;      Params:         0       0       7       0       0
  2304 ;;      Locals:         0       0       7       0       0
  2305 ;;      Temps:          0       0       3       0       0
  2306 ;;      Totals:         0       0      17       0       0
  2307 ;;Total ram usage:       17 bytes
  2308 ;; Hardware stack levels used: 1
  2309 ;; Hardware stack levels required when called: 5
  2310 ;; This function calls:
  2311 ;;		___lwdiv
  2312 ;;		___lwmod
  2313 ;; This function is called by:
  2314 ;;		_lcd_show
  2315 ;; This function uses a non-reentrant model
  2316 ;;
  2317                           
  2318                           
  2319                           ;psect for function _sprintf
  2320  015C                     _sprintf:
  2321                           
  2322                           ;incstack = 0
  2323                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2324                           ;sprintf@sp stored from wreg
  2325  015C  1683               	bsf	3,5	;RP0=1, select bank1
  2326  015D  1303               	bcf	3,6	;RP1=0, select bank1
  2327  015E  00E2               	movwf	sprintf@sp^(0+128)
  2328  015F                     l2377:
  2329                           
  2330                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  2331  015F  30D4               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2332  0160  00DA               	movwf	??_sprintf^(0+128)
  2333  0161  085A               	movf	??_sprintf^(0+128),w
  2334  0162  00DD               	movwf	sprintf@ap^(0+128)
  2335                           
  2336                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2337  0163  2A3F               	goto	l2429
  2338  0164                     l2379:
  2339                           
  2340                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  2341  0164  3025               	movlw	37
  2342  0165  0663               	xorwf	sprintf@c^(0+128),w
  2343  0166  1903               	btfsc	3,2
  2344  0167  2969               	goto	u1551
  2345  0168  296A               	goto	u1550
  2346  0169                     u1551:
  2347  0169  2976               	goto	l2385
  2348  016A                     u1550:
  2349  016A                     l2381:
  2350                           
  2351                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  2352  016A  0863               	movf	sprintf@c^(0+128),w
  2353  016B  00DA               	movwf	??_sprintf^(0+128)
  2354  016C  0862               	movf	sprintf@sp^(0+128),w
  2355  016D  0084               	movwf	4
  2356  016E  085A               	movf	??_sprintf^(0+128),w
  2357  016F  1383               	bcf	3,7	;select IRP bank0
  2358  0170  0080               	movwf	0
  2359  0171                     l2383:
  2360  0171  3001               	movlw	1
  2361  0172  00DA               	movwf	??_sprintf^(0+128)
  2362  0173  085A               	movf	??_sprintf^(0+128),w
  2363  0174  07E2               	addwf	sprintf@sp^(0+128),f
  2364                           
  2365                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
  2366  0175  2A3F               	goto	l2429
  2367  0176                     l2385:
  2368                           
  2369                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  2370  0176  01DE               	clrf	sprintf@flag^(0+128)
  2371  0177                     l2389:	
  2372                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  2373                           
  2374  0177  3001               	movlw	1
  2375  0178  07D3               	addwf	sprintf@f^(0+128),f
  2376  0179  30FF               	movlw	-1
  2377  017A  0753               	addwf	sprintf@f^(0+128),w
  2378  017B  0084               	movwf	4
  2379  017C  120A  118A  2594  120A  118A  	fcall	stringdir
  2380  0181  00E3               	movwf	sprintf@c^(0+128)
  2381  0182  00DA               	movwf	??_sprintf^(0+128)
  2382  0183  01DB               	clrf	(??_sprintf^(0+128)+1)
  2383                           
  2384                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2385                           ; Switch size 1, requested type "simple"
  2386                           ; Number of cases is 1, Range of values is 0 to 0
  2387                           ; switch strategies available:
  2388                           ; Name         Instructions Cycles
  2389                           ; simple_byte            4     3 (average)
  2390                           ; direct_byte           11     8 (fixed)
  2391                           ; jumptable            260     6 (fixed)
  2392                           ;	Chosen strategy is simple_byte
  2393  0184  085B               	movf	(??_sprintf+1)^(0+128),w
  2394  0185  3A00               	xorlw	0	; case 0
  2395  0186  1903               	skipnz
  2396  0187  2989               	goto	l2581
  2397  0188  2A3F               	goto	l2429
  2398  0189                     l2581:
  2399                           
  2400                           ; Switch size 1, requested type "simple"
  2401                           ; Number of cases is 3, Range of values is 0 to 105
  2402                           ; switch strategies available:
  2403                           ; Name         Instructions Cycles
  2404                           ; simple_byte           10     6 (average)
  2405                           ; jumptable            260     6 (fixed)
  2406                           ;	Chosen strategy is simple_byte
  2407  0189  085A               	movf	??_sprintf^(0+128),w
  2408  018A  3A00               	xorlw	0	; case 0
  2409  018B  1903               	skipnz
  2410  018C  2A51               	goto	l2431
  2411  018D  3A64               	xorlw	100	; case 100
  2412  018E  1903               	skipnz
  2413  018F  2994               	goto	l2391
  2414  0190  3A0D               	xorlw	13	; case 105
  2415  0191  1903               	skipnz
  2416  0192  2994               	goto	l2391
  2417  0193  2A3F               	goto	l2429
  2418  0194                     l2391:
  2419                           
  2420                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2421  0194  085D               	movf	sprintf@ap^(0+128),w
  2422  0195  0084               	movwf	4
  2423  0196  1383               	bcf	3,7	;select IRP bank0
  2424  0197  0800               	movf	0,w
  2425  0198  00E0               	movwf	sprintf@val^(0+128)
  2426  0199  0A84               	incf	4,f
  2427  019A  0800               	movf	0,w
  2428  019B  00E1               	movwf	(sprintf@val+1)^(0+128)
  2429  019C                     l2393:
  2430  019C  3002               	movlw	2
  2431  019D  00DA               	movwf	??_sprintf^(0+128)
  2432  019E  085A               	movf	??_sprintf^(0+128),w
  2433  019F  07DD               	addwf	sprintf@ap^(0+128),f
  2434  01A0                     l2395:
  2435                           
  2436                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  2437  01A0  1FE1               	btfss	(sprintf@val+1)^(0+128),7
  2438  01A1  29A3               	goto	u1561
  2439  01A2  29A4               	goto	u1560
  2440  01A3                     u1561:
  2441  01A3  29AD               	goto	l2401
  2442  01A4                     u1560:
  2443  01A4                     l2397:
  2444                           
  2445                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  2446  01A4  3003               	movlw	3
  2447  01A5  00DA               	movwf	??_sprintf^(0+128)
  2448  01A6  085A               	movf	??_sprintf^(0+128),w
  2449  01A7  04DE               	iorwf	sprintf@flag^(0+128),f
  2450  01A8                     l2399:
  2451                           
  2452                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  2453  01A8  09E0               	comf	sprintf@val^(0+128),f
  2454  01A9  09E1               	comf	(sprintf@val+1)^(0+128),f
  2455  01AA  0AE0               	incf	sprintf@val^(0+128),f
  2456  01AB  1903               	skipnz
  2457  01AC  0AE1               	incf	(sprintf@val+1)^(0+128),f
  2458  01AD                     l2401:
  2459                           
  2460                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  2461  01AD  01E3               	clrf	sprintf@c^(0+128)
  2462  01AE  0AE3               	incf	sprintf@c^(0+128),f
  2463  01AF                     l2407:
  2464                           
  2465                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  2466  01AF  0863               	movf	sprintf@c^(0+128),w
  2467  01B0  00DA               	movwf	??_sprintf^(0+128)
  2468  01B1  075A               	addwf	??_sprintf^(0+128),w
  2469  01B2  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2470  01B3  0084               	movwf	4
  2471  01B4  120A  118A  2594  120A  118A  	fcall	stringdir
  2472  01B9  00DB               	movwf	(??_sprintf+1)^(0+128)
  2473  01BA  120A  118A  2594  120A  118A  	fcall	stringdir
  2474  01BF  00DC               	movwf	((??_sprintf+1)^(0+128)+1)
  2475  01C0  085C               	movf	(??_sprintf+2)^(0+128),w
  2476  01C1  0261               	subwf	(sprintf@val+1)^(0+128),w
  2477  01C2  1D03               	skipz
  2478  01C3  29C6               	goto	u1575
  2479  01C4  085B               	movf	(??_sprintf+1)^(0+128),w
  2480  01C5  0260               	subwf	sprintf@val^(0+128),w
  2481  01C6                     u1575:
  2482  01C6  1803               	skipnc
  2483  01C7  29C9               	goto	u1571
  2484  01C8  29CA               	goto	u1570
  2485  01C9                     u1571:
  2486  01C9  29CB               	goto	l2411
  2487  01CA                     u1570:
  2488  01CA  29D5               	goto	l2413
  2489  01CB                     l2411:
  2490  01CB  3001               	movlw	1
  2491  01CC  00DA               	movwf	??_sprintf^(0+128)
  2492  01CD  085A               	movf	??_sprintf^(0+128),w
  2493  01CE  07E3               	addwf	sprintf@c^(0+128),f
  2494  01CF  3005               	movlw	5
  2495  01D0  0663               	xorwf	sprintf@c^(0+128),w
  2496  01D1  1D03               	btfss	3,2
  2497  01D2  29D4               	goto	u1581
  2498  01D3  29D5               	goto	u1580
  2499  01D4                     u1581:
  2500  01D4  29AF               	goto	l2407
  2501  01D5                     u1580:
  2502  01D5                     l2413:
  2503                           
  2504                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  2505  01D5  085E               	movf	sprintf@flag^(0+128),w
  2506  01D6  3903               	andlw	3
  2507  01D7  1903               	btfsc	3,2
  2508  01D8  29DA               	goto	u1591
  2509  01D9  29DB               	goto	u1590
  2510  01DA                     u1591:
  2511  01DA  29E6               	goto	l2419
  2512  01DB                     u1590:
  2513  01DB                     l2415:
  2514                           
  2515                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  2516  01DB  302D               	movlw	45
  2517  01DC  00DA               	movwf	??_sprintf^(0+128)
  2518  01DD  0862               	movf	sprintf@sp^(0+128),w
  2519  01DE  0084               	movwf	4
  2520  01DF  085A               	movf	??_sprintf^(0+128),w
  2521  01E0  1383               	bcf	3,7	;select IRP bank0
  2522  01E1  0080               	movwf	0
  2523  01E2                     l2417:
  2524  01E2  3001               	movlw	1
  2525  01E3  00DA               	movwf	??_sprintf^(0+128)
  2526  01E4  085A               	movf	??_sprintf^(0+128),w
  2527  01E5  07E2               	addwf	sprintf@sp^(0+128),f
  2528  01E6                     l2419:
  2529                           
  2530                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  2531  01E6  0863               	movf	sprintf@c^(0+128),w
  2532  01E7  00DA               	movwf	??_sprintf^(0+128)
  2533  01E8  085A               	movf	??_sprintf^(0+128),w
  2534  01E9  00DF               	movwf	sprintf@prec^(0+128)
  2535                           
  2536                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2537  01EA  2A36               	goto	l2427
  2538  01EB                     l2421:
  2539                           
  2540                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  2541  01EB  300A               	movlw	10
  2542  01EC  00CD               	movwf	___lwmod@divisor^(0+128)
  2543  01ED  3000               	movlw	0
  2544  01EE  00CE               	movwf	(___lwmod@divisor^(0+128)+1)
  2545  01EF  085F               	movf	sprintf@prec^(0+128),w
  2546  01F0  00DA               	movwf	??_sprintf^(0+128)
  2547  01F1  075A               	addwf	??_sprintf^(0+128),w
  2548  01F2  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2549  01F3  0084               	movwf	4
  2550  01F4  120A  118A  2594  120A  118A  	fcall	stringdir
  2551  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  2552  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  2553  01FB  00BC               	movwf	___lwdiv@divisor
  2554  01FC  120A  118A  2594  120A  118A  	fcall	stringdir
  2555  0201  00BD               	movwf	___lwdiv@divisor+1
  2556  0202  1683               	bsf	3,5	;RP0=1, select bank1
  2557  0203  1303               	bcf	3,6	;RP1=0, select bank1
  2558  0204  0861               	movf	(sprintf@val+1)^(0+128),w
  2559  0205  1283               	bcf	3,5	;RP0=0, select bank0
  2560  0206  1303               	bcf	3,6	;RP1=0, select bank0
  2561  0207  00BF               	movwf	___lwdiv@dividend+1
  2562  0208  1683               	bsf	3,5	;RP0=1, select bank1
  2563  0209  1303               	bcf	3,6	;RP1=0, select bank1
  2564  020A  0860               	movf	sprintf@val^(0+128),w
  2565  020B  1283               	bcf	3,5	;RP0=0, select bank0
  2566  020C  1303               	bcf	3,6	;RP1=0, select bank0
  2567  020D  00BE               	movwf	___lwdiv@dividend
  2568  020E  120A  118A  2691  120A  118A  	fcall	___lwdiv
  2569  0213  1283               	bcf	3,5	;RP0=0, select bank0
  2570  0214  1303               	bcf	3,6	;RP1=0, select bank0
  2571  0215  083D               	movf	?___lwdiv+1,w
  2572  0216  1683               	bsf	3,5	;RP0=1, select bank1
  2573  0217  1303               	bcf	3,6	;RP1=0, select bank1
  2574  0218  00D0               	movwf	(___lwmod@dividend+1)^(0+128)
  2575  0219  1283               	bcf	3,5	;RP0=0, select bank0
  2576  021A  1303               	bcf	3,6	;RP1=0, select bank0
  2577  021B  083C               	movf	?___lwdiv,w
  2578  021C  1683               	bsf	3,5	;RP0=1, select bank1
  2579  021D  1303               	bcf	3,6	;RP1=0, select bank1
  2580  021E  00CF               	movwf	___lwmod@dividend^(0+128)
  2581  021F  120A  118A  271B  120A  118A  	fcall	___lwmod
  2582  0224  1683               	bsf	3,5	;RP0=1, select bank1
  2583  0225  1303               	bcf	3,6	;RP1=0, select bank1
  2584  0226  084D               	movf	?___lwmod^(0+128),w
  2585  0227  3E30               	addlw	48
  2586  0228  00DB               	movwf	(??_sprintf+1)^(0+128)
  2587  0229  085B               	movf	(??_sprintf+1)^(0+128),w
  2588  022A  00E3               	movwf	sprintf@c^(0+128)
  2589  022B                     l2423:
  2590                           
  2591                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  2592  022B  0863               	movf	sprintf@c^(0+128),w
  2593  022C  00DA               	movwf	??_sprintf^(0+128)
  2594  022D  0862               	movf	sprintf@sp^(0+128),w
  2595  022E  0084               	movwf	4
  2596  022F  085A               	movf	??_sprintf^(0+128),w
  2597  0230  1383               	bcf	3,7	;select IRP bank0
  2598  0231  0080               	movwf	0
  2599  0232                     l2425:
  2600  0232  3001               	movlw	1
  2601  0233  00DA               	movwf	??_sprintf^(0+128)
  2602  0234  085A               	movf	??_sprintf^(0+128),w
  2603  0235  07E2               	addwf	sprintf@sp^(0+128),f
  2604  0236                     l2427:
  2605                           
  2606                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2607  0236  30FF               	movlw	255
  2608  0237  00DA               	movwf	??_sprintf^(0+128)
  2609  0238  085A               	movf	??_sprintf^(0+128),w
  2610  0239  07DF               	addwf	sprintf@prec^(0+128),f
  2611  023A  0A5F               	incf	sprintf@prec^(0+128),w
  2612  023B  1D03               	btfss	3,2
  2613  023C  2A3E               	goto	u1601
  2614  023D  2A3F               	goto	u1600
  2615  023E                     u1601:
  2616  023E  29EB               	goto	l2421
  2617  023F                     u1600:
  2618  023F                     l2429:
  2619                           
  2620                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2621  023F  3001               	movlw	1
  2622  0240  07D3               	addwf	sprintf@f^(0+128),f
  2623  0241  30FF               	movlw	-1
  2624  0242  0753               	addwf	sprintf@f^(0+128),w
  2625  0243  0084               	movwf	4
  2626  0244  120A  118A  2594  120A  118A  	fcall	stringdir
  2627  0249  00DA               	movwf	??_sprintf^(0+128)
  2628  024A  085A               	movf	??_sprintf^(0+128),w
  2629  024B  00E3               	movwf	sprintf@c^(0+128)
  2630  024C  0863               	movf	sprintf@c^(0+128),w
  2631  024D  1D03               	btfss	3,2
  2632  024E  2A50               	goto	u1611
  2633  024F  2A51               	goto	u1610
  2634  0250                     u1611:
  2635  0250  2964               	goto	l2379
  2636  0251                     u1610:
  2637  0251                     l2431:
  2638                           
  2639                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2640  0251  0862               	movf	sprintf@sp^(0+128),w
  2641  0252  0084               	movwf	4
  2642  0253  1383               	bcf	3,7	;select IRP bank0
  2643  0254  0180               	clrf	0
  2644  0255                     l367:
  2645  0255  0008               	return
  2646  0256                     __end_of_sprintf:
  2647                           
  2648                           	psect	text12
  2649  0757                     __ptext12:	
  2650 ;; *************** function _mapeo *****************
  2651 ;; Defined at:
  2652 ;;		line 150 in file "main.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;  valor           1    wreg     unsigned char 
  2655 ;;  mapeado         1   35[BANK0 ] PTR unsigned int 
  2656 ;;		 -> final(2), 
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;  valor           1   10[BANK1 ] unsigned char 
  2659 ;; Return value:  Size  Location     Type
  2660 ;;                  1    wreg      void 
  2661 ;; Registers used:
  2662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2663 ;; Tracked objects:
  2664 ;;		On entry : 0/0
  2665 ;;		On exit  : 0/0
  2666 ;;		Unchanged: 0/0
  2667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2668 ;;      Params:         0       1       0       0       0
  2669 ;;      Locals:         0       0       1       0       0
  2670 ;;      Temps:          0       0       2       0       0
  2671 ;;      Totals:         0       1       3       0       0
  2672 ;;Total ram usage:        4 bytes
  2673 ;; Hardware stack levels used: 1
  2674 ;; Hardware stack levels required when called: 5
  2675 ;; This function calls:
  2676 ;;		___awdiv
  2677 ;;		___wmul
  2678 ;; This function is called by:
  2679 ;;		_lcd_show
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           
  2684                           ;psect for function _mapeo
  2685  0757                     _mapeo:
  2686                           
  2687                           ;incstack = 0
  2688                           ; Regs used in _mapeo: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2689                           ;mapeo@valor stored from wreg
  2690  0757  1683               	bsf	3,5	;RP0=1, select bank1
  2691  0758  1303               	bcf	3,6	;RP1=0, select bank1
  2692  0759  00D7               	movwf	mapeo@valor^(0+128)
  2693  075A                     l2375:
  2694                           
  2695                           ;main.c: 151:     *mapeado = valor*100/51;
  2696  075A  3033               	movlw	51
  2697  075B  00CD               	movwf	___awdiv@divisor^(0+128)
  2698  075C  3000               	movlw	0
  2699  075D  00CE               	movwf	(___awdiv@divisor^(0+128)+1)
  2700  075E  0857               	movf	mapeo@valor^(0+128),w
  2701  075F  00D5               	movwf	??_mapeo^(0+128)
  2702  0760  01D6               	clrf	(??_mapeo^(0+128)+1)
  2703  0761  0855               	movf	??_mapeo^(0+128),w
  2704  0762  1283               	bcf	3,5	;RP0=0, select bank0
  2705  0763  1303               	bcf	3,6	;RP1=0, select bank0
  2706  0764  00BC               	movwf	___wmul@multiplier
  2707  0765  1683               	bsf	3,5	;RP0=1, select bank1
  2708  0766  1303               	bcf	3,6	;RP1=0, select bank1
  2709  0767  0856               	movf	(??_mapeo+1)^(0+128),w
  2710  0768  1283               	bcf	3,5	;RP0=0, select bank0
  2711  0769  1303               	bcf	3,6	;RP1=0, select bank0
  2712  076A  00BD               	movwf	___wmul@multiplier+1
  2713  076B  3064               	movlw	100
  2714  076C  00BE               	movwf	___wmul@multiplicand
  2715  076D  3000               	movlw	0
  2716  076E  00BF               	movwf	___wmul@multiplicand+1
  2717  076F  120A  158A  2787  120A  118A  	fcall	___wmul
  2718  0774  1283               	bcf	3,5	;RP0=0, select bank0
  2719  0775  1303               	bcf	3,6	;RP1=0, select bank0
  2720  0776  083D               	movf	?___wmul+1,w
  2721  0777  1683               	bsf	3,5	;RP0=1, select bank1
  2722  0778  1303               	bcf	3,6	;RP1=0, select bank1
  2723  0779  00D0               	movwf	(___awdiv@dividend+1)^(0+128)
  2724  077A  1283               	bcf	3,5	;RP0=0, select bank0
  2725  077B  1303               	bcf	3,6	;RP1=0, select bank0
  2726  077C  083C               	movf	?___wmul,w
  2727  077D  1683               	bsf	3,5	;RP0=1, select bank1
  2728  077E  1303               	bcf	3,6	;RP1=0, select bank1
  2729  077F  00CF               	movwf	___awdiv@dividend^(0+128)
  2730  0780  120A  118A  2519  120A  118A  	fcall	___awdiv
  2731  0785  1283               	bcf	3,5	;RP0=0, select bank0
  2732  0786  1303               	bcf	3,6	;RP1=0, select bank0
  2733  0787  0843               	movf	mapeo@mapeado,w
  2734  0788  0084               	movwf	4
  2735  0789  1683               	bsf	3,5	;RP0=1, select bank1
  2736  078A  1303               	bcf	3,6	;RP1=0, select bank1
  2737  078B  084D               	movf	?___awdiv^(0+128),w
  2738  078C  1383               	bcf	3,7	;select IRP bank0
  2739  078D  0080               	movwf	0
  2740  078E  0A84               	incf	4,f
  2741  078F  084E               	movf	(?___awdiv+1)^(0+128),w
  2742  0790  0080               	movwf	0
  2743  0791                     l142:
  2744  0791  0008               	return
  2745  0792                     __end_of_mapeo:
  2746                           
  2747                           	psect	text13
  2748  0F87                     __ptext13:	
  2749 ;; *************** function ___wmul *****************
  2750 ;; Defined at:
  2751 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul16.c"
  2752 ;; Parameters:    Size  Location     Type
  2753 ;;  multiplier      2   28[BANK0 ] unsigned int 
  2754 ;;  multiplicand    2   30[BANK0 ] unsigned int 
  2755 ;; Auto vars:     Size  Location     Type
  2756 ;;  product         2   32[BANK0 ] unsigned int 
  2757 ;; Return value:  Size  Location     Type
  2758 ;;                  2   28[BANK0 ] unsigned int 
  2759 ;; Registers used:
  2760 ;;		wreg, status,2, status,0
  2761 ;; Tracked objects:
  2762 ;;		On entry : 0/0
  2763 ;;		On exit  : 0/0
  2764 ;;		Unchanged: 0/0
  2765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2766 ;;      Params:         0       4       0       0       0
  2767 ;;      Locals:         0       2       0       0       0
  2768 ;;      Temps:          0       0       0       0       0
  2769 ;;      Totals:         0       6       0       0       0
  2770 ;;Total ram usage:        6 bytes
  2771 ;; Hardware stack levels used: 1
  2772 ;; Hardware stack levels required when called: 4
  2773 ;; This function calls:
  2774 ;;		Nothing
  2775 ;; This function is called by:
  2776 ;;		_mapeo
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           
  2781                           ;psect for function ___wmul
  2782  0F87                     ___wmul:
  2783  0F87                     l2263:	
  2784                           ;incstack = 0
  2785                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2786                           
  2787  0F87  1283               	bcf	3,5	;RP0=0, select bank0
  2788  0F88  1303               	bcf	3,6	;RP1=0, select bank0
  2789  0F89  01C0               	clrf	___wmul@product
  2790  0F8A  01C1               	clrf	___wmul@product+1
  2791  0F8B                     l2265:
  2792  0F8B  1C3C               	btfss	___wmul@multiplier,0
  2793  0F8C  2F8E               	goto	u1281
  2794  0F8D  2F8F               	goto	u1280
  2795  0F8E                     u1281:
  2796  0F8E  2F95               	goto	l371
  2797  0F8F                     u1280:
  2798  0F8F                     l2267:
  2799  0F8F  083E               	movf	___wmul@multiplicand,w
  2800  0F90  07C0               	addwf	___wmul@product,f
  2801  0F91  1803               	skipnc
  2802  0F92  0AC1               	incf	___wmul@product+1,f
  2803  0F93  083F               	movf	___wmul@multiplicand+1,w
  2804  0F94  07C1               	addwf	___wmul@product+1,f
  2805  0F95                     l371:
  2806  0F95  3001               	movlw	1
  2807  0F96                     u1295:
  2808  0F96  1003               	clrc
  2809  0F97  0DBE               	rlf	___wmul@multiplicand,f
  2810  0F98  0DBF               	rlf	___wmul@multiplicand+1,f
  2811  0F99  3EFF               	addlw	-1
  2812  0F9A  1D03               	skipz
  2813  0F9B  2F96               	goto	u1295
  2814  0F9C                     l2269:
  2815  0F9C  3001               	movlw	1
  2816  0F9D                     u1305:
  2817  0F9D  1003               	clrc
  2818  0F9E  0CBD               	rrf	___wmul@multiplier+1,f
  2819  0F9F  0CBC               	rrf	___wmul@multiplier,f
  2820  0FA0  3EFF               	addlw	-1
  2821  0FA1  1D03               	skipz
  2822  0FA2  2F9D               	goto	u1305
  2823  0FA3                     l2271:
  2824  0FA3  083C               	movf	___wmul@multiplier,w
  2825  0FA4  043D               	iorwf	___wmul@multiplier+1,w
  2826  0FA5  1D03               	btfss	3,2
  2827  0FA6  2FA8               	goto	u1311
  2828  0FA7  2FA9               	goto	u1310
  2829  0FA8                     u1311:
  2830  0FA8  2F8B               	goto	l2265
  2831  0FA9                     u1310:
  2832  0FA9                     l2273:
  2833  0FA9  0841               	movf	___wmul@product+1,w
  2834  0FAA  00BD               	movwf	?___wmul+1
  2835  0FAB  0840               	movf	___wmul@product,w
  2836  0FAC  00BC               	movwf	?___wmul
  2837  0FAD                     l373:
  2838  0FAD  0008               	return
  2839  0FAE                     __end_of___wmul:
  2840                           
  2841                           	psect	text14
  2842  0519                     __ptext14:	
  2843 ;; *************** function ___awdiv *****************
  2844 ;; Defined at:
  2845 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  2846 ;; Parameters:    Size  Location     Type
  2847 ;;  divisor         2    0[BANK1 ] int 
  2848 ;;  dividend        2    2[BANK1 ] int 
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;  quotient        2    6[BANK1 ] int 
  2851 ;;  sign            1    5[BANK1 ] unsigned char 
  2852 ;;  counter         1    4[BANK1 ] unsigned char 
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  2    0[BANK1 ] int 
  2855 ;; Registers used:
  2856 ;;		wreg, status,2, status,0
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2862 ;;      Params:         0       0       4       0       0
  2863 ;;      Locals:         0       0       4       0       0
  2864 ;;      Temps:          0       1       0       0       0
  2865 ;;      Totals:         0       1       8       0       0
  2866 ;;Total ram usage:        9 bytes
  2867 ;; Hardware stack levels used: 1
  2868 ;; Hardware stack levels required when called: 4
  2869 ;; This function calls:
  2870 ;;		Nothing
  2871 ;; This function is called by:
  2872 ;;		_mapeo
  2873 ;; This function uses a non-reentrant model
  2874 ;;
  2875                           
  2876                           
  2877                           ;psect for function ___awdiv
  2878  0519                     ___awdiv:
  2879  0519                     l2277:	
  2880                           ;incstack = 0
  2881                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2882                           
  2883  0519  1683               	bsf	3,5	;RP0=1, select bank1
  2884  051A  1303               	bcf	3,6	;RP1=0, select bank1
  2885  051B  01D2               	clrf	___awdiv@sign^(0+128)
  2886  051C                     l2279:
  2887  051C  1FCE               	btfss	(___awdiv@divisor+1)^(0+128),7
  2888  051D  2D1F               	goto	u1321
  2889  051E  2D20               	goto	u1320
  2890  051F                     u1321:
  2891  051F  2D27               	goto	l2285
  2892  0520                     u1320:
  2893  0520                     l2281:
  2894  0520  09CD               	comf	___awdiv@divisor^(0+128),f
  2895  0521  09CE               	comf	(___awdiv@divisor+1)^(0+128),f
  2896  0522  0ACD               	incf	___awdiv@divisor^(0+128),f
  2897  0523  1903               	skipnz
  2898  0524  0ACE               	incf	(___awdiv@divisor+1)^(0+128),f
  2899  0525                     l2283:
  2900  0525  01D2               	clrf	___awdiv@sign^(0+128)
  2901  0526  0AD2               	incf	___awdiv@sign^(0+128),f
  2902  0527                     l2285:
  2903  0527  1FD0               	btfss	(___awdiv@dividend+1)^(0+128),7
  2904  0528  2D2A               	goto	u1331
  2905  0529  2D2B               	goto	u1330
  2906  052A                     u1331:
  2907  052A  2D38               	goto	l2291
  2908  052B                     u1330:
  2909  052B                     l2287:
  2910  052B  09CF               	comf	___awdiv@dividend^(0+128),f
  2911  052C  09D0               	comf	(___awdiv@dividend+1)^(0+128),f
  2912  052D  0ACF               	incf	___awdiv@dividend^(0+128),f
  2913  052E  1903               	skipnz
  2914  052F  0AD0               	incf	(___awdiv@dividend+1)^(0+128),f
  2915  0530                     l2289:
  2916  0530  3001               	movlw	1
  2917  0531  1283               	bcf	3,5	;RP0=0, select bank0
  2918  0532  1303               	bcf	3,6	;RP1=0, select bank0
  2919  0533  00C2               	movwf	??___awdiv
  2920  0534  0842               	movf	??___awdiv,w
  2921  0535  1683               	bsf	3,5	;RP0=1, select bank1
  2922  0536  1303               	bcf	3,6	;RP1=0, select bank1
  2923  0537  06D2               	xorwf	___awdiv@sign^(0+128),f
  2924  0538                     l2291:
  2925  0538  01D3               	clrf	___awdiv@quotient^(0+128)
  2926  0539  01D4               	clrf	(___awdiv@quotient+1)^(0+128)
  2927  053A                     l2293:
  2928  053A  084D               	movf	___awdiv@divisor^(0+128),w
  2929  053B  044E               	iorwf	(___awdiv@divisor+1)^(0+128),w
  2930  053C  1903               	btfsc	3,2
  2931  053D  2D3F               	goto	u1341
  2932  053E  2D40               	goto	u1340
  2933  053F                     u1341:
  2934  053F  2D7B               	goto	l2313
  2935  0540                     u1340:
  2936  0540                     l2295:
  2937  0540  01D1               	clrf	___awdiv@counter^(0+128)
  2938  0541  0AD1               	incf	___awdiv@counter^(0+128),f
  2939  0542  2D52               	goto	l2301
  2940  0543                     l2297:
  2941  0543  3001               	movlw	1
  2942  0544                     u1355:
  2943  0544  1003               	clrc
  2944  0545  0DCD               	rlf	___awdiv@divisor^(0+128),f
  2945  0546  0DCE               	rlf	(___awdiv@divisor+1)^(0+128),f
  2946  0547  3EFF               	addlw	-1
  2947  0548  1D03               	skipz
  2948  0549  2D44               	goto	u1355
  2949  054A                     l2299:
  2950  054A  3001               	movlw	1
  2951  054B  1283               	bcf	3,5	;RP0=0, select bank0
  2952  054C  1303               	bcf	3,6	;RP1=0, select bank0
  2953  054D  00C2               	movwf	??___awdiv
  2954  054E  0842               	movf	??___awdiv,w
  2955  054F  1683               	bsf	3,5	;RP0=1, select bank1
  2956  0550  1303               	bcf	3,6	;RP1=0, select bank1
  2957  0551  07D1               	addwf	___awdiv@counter^(0+128),f
  2958  0552                     l2301:
  2959  0552  1FCE               	btfss	(___awdiv@divisor+1)^(0+128),7
  2960  0553  2D55               	goto	u1361
  2961  0554  2D56               	goto	u1360
  2962  0555                     u1361:
  2963  0555  2D43               	goto	l2297
  2964  0556                     u1360:
  2965  0556                     l2303:
  2966  0556  3001               	movlw	1
  2967  0557                     u1375:
  2968  0557  1003               	clrc
  2969  0558  0DD3               	rlf	___awdiv@quotient^(0+128),f
  2970  0559  0DD4               	rlf	(___awdiv@quotient+1)^(0+128),f
  2971  055A  3EFF               	addlw	-1
  2972  055B  1D03               	skipz
  2973  055C  2D57               	goto	u1375
  2974  055D  084E               	movf	(___awdiv@divisor+1)^(0+128),w
  2975  055E  0250               	subwf	(___awdiv@dividend+1)^(0+128),w
  2976  055F  1D03               	skipz
  2977  0560  2D63               	goto	u1385
  2978  0561  084D               	movf	___awdiv@divisor^(0+128),w
  2979  0562  024F               	subwf	___awdiv@dividend^(0+128),w
  2980  0563                     u1385:
  2981  0563  1C03               	skipc
  2982  0564  2D66               	goto	u1381
  2983  0565  2D67               	goto	u1380
  2984  0566                     u1381:
  2985  0566  2D6E               	goto	l2309
  2986  0567                     u1380:
  2987  0567                     l2305:
  2988  0567  084D               	movf	___awdiv@divisor^(0+128),w
  2989  0568  02CF               	subwf	___awdiv@dividend^(0+128),f
  2990  0569  084E               	movf	(___awdiv@divisor+1)^(0+128),w
  2991  056A  1C03               	skipc
  2992  056B  03D0               	decf	(___awdiv@dividend+1)^(0+128),f
  2993  056C  02D0               	subwf	(___awdiv@dividend+1)^(0+128),f
  2994  056D                     l2307:
  2995  056D  1453               	bsf	___awdiv@quotient^(0+128),0
  2996  056E                     l2309:
  2997  056E  3001               	movlw	1
  2998  056F                     u1395:
  2999  056F  1003               	clrc
  3000  0570  0CCE               	rrf	(___awdiv@divisor+1)^(0+128),f
  3001  0571  0CCD               	rrf	___awdiv@divisor^(0+128),f
  3002  0572  3EFF               	addlw	-1
  3003  0573  1D03               	skipz
  3004  0574  2D6F               	goto	u1395
  3005  0575                     l2311:
  3006  0575  3001               	movlw	1
  3007  0576  02D1               	subwf	___awdiv@counter^(0+128),f
  3008  0577  1D03               	btfss	3,2
  3009  0578  2D7A               	goto	u1401
  3010  0579  2D7B               	goto	u1400
  3011  057A                     u1401:
  3012  057A  2D56               	goto	l2303
  3013  057B                     u1400:
  3014  057B                     l2313:
  3015  057B  0852               	movf	___awdiv@sign^(0+128),w
  3016  057C  1903               	btfsc	3,2
  3017  057D  2D7F               	goto	u1411
  3018  057E  2D80               	goto	u1410
  3019  057F                     u1411:
  3020  057F  2D85               	goto	l2317
  3021  0580                     u1410:
  3022  0580                     l2315:
  3023  0580  09D3               	comf	___awdiv@quotient^(0+128),f
  3024  0581  09D4               	comf	(___awdiv@quotient+1)^(0+128),f
  3025  0582  0AD3               	incf	___awdiv@quotient^(0+128),f
  3026  0583  1903               	skipnz
  3027  0584  0AD4               	incf	(___awdiv@quotient+1)^(0+128),f
  3028  0585                     l2317:
  3029  0585  0854               	movf	(___awdiv@quotient+1)^(0+128),w
  3030  0586  00CE               	movwf	(?___awdiv+1)^(0+128)
  3031  0587  0853               	movf	___awdiv@quotient^(0+128),w
  3032  0588  00CD               	movwf	?___awdiv^(0+128)
  3033  0589                     l524:
  3034  0589  0008               	return
  3035  058A                     __end_of___awdiv:
  3036                           
  3037                           	psect	text15
  3038  049C                     __ptext15:	
  3039 ;; *************** function _division *****************
  3040 ;; Defined at:
  3041 ;;		line 144 in file "main.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;  value           2    6[BANK1 ] unsigned int 
  3044 ;;  centena         1    8[BANK1 ] PTR unsigned char 
  3045 ;;		 -> tem(3), bot(3), pot(3), 
  3046 ;;  decena          1    9[BANK1 ] PTR unsigned char 
  3047 ;;		 -> tem(3), bot(3), pot(3), 
  3048 ;;  unidad          1   10[BANK1 ] PTR unsigned char 
  3049 ;;		 -> tem(3), bot(3), pot(3), 
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;		None
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  1    wreg      void 
  3054 ;; Registers used:
  3055 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3061 ;;      Params:         0       0       5       0       0
  3062 ;;      Locals:         0       0       2       0       0
  3063 ;;      Temps:          0       0       1       0       0
  3064 ;;      Totals:         0       0       8       0       0
  3065 ;;Total ram usage:        8 bytes
  3066 ;; Hardware stack levels used: 1
  3067 ;; Hardware stack levels required when called: 5
  3068 ;; This function calls:
  3069 ;;		___lwdiv
  3070 ;;		___lwmod
  3071 ;; This function is called by:
  3072 ;;		_lcd_show
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           
  3077                           ;psect for function _division
  3078  049C                     _division:
  3079  049C                     l2369:	
  3080                           ;incstack = 0
  3081                           ; Regs used in _division: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3082                           
  3083                           
  3084                           ;main.c: 145:     *centena = value/100;
  3085  049C  3064               	movlw	100
  3086  049D  1283               	bcf	3,5	;RP0=0, select bank0
  3087  049E  1303               	bcf	3,6	;RP1=0, select bank0
  3088  049F  00BC               	movwf	___lwdiv@divisor
  3089  04A0  3000               	movlw	0
  3090  04A1  00BD               	movwf	___lwdiv@divisor+1
  3091  04A2  1683               	bsf	3,5	;RP0=1, select bank1
  3092  04A3  1303               	bcf	3,6	;RP1=0, select bank1
  3093  04A4  0854               	movf	(division@value+1)^(0+128),w
  3094  04A5  1283               	bcf	3,5	;RP0=0, select bank0
  3095  04A6  1303               	bcf	3,6	;RP1=0, select bank0
  3096  04A7  00BF               	movwf	___lwdiv@dividend+1
  3097  04A8  1683               	bsf	3,5	;RP0=1, select bank1
  3098  04A9  1303               	bcf	3,6	;RP1=0, select bank1
  3099  04AA  0853               	movf	division@value^(0+128),w
  3100  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  3101  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  3102  04AD  00BE               	movwf	___lwdiv@dividend
  3103  04AE  120A  118A  2691  120A  118A  	fcall	___lwdiv
  3104  04B3  1283               	bcf	3,5	;RP0=0, select bank0
  3105  04B4  1303               	bcf	3,6	;RP1=0, select bank0
  3106  04B5  083C               	movf	?___lwdiv,w
  3107  04B6  1683               	bsf	3,5	;RP0=1, select bank1
  3108  04B7  1303               	bcf	3,6	;RP1=0, select bank1
  3109  04B8  00D8               	movwf	??_division^(0+128)
  3110  04B9  0855               	movf	division@centena^(0+128),w
  3111  04BA  0084               	movwf	4
  3112  04BB  0858               	movf	??_division^(0+128),w
  3113  04BC  1383               	bcf	3,7	;select IRP bank0
  3114  04BD  0080               	movwf	0
  3115                           
  3116                           ;main.c: 146:     *decena = (value%100)/10;
  3117  04BE  300A               	movlw	10
  3118  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  3119  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  3120  04C1  00BC               	movwf	___lwdiv@divisor
  3121  04C2  3000               	movlw	0
  3122  04C3  00BD               	movwf	___lwdiv@divisor+1
  3123  04C4  1683               	bsf	3,5	;RP0=1, select bank1
  3124  04C5  1303               	bcf	3,6	;RP1=0, select bank1
  3125  04C6  0854               	movf	(division@value+1)^(0+128),w
  3126  04C7  00D0               	movwf	(___lwmod@dividend+1)^(0+128)
  3127  04C8  0853               	movf	division@value^(0+128),w
  3128  04C9  00CF               	movwf	___lwmod@dividend^(0+128)
  3129  04CA  3064               	movlw	100
  3130  04CB  00CD               	movwf	___lwmod@divisor^(0+128)
  3131  04CC  3000               	movlw	0
  3132  04CD  00CE               	movwf	(___lwmod@divisor^(0+128)+1)
  3133  04CE  120A  118A  271B  120A  118A  	fcall	___lwmod
  3134  04D3  1683               	bsf	3,5	;RP0=1, select bank1
  3135  04D4  1303               	bcf	3,6	;RP1=0, select bank1
  3136  04D5  084E               	movf	(?___lwmod+1)^(0+128),w
  3137  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  3138  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  3139  04D8  00BF               	movwf	___lwdiv@dividend+1
  3140  04D9  1683               	bsf	3,5	;RP0=1, select bank1
  3141  04DA  1303               	bcf	3,6	;RP1=0, select bank1
  3142  04DB  084D               	movf	?___lwmod^(0+128),w
  3143  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  3144  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  3145  04DE  00BE               	movwf	___lwdiv@dividend
  3146  04DF  120A  118A  2691  120A  118A  	fcall	___lwdiv
  3147  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  3148  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  3149  04E6  083C               	movf	?___lwdiv,w
  3150  04E7  1683               	bsf	3,5	;RP0=1, select bank1
  3151  04E8  1303               	bcf	3,6	;RP1=0, select bank1
  3152  04E9  00D8               	movwf	??_division^(0+128)
  3153  04EA  0856               	movf	division@decena^(0+128),w
  3154  04EB  0084               	movwf	4
  3155  04EC  0858               	movf	??_division^(0+128),w
  3156  04ED  1383               	bcf	3,7	;select IRP bank0
  3157  04EE  0080               	movwf	0
  3158  04EF                     l2371:
  3159                           
  3160                           ;main.c: 147:     *unidad = (value%100)%10;
  3161  04EF  0854               	movf	(division@value+1)^(0+128),w
  3162  04F0  00D0               	movwf	(___lwmod@dividend+1)^(0+128)
  3163  04F1  0853               	movf	division@value^(0+128),w
  3164  04F2  00CF               	movwf	___lwmod@dividend^(0+128)
  3165  04F3  3064               	movlw	100
  3166  04F4  00CD               	movwf	___lwmod@divisor^(0+128)
  3167  04F5  3000               	movlw	0
  3168  04F6  00CE               	movwf	(___lwmod@divisor^(0+128)+1)
  3169  04F7  120A  118A  271B  120A  118A  	fcall	___lwmod
  3170  04FC  1683               	bsf	3,5	;RP0=1, select bank1
  3171  04FD  1303               	bcf	3,6	;RP1=0, select bank1
  3172  04FE  084E               	movf	(?___lwmod+1)^(0+128),w
  3173  04FF  00DA               	movwf	(_division$1331+1)^(0+128)
  3174  0500  084D               	movf	?___lwmod^(0+128),w
  3175  0501  00D9               	movwf	_division$1331^(0+128)
  3176  0502                     l2373:
  3177                           
  3178                           ;main.c: 147:     *unidad = (value%100)%10;
  3179  0502  300A               	movlw	10
  3180  0503  00CD               	movwf	___lwmod@divisor^(0+128)
  3181  0504  3000               	movlw	0
  3182  0505  00CE               	movwf	(___lwmod@divisor^(0+128)+1)
  3183  0506  085A               	movf	(_division$1331+1)^(0+128),w
  3184  0507  00D0               	movwf	(___lwmod@dividend+1)^(0+128)
  3185  0508  0859               	movf	_division$1331^(0+128),w
  3186  0509  00CF               	movwf	___lwmod@dividend^(0+128)
  3187  050A  120A  118A  271B  120A  118A  	fcall	___lwmod
  3188  050F  1683               	bsf	3,5	;RP0=1, select bank1
  3189  0510  1303               	bcf	3,6	;RP1=0, select bank1
  3190  0511  084D               	movf	?___lwmod^(0+128),w
  3191  0512  00D8               	movwf	??_division^(0+128)
  3192  0513  0857               	movf	division@unidad^(0+128),w
  3193  0514  0084               	movwf	4
  3194  0515  0858               	movf	??_division^(0+128),w
  3195  0516  1383               	bcf	3,7	;select IRP bank0
  3196  0517  0080               	movwf	0
  3197  0518                     l139:
  3198  0518  0008               	return
  3199  0519                     __end_of_division:
  3200                           
  3201                           	psect	text16
  3202  071B                     __ptext16:	
  3203 ;; *************** function ___lwmod *****************
  3204 ;; Defined at:
  3205 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;  divisor         2    0[BANK1 ] unsigned int 
  3208 ;;  dividend        2    2[BANK1 ] unsigned int 
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;  counter         1    5[BANK1 ] unsigned char 
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  2    0[BANK1 ] unsigned int 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, status,0
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3220 ;;      Params:         0       0       4       0       0
  3221 ;;      Locals:         0       0       1       0       0
  3222 ;;      Temps:          0       0       1       0       0
  3223 ;;      Totals:         0       0       6       0       0
  3224 ;;Total ram usage:        6 bytes
  3225 ;; Hardware stack levels used: 1
  3226 ;; Hardware stack levels required when called: 4
  3227 ;; This function calls:
  3228 ;;		Nothing
  3229 ;; This function is called by:
  3230 ;;		_division
  3231 ;;		_sprintf
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           
  3236                           ;psect for function ___lwmod
  3237  071B                     ___lwmod:
  3238  071B                     l2347:	
  3239                           ;incstack = 0
  3240                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3241                           
  3242  071B  1683               	bsf	3,5	;RP0=1, select bank1
  3243  071C  1303               	bcf	3,6	;RP1=0, select bank1
  3244  071D  084D               	movf	___lwmod@divisor^(0+128),w
  3245  071E  044E               	iorwf	(___lwmod@divisor+1)^(0+128),w
  3246  071F  1903               	btfsc	3,2
  3247  0720  2F22               	goto	u1491
  3248  0721  2F23               	goto	u1490
  3249  0722                     u1491:
  3250  0722  2F52               	goto	l2365
  3251  0723                     u1490:
  3252  0723                     l2349:
  3253  0723  01D2               	clrf	___lwmod@counter^(0+128)
  3254  0724  0AD2               	incf	___lwmod@counter^(0+128),f
  3255  0725  2F31               	goto	l2355
  3256  0726                     l2351:
  3257  0726  3001               	movlw	1
  3258  0727                     u1505:
  3259  0727  1003               	clrc
  3260  0728  0DCD               	rlf	___lwmod@divisor^(0+128),f
  3261  0729  0DCE               	rlf	(___lwmod@divisor+1)^(0+128),f
  3262  072A  3EFF               	addlw	-1
  3263  072B  1D03               	skipz
  3264  072C  2F27               	goto	u1505
  3265  072D                     l2353:
  3266  072D  3001               	movlw	1
  3267  072E  00D1               	movwf	??___lwmod^(0+128)
  3268  072F  0851               	movf	??___lwmod^(0+128),w
  3269  0730  07D2               	addwf	___lwmod@counter^(0+128),f
  3270  0731                     l2355:
  3271  0731  1FCE               	btfss	(___lwmod@divisor+1)^(0+128),7
  3272  0732  2F34               	goto	u1511
  3273  0733  2F35               	goto	u1510
  3274  0734                     u1511:
  3275  0734  2F26               	goto	l2351
  3276  0735                     u1510:
  3277  0735                     l2357:
  3278  0735  084E               	movf	(___lwmod@divisor+1)^(0+128),w
  3279  0736  0250               	subwf	(___lwmod@dividend+1)^(0+128),w
  3280  0737  1D03               	skipz
  3281  0738  2F3B               	goto	u1525
  3282  0739  084D               	movf	___lwmod@divisor^(0+128),w
  3283  073A  024F               	subwf	___lwmod@dividend^(0+128),w
  3284  073B                     u1525:
  3285  073B  1C03               	skipc
  3286  073C  2F3E               	goto	u1521
  3287  073D  2F3F               	goto	u1520
  3288  073E                     u1521:
  3289  073E  2F45               	goto	l2361
  3290  073F                     u1520:
  3291  073F                     l2359:
  3292  073F  084D               	movf	___lwmod@divisor^(0+128),w
  3293  0740  02CF               	subwf	___lwmod@dividend^(0+128),f
  3294  0741  084E               	movf	(___lwmod@divisor+1)^(0+128),w
  3295  0742  1C03               	skipc
  3296  0743  03D0               	decf	(___lwmod@dividend+1)^(0+128),f
  3297  0744  02D0               	subwf	(___lwmod@dividend+1)^(0+128),f
  3298  0745                     l2361:
  3299  0745  3001               	movlw	1
  3300  0746                     u1535:
  3301  0746  1003               	clrc
  3302  0747  0CCE               	rrf	(___lwmod@divisor+1)^(0+128),f
  3303  0748  0CCD               	rrf	___lwmod@divisor^(0+128),f
  3304  0749  3EFF               	addlw	-1
  3305  074A  1D03               	skipz
  3306  074B  2F46               	goto	u1535
  3307  074C                     l2363:
  3308  074C  3001               	movlw	1
  3309  074D  02D2               	subwf	___lwmod@counter^(0+128),f
  3310  074E  1D03               	btfss	3,2
  3311  074F  2F51               	goto	u1541
  3312  0750  2F52               	goto	u1540
  3313  0751                     u1541:
  3314  0751  2F35               	goto	l2357
  3315  0752                     u1540:
  3316  0752                     l2365:
  3317  0752  0850               	movf	(___lwmod@dividend+1)^(0+128),w
  3318  0753  00CE               	movwf	(?___lwmod+1)^(0+128)
  3319  0754  084F               	movf	___lwmod@dividend^(0+128),w
  3320  0755  00CD               	movwf	?___lwmod^(0+128)
  3321  0756                     l653:
  3322  0756  0008               	return
  3323  0757                     __end_of___lwmod:
  3324                           
  3325                           	psect	text17
  3326  0691                     __ptext17:	
  3327 ;; *************** function ___lwdiv *****************
  3328 ;; Defined at:
  3329 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;  divisor         2   28[BANK0 ] unsigned int 
  3332 ;;  dividend        2   30[BANK0 ] unsigned int 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  quotient        2   34[BANK0 ] unsigned int 
  3335 ;;  counter         1   33[BANK0 ] unsigned char 
  3336 ;; Return value:  Size  Location     Type
  3337 ;;                  2   28[BANK0 ] unsigned int 
  3338 ;; Registers used:
  3339 ;;		wreg, status,2, status,0
  3340 ;; Tracked objects:
  3341 ;;		On entry : 0/0
  3342 ;;		On exit  : 0/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3345 ;;      Params:         0       4       0       0       0
  3346 ;;      Locals:         0       3       0       0       0
  3347 ;;      Temps:          0       1       0       0       0
  3348 ;;      Totals:         0       8       0       0       0
  3349 ;;Total ram usage:        8 bytes
  3350 ;; Hardware stack levels used: 1
  3351 ;; Hardware stack levels required when called: 4
  3352 ;; This function calls:
  3353 ;;		Nothing
  3354 ;; This function is called by:
  3355 ;;		_division
  3356 ;;		_sprintf
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           
  3361                           ;psect for function ___lwdiv
  3362  0691                     ___lwdiv:
  3363  0691                     l2321:	
  3364                           ;incstack = 0
  3365                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3366                           
  3367  0691  1283               	bcf	3,5	;RP0=0, select bank0
  3368  0692  1303               	bcf	3,6	;RP1=0, select bank0
  3369  0693  01C2               	clrf	___lwdiv@quotient
  3370  0694  01C3               	clrf	___lwdiv@quotient+1
  3371  0695                     l2323:
  3372  0695  083C               	movf	___lwdiv@divisor,w
  3373  0696  043D               	iorwf	___lwdiv@divisor+1,w
  3374  0697  1903               	btfsc	3,2
  3375  0698  2E9A               	goto	u1421
  3376  0699  2E9B               	goto	u1420
  3377  069A                     u1421:
  3378  069A  2ED2               	goto	l2343
  3379  069B                     u1420:
  3380  069B                     l2325:
  3381  069B  01C1               	clrf	___lwdiv@counter
  3382  069C  0AC1               	incf	___lwdiv@counter,f
  3383  069D  2EA9               	goto	l2331
  3384  069E                     l2327:
  3385  069E  3001               	movlw	1
  3386  069F                     u1435:
  3387  069F  1003               	clrc
  3388  06A0  0DBC               	rlf	___lwdiv@divisor,f
  3389  06A1  0DBD               	rlf	___lwdiv@divisor+1,f
  3390  06A2  3EFF               	addlw	-1
  3391  06A3  1D03               	skipz
  3392  06A4  2E9F               	goto	u1435
  3393  06A5                     l2329:
  3394  06A5  3001               	movlw	1
  3395  06A6  00C0               	movwf	??___lwdiv
  3396  06A7  0840               	movf	??___lwdiv,w
  3397  06A8  07C1               	addwf	___lwdiv@counter,f
  3398  06A9                     l2331:
  3399  06A9  1FBD               	btfss	___lwdiv@divisor+1,7
  3400  06AA  2EAC               	goto	u1441
  3401  06AB  2EAD               	goto	u1440
  3402  06AC                     u1441:
  3403  06AC  2E9E               	goto	l2327
  3404  06AD                     u1440:
  3405  06AD                     l2333:
  3406  06AD  3001               	movlw	1
  3407  06AE                     u1455:
  3408  06AE  1003               	clrc
  3409  06AF  0DC2               	rlf	___lwdiv@quotient,f
  3410  06B0  0DC3               	rlf	___lwdiv@quotient+1,f
  3411  06B1  3EFF               	addlw	-1
  3412  06B2  1D03               	skipz
  3413  06B3  2EAE               	goto	u1455
  3414  06B4  083D               	movf	___lwdiv@divisor+1,w
  3415  06B5  023F               	subwf	___lwdiv@dividend+1,w
  3416  06B6  1D03               	skipz
  3417  06B7  2EBA               	goto	u1465
  3418  06B8  083C               	movf	___lwdiv@divisor,w
  3419  06B9  023E               	subwf	___lwdiv@dividend,w
  3420  06BA                     u1465:
  3421  06BA  1C03               	skipc
  3422  06BB  2EBD               	goto	u1461
  3423  06BC  2EBE               	goto	u1460
  3424  06BD                     u1461:
  3425  06BD  2EC5               	goto	l2339
  3426  06BE                     u1460:
  3427  06BE                     l2335:
  3428  06BE  083C               	movf	___lwdiv@divisor,w
  3429  06BF  02BE               	subwf	___lwdiv@dividend,f
  3430  06C0  083D               	movf	___lwdiv@divisor+1,w
  3431  06C1  1C03               	skipc
  3432  06C2  03BF               	decf	___lwdiv@dividend+1,f
  3433  06C3  02BF               	subwf	___lwdiv@dividend+1,f
  3434  06C4                     l2337:
  3435  06C4  1442               	bsf	___lwdiv@quotient,0
  3436  06C5                     l2339:
  3437  06C5  3001               	movlw	1
  3438  06C6                     u1475:
  3439  06C6  1003               	clrc
  3440  06C7  0CBD               	rrf	___lwdiv@divisor+1,f
  3441  06C8  0CBC               	rrf	___lwdiv@divisor,f
  3442  06C9  3EFF               	addlw	-1
  3443  06CA  1D03               	skipz
  3444  06CB  2EC6               	goto	u1475
  3445  06CC                     l2341:
  3446  06CC  3001               	movlw	1
  3447  06CD  02C1               	subwf	___lwdiv@counter,f
  3448  06CE  1D03               	btfss	3,2
  3449  06CF  2ED1               	goto	u1481
  3450  06D0  2ED2               	goto	u1480
  3451  06D1                     u1481:
  3452  06D1  2EAD               	goto	l2333
  3453  06D2                     u1480:
  3454  06D2                     l2343:
  3455  06D2  0843               	movf	___lwdiv@quotient+1,w
  3456  06D3  00BD               	movwf	?___lwdiv+1
  3457  06D4  0842               	movf	___lwdiv@quotient,w
  3458  06D5  00BC               	movwf	?___lwdiv
  3459  06D6                     l643:
  3460  06D6  0008               	return
  3461  06D7                     __end_of___lwdiv:
  3462                           
  3463                           	psect	text18
  3464  063D                     __ptext18:	
  3465 ;; *************** function _LCD_writeString *****************
  3466 ;; Defined at:
  3467 ;;		line 86 in file "lcd_8bitsA.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;  text            2   31[BANK0 ] PTR unsigned char 
  3470 ;;		 -> STR_7(15), buffer(45), 
  3471 ;; Auto vars:     Size  Location     Type
  3472 ;;  i               2    0[BANK1 ] int 
  3473 ;; Return value:  Size  Location     Type
  3474 ;;                  1    wreg      void 
  3475 ;; Registers used:
  3476 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3477 ;; Tracked objects:
  3478 ;;		On entry : 0/0
  3479 ;;		On exit  : 0/0
  3480 ;;		Unchanged: 0/0
  3481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3482 ;;      Params:         0       2       0       0       0
  3483 ;;      Locals:         0       0       2       0       0
  3484 ;;      Temps:          0       3       0       0       0
  3485 ;;      Totals:         0       5       2       0       0
  3486 ;;Total ram usage:        7 bytes
  3487 ;; Hardware stack levels used: 1
  3488 ;; Hardware stack levels required when called: 6
  3489 ;; This function calls:
  3490 ;;		_LCD_write
  3491 ;; This function is called by:
  3492 ;;		_lcd_show
  3493 ;;		_config_lcd
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           
  3498                           ;psect for function _LCD_writeString
  3499  063D                     _LCD_writeString:
  3500  063D                     l2229:	
  3501                           ;incstack = 0
  3502 ;; hardware stack exceeded
  3503                           ; Regs used in _LCD_writeString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3504                           
  3505                           
  3506                           ;lcd_8bitsA.c: 87:     int i;;lcd_8bitsA.c: 88:     for (i = 0; text[i] != '\0'; i++){
  3507  063D  1683               	bsf	3,5	;RP0=1, select bank1
  3508  063E  1303               	bcf	3,6	;RP1=0, select bank1
  3509  063F  01CD               	clrf	LCD_writeString@i^(0+128)
  3510  0640  01CE               	clrf	(LCD_writeString@i+1)^(0+128)
  3511  0641  2E6E               	goto	l2235
  3512  0642                     l2231:
  3513                           
  3514                           ;lcd_8bitsA.c: 89:         LCD_write(text[i]);
  3515  0642  1683               	bsf	3,5	;RP0=1, select bank1
  3516  0643  1303               	bcf	3,6	;RP1=0, select bank1
  3517  0644  084D               	movf	LCD_writeString@i^(0+128),w
  3518  0645  1283               	bcf	3,5	;RP0=0, select bank0
  3519  0646  1303               	bcf	3,6	;RP1=0, select bank0
  3520  0647  073F               	addwf	LCD_writeString@text,w
  3521  0648  00C2               	movwf	??_LCD_writeString+1
  3522  0649  0840               	movf	LCD_writeString@text+1,w
  3523  064A  00C1               	movwf	??_LCD_writeString
  3524  064B  1803               	skipnc
  3525  064C  0AC1               	incf	??_LCD_writeString,f
  3526  064D  1683               	bsf	3,5	;RP0=1, select bank1
  3527  064E  1303               	bcf	3,6	;RP1=0, select bank1
  3528  064F  1FCD               	btfss	LCD_writeString@i^(0+128),7
  3529  0650  2E54               	goto	u1250
  3530  0651  1283               	bcf	3,5	;RP0=0, select bank0
  3531  0652  1303               	bcf	3,6	;RP1=0, select bank0
  3532  0653  03C1               	decf	??_LCD_writeString,f
  3533  0654                     u1250:
  3534  0654  1283               	bcf	3,5	;RP0=0, select bank0
  3535  0655  1303               	bcf	3,6	;RP1=0, select bank0
  3536  0656  0841               	movf	??_LCD_writeString,w
  3537  0657  00C3               	movwf	??_LCD_writeString+2
  3538  0658  0843               	movf	??_LCD_writeString+2,w
  3539  0659  00FF               	movwf	btemp+1
  3540  065A  0842               	movf	??_LCD_writeString+1,w
  3541  065B  0084               	movwf	4
  3542  065C  120A  118A  258A  120A  118A  	fcall	stringtab
  3543  0661  120A  158A  26D1  120A  118A  	fcall	_LCD_write
  3544  0666                     l2233:
  3545                           
  3546                           ;lcd_8bitsA.c: 90:     }
  3547  0666  3001               	movlw	1
  3548  0667  1683               	bsf	3,5	;RP0=1, select bank1
  3549  0668  1303               	bcf	3,6	;RP1=0, select bank1
  3550  0669  07CD               	addwf	LCD_writeString@i^(0+128),f
  3551  066A  1803               	skipnc
  3552  066B  0ACE               	incf	(LCD_writeString@i+1)^(0+128),f
  3553  066C  3000               	movlw	0
  3554  066D  07CE               	addwf	(LCD_writeString@i+1)^(0+128),f
  3555  066E                     l2235:
  3556  066E  084D               	movf	LCD_writeString@i^(0+128),w
  3557  066F  1283               	bcf	3,5	;RP0=0, select bank0
  3558  0670  1303               	bcf	3,6	;RP1=0, select bank0
  3559  0671  073F               	addwf	LCD_writeString@text,w
  3560  0672  00C2               	movwf	??_LCD_writeString+1
  3561  0673  0840               	movf	LCD_writeString@text+1,w
  3562  0674  00C1               	movwf	??_LCD_writeString
  3563  0675  1803               	skipnc
  3564  0676  0AC1               	incf	??_LCD_writeString,f
  3565  0677  1683               	bsf	3,5	;RP0=1, select bank1
  3566  0678  1303               	bcf	3,6	;RP1=0, select bank1
  3567  0679  1FCD               	btfss	LCD_writeString@i^(0+128),7
  3568  067A  2E7E               	goto	u1260
  3569  067B  1283               	bcf	3,5	;RP0=0, select bank0
  3570  067C  1303               	bcf	3,6	;RP1=0, select bank0
  3571  067D  03C1               	decf	??_LCD_writeString,f
  3572  067E                     u1260:
  3573  067E  1283               	bcf	3,5	;RP0=0, select bank0
  3574  067F  1303               	bcf	3,6	;RP1=0, select bank0
  3575  0680  0841               	movf	??_LCD_writeString,w
  3576  0681  00C3               	movwf	??_LCD_writeString+2
  3577  0682  0843               	movf	??_LCD_writeString+2,w
  3578  0683  00FF               	movwf	btemp+1
  3579  0684  0842               	movf	??_LCD_writeString+1,w
  3580  0685  0084               	movwf	4
  3581  0686  120A  118A  258A  120A  118A  	fcall	stringtab
  3582  068B  3A00               	xorlw	0
  3583  068C  1D03               	skipz
  3584  068D  2E8F               	goto	u1271
  3585  068E  2E90               	goto	u1270
  3586  068F                     u1271:
  3587  068F  2E42               	goto	l2231
  3588  0690                     u1270:
  3589  0690                     l222:
  3590  0690  0008               	return
  3591  0691                     __end_of_LCD_writeString:
  3592                           
  3593                           	psect	text19
  3594  0ED1                     __ptext19:	
  3595 ;; *************** function _LCD_write *****************
  3596 ;; Defined at:
  3597 ;;		line 77 in file "lcd_8bitsA.c"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;  value           1    wreg     unsigned char 
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;  value           1   30[BANK0 ] unsigned char 
  3602 ;; Return value:  Size  Location     Type
  3603 ;;                  1    wreg      void 
  3604 ;; Registers used:
  3605 ;;		wreg, status,2, status,0, pclath, cstack
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3611 ;;      Params:         0       0       0       0       0
  3612 ;;      Locals:         0       1       0       0       0
  3613 ;;      Temps:          0       0       0       0       0
  3614 ;;      Totals:         0       1       0       0       0
  3615 ;;Total ram usage:        1 bytes
  3616 ;; Hardware stack levels used: 1
  3617 ;; Hardware stack levels required when called: 5
  3618 ;; This function calls:
  3619 ;;		_flip_EN
  3620 ;; This function is called by:
  3621 ;;		_LCD_writeString
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625                           
  3626                           ;psect for function _LCD_write
  3627  0ED1                     _LCD_write:
  3628                           
  3629                           ;incstack = 0
  3630 ;; hardware stack exceeded
  3631                           ; Regs used in _LCD_write: [wreg+status,2+status,0+pclath+cstack]
  3632                           ;LCD_write@value stored from wreg
  3633  0ED1  1283               	bcf	3,5	;RP0=0, select bank0
  3634  0ED2  1303               	bcf	3,6	;RP1=0, select bank0
  3635  0ED3  00BE               	movwf	LCD_write@value
  3636  0ED4                     l2201:
  3637                           
  3638                           ;lcd_8bitsA.c: 78:     RB7 = 1;
  3639  0ED4  1786               	bsf	6,7	;volatile
  3640  0ED5                     l2203:
  3641                           
  3642                           ;lcd_8bitsA.c: 79:     PORTA = value;
  3643  0ED5  083E               	movf	LCD_write@value,w
  3644  0ED6  0085               	movwf	5	;volatile
  3645  0ED7                     l2205:
  3646                           
  3647                           ;lcd_8bitsA.c: 80:     flip_EN();
  3648  0ED7  120A  158A  26F1  120A  158A  	fcall	_flip_EN
  3649  0EDC                     l2207:
  3650                           
  3651                           ;lcd_8bitsA.c: 81:     RB7 = 0;
  3652  0EDC  1283               	bcf	3,5	;RP0=0, select bank0
  3653  0EDD  1303               	bcf	3,6	;RP1=0, select bank0
  3654  0EDE  1386               	bcf	6,7	;volatile
  3655  0EDF                     l216:
  3656  0EDF  0008               	return
  3657  0EE0                     __end_of_LCD_write:
  3658                           
  3659                           	psect	text20
  3660  07CC                     __ptext20:	
  3661 ;; *************** function _LCD_setCursor *****************
  3662 ;; Defined at:
  3663 ;;		line 58 in file "lcd_8bitsA.c"
  3664 ;; Parameters:    Size  Location     Type
  3665 ;;  fila            1    wreg     unsigned char 
  3666 ;;  columna         1   31[BANK0 ] unsigned char 
  3667 ;; Auto vars:     Size  Location     Type
  3668 ;;  fila            1   34[BANK0 ] unsigned char 
  3669 ;; Return value:  Size  Location     Type
  3670 ;;                  1    wreg      void 
  3671 ;; Registers used:
  3672 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3673 ;; Tracked objects:
  3674 ;;		On entry : 0/0
  3675 ;;		On exit  : 0/0
  3676 ;;		Unchanged: 0/0
  3677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3678 ;;      Params:         0       1       0       0       0
  3679 ;;      Locals:         0       1       0       0       0
  3680 ;;      Temps:          0       2       0       0       0
  3681 ;;      Totals:         0       4       0       0       0
  3682 ;;Total ram usage:        4 bytes
  3683 ;; Hardware stack levels used: 1
  3684 ;; Hardware stack levels required when called: 6
  3685 ;; This function calls:
  3686 ;;		_LCD_CMD
  3687 ;; This function is called by:
  3688 ;;		_lcd_show
  3689 ;;		_config_lcd
  3690 ;; This function uses a non-reentrant model
  3691 ;;
  3692                           
  3693                           
  3694                           ;psect for function _LCD_setCursor
  3695  07CC                     _LCD_setCursor:
  3696                           
  3697                           ;incstack = 0
  3698 ;; hardware stack exceeded
  3699                           ; Regs used in _LCD_setCursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3700                           ;LCD_setCursor@fila stored from wreg
  3701  07CC  1283               	bcf	3,5	;RP0=0, select bank0
  3702  07CD  1303               	bcf	3,6	;RP1=0, select bank0
  3703  07CE  00C2               	movwf	LCD_setCursor@fila
  3704  07CF                     l2211:
  3705                           
  3706                           ;lcd_8bitsA.c: 59:     switch (fila){
  3707  07CF  2FEE               	goto	l2221
  3708  07D0                     l2213:
  3709                           
  3710                           ;lcd_8bitsA.c: 62:             LCD_CMD(((columna & 0x0F)-1) | 0x80);
  3711  07D0  083F               	movf	LCD_setCursor@columna,w
  3712  07D1  390F               	andlw	15
  3713  07D2  3EFF               	addlw	255
  3714  07D3  3880               	iorlw	128
  3715  07D4  120A  158A  26B7  120A  118A  	fcall	_LCD_CMD
  3716                           
  3717                           ;lcd_8bitsA.c: 63:             break;
  3718  07D9  2FFE               	goto	l213
  3719  07DA                     l2215:
  3720                           
  3721                           ;lcd_8bitsA.c: 67:             LCD_CMD(((columna & 0x0F)-1) | 0xC0);
  3722  07DA  083F               	movf	LCD_setCursor@columna,w
  3723  07DB  390F               	andlw	15
  3724  07DC  3EFF               	addlw	255
  3725  07DD  38C0               	iorlw	192
  3726  07DE  120A  158A  26B7  120A  118A  	fcall	_LCD_CMD
  3727                           
  3728                           ;lcd_8bitsA.c: 68:             break;
  3729  07E3  2FFE               	goto	l213
  3730  07E4                     l2217:
  3731                           
  3732                           ;lcd_8bitsA.c: 71:             LCD_CMD(((columna & 0x0F)-1) | 0x80);
  3733  07E4  083F               	movf	LCD_setCursor@columna,w
  3734  07E5  390F               	andlw	15
  3735  07E6  3EFF               	addlw	255
  3736  07E7  3880               	iorlw	128
  3737  07E8  120A  158A  26B7  120A  118A  	fcall	_LCD_CMD
  3738                           
  3739                           ;lcd_8bitsA.c: 72:             break;
  3740  07ED  2FFE               	goto	l213
  3741  07EE                     l2221:
  3742  07EE  0842               	movf	LCD_setCursor@fila,w
  3743  07EF  00C0               	movwf	??_LCD_setCursor
  3744  07F0  01C1               	clrf	??_LCD_setCursor+1
  3745                           
  3746                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3747                           ; Switch size 1, requested type "simple"
  3748                           ; Number of cases is 1, Range of values is 0 to 0
  3749                           ; switch strategies available:
  3750                           ; Name         Instructions Cycles
  3751                           ; simple_byte            4     3 (average)
  3752                           ; direct_byte           11     8 (fixed)
  3753                           ; jumptable            260     6 (fixed)
  3754                           ;	Chosen strategy is simple_byte
  3755  07F1  0841               	movf	??_LCD_setCursor+1,w
  3756  07F2  3A00               	xorlw	0	; case 0
  3757  07F3  1903               	skipnz
  3758  07F4  2FF6               	goto	l2583
  3759  07F5  2FE4               	goto	l2217
  3760  07F6                     l2583:
  3761                           
  3762                           ; Switch size 1, requested type "simple"
  3763                           ; Number of cases is 2, Range of values is 1 to 2
  3764                           ; switch strategies available:
  3765                           ; Name         Instructions Cycles
  3766                           ; simple_byte            7     4 (average)
  3767                           ; direct_byte           17    11 (fixed)
  3768                           ; jumptable            263     9 (fixed)
  3769                           ;	Chosen strategy is simple_byte
  3770  07F6  0840               	movf	??_LCD_setCursor,w
  3771  07F7  3A01               	xorlw	1	; case 1
  3772  07F8  1903               	skipnz
  3773  07F9  2FD0               	goto	l2213
  3774  07FA  3A03               	xorlw	3	; case 2
  3775  07FB  1903               	skipnz
  3776  07FC  2FDA               	goto	l2215
  3777  07FD  2FE4               	goto	l2217
  3778  07FE                     l213:
  3779  07FE  0008               	return
  3780  07FF                     __end_of_LCD_setCursor:
  3781                           
  3782                           	psect	text21
  3783  0EB7                     __ptext21:	
  3784 ;; *************** function _LCD_CMD *****************
  3785 ;; Defined at:
  3786 ;;		line 12 in file "lcd_8bitsA.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  cmd             1    wreg     unsigned char 
  3789 ;; Auto vars:     Size  Location     Type
  3790 ;;  cmd             1   30[BANK0 ] unsigned char 
  3791 ;; Return value:  Size  Location     Type
  3792 ;;                  1    wreg      void 
  3793 ;; Registers used:
  3794 ;;		wreg, status,2, status,0, pclath, cstack
  3795 ;; Tracked objects:
  3796 ;;		On entry : 0/0
  3797 ;;		On exit  : 0/0
  3798 ;;		Unchanged: 0/0
  3799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3800 ;;      Params:         0       0       0       0       0
  3801 ;;      Locals:         0       1       0       0       0
  3802 ;;      Temps:          0       0       0       0       0
  3803 ;;      Totals:         0       1       0       0       0
  3804 ;;Total ram usage:        1 bytes
  3805 ;; Hardware stack levels used: 1
  3806 ;; Hardware stack levels required when called: 5
  3807 ;; This function calls:
  3808 ;;		_flip_EN
  3809 ;; This function is called by:
  3810 ;;		_LCD_START
  3811 ;;		_LCD_setCursor
  3812 ;;		_LCD_CLR
  3813 ;;		_LCD_shiftR
  3814 ;;		_LCD_shiftL
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818                           
  3819                           ;psect for function _LCD_CMD
  3820  0EB7                     _LCD_CMD:
  3821                           
  3822                           ;incstack = 0
  3823 ;; hardware stack exceeded
  3824                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  3825                           ;LCD_CMD@cmd stored from wreg
  3826  0EB7  1283               	bcf	3,5	;RP0=0, select bank0
  3827  0EB8  1303               	bcf	3,6	;RP1=0, select bank0
  3828  0EB9  00BE               	movwf	LCD_CMD@cmd
  3829  0EBA                     l2193:
  3830                           
  3831                           ;lcd_8bitsA.c: 13:     RB7 = 0;
  3832  0EBA  1386               	bcf	6,7	;volatile
  3833  0EBB                     l2195:
  3834                           
  3835                           ;lcd_8bitsA.c: 14:     PORTA = cmd;
  3836  0EBB  083E               	movf	LCD_CMD@cmd,w
  3837  0EBC  0085               	movwf	5	;volatile
  3838  0EBD                     l2197:
  3839                           
  3840                           ;lcd_8bitsA.c: 15:     flip_EN ();
  3841  0EBD  120A  158A  26F1  120A  158A  	fcall	_flip_EN
  3842  0EC2                     l199:
  3843  0EC2  0008               	return
  3844  0EC3                     __end_of_LCD_CMD:
  3845                           
  3846                           	psect	text22
  3847  0EF1                     __ptext22:	
  3848 ;; *************** function _flip_EN *****************
  3849 ;; Defined at:
  3850 ;;		line 5 in file "lcd_8bitsA.c"
  3851 ;; Parameters:    Size  Location     Type
  3852 ;;		None
  3853 ;; Auto vars:     Size  Location     Type
  3854 ;;		None
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  1    wreg      void 
  3857 ;; Registers used:
  3858 ;;		wreg
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3864 ;;      Params:         0       0       0       0       0
  3865 ;;      Locals:         0       0       0       0       0
  3866 ;;      Temps:          0       2       0       0       0
  3867 ;;      Totals:         0       2       0       0       0
  3868 ;;Total ram usage:        2 bytes
  3869 ;; Hardware stack levels used: 1
  3870 ;; Hardware stack levels required when called: 4
  3871 ;; This function calls:
  3872 ;;		Nothing
  3873 ;; This function is called by:
  3874 ;;		_LCD_CMD
  3875 ;;		_LCD_write
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           
  3880                           ;psect for function _flip_EN
  3881  0EF1                     _flip_EN:
  3882  0EF1                     l2187:	
  3883                           ;incstack = 0
  3884 ;; hardware stack exceeded
  3885                           ; Regs used in _flip_EN: [wreg]
  3886                           
  3887                           
  3888                           ;lcd_8bitsA.c: 6:     RD0 = 1;
  3889  0EF1  1283               	bcf	3,5	;RP0=0, select bank0
  3890  0EF2  1303               	bcf	3,6	;RP1=0, select bank0
  3891  0EF3  1408               	bsf	8,0	;volatile
  3892  0EF4                     l2189:
  3893                           
  3894                           ;lcd_8bitsA.c: 7:     _delay((unsigned long)((5)*(4000000/4000.0)));
  3895  0EF4  3007               	movlw	7
  3896  0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  3897  0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  3898  0EF7  00BD               	movwf	??_flip_EN+1
  3899  0EF8  307C               	movlw	124
  3900  0EF9  00BC               	movwf	??_flip_EN
  3901  0EFA                     u1657:
  3902  0EFA  0BBC               	decfsz	??_flip_EN,f
  3903  0EFB  2EFA               	goto	u1657
  3904  0EFC  0BBD               	decfsz	??_flip_EN+1,f
  3905  0EFD  2EFA               	goto	u1657
  3906  0EFE  0000               	nop
  3907  0EFF                     l2191:
  3908                           
  3909                           ;lcd_8bitsA.c: 8:     RD0 = 0;
  3910  0EFF  1283               	bcf	3,5	;RP0=0, select bank0
  3911  0F00  1303               	bcf	3,6	;RP1=0, select bank0
  3912  0F01  1008               	bcf	8,0	;volatile
  3913  0F02                     l196:
  3914  0F02  0008               	return
  3915  0F03                     __end_of_flip_EN:
  3916                           
  3917                           	psect	text23
  3918  033E                     __ptext23:	
  3919 ;; *************** function _flip_slave *****************
  3920 ;; Defined at:
  3921 ;;		line 154 in file "main.c"
  3922 ;; Parameters:    Size  Location     Type
  3923 ;;		None
  3924 ;; Auto vars:     Size  Location     Type
  3925 ;;		None
  3926 ;; Return value:  Size  Location     Type
  3927 ;;                  1    wreg      void 
  3928 ;; Registers used:
  3929 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3930 ;; Tracked objects:
  3931 ;;		On entry : 0/0
  3932 ;;		On exit  : 0/0
  3933 ;;		Unchanged: 0/0
  3934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3935 ;;      Params:         0       0       0       0       0
  3936 ;;      Locals:         0       0       0       0       0
  3937 ;;      Temps:          0       2       0       0       0
  3938 ;;      Totals:         0       2       0       0       0
  3939 ;;Total ram usage:        2 bytes
  3940 ;; Hardware stack levels used: 1
  3941 ;; Hardware stack levels required when called: 6
  3942 ;; This function calls:
  3943 ;;		_spiRead
  3944 ;;		_spiWrite
  3945 ;; This function is called by:
  3946 ;;		_main
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           
  3951                           ;psect for function _flip_slave
  3952  033E                     _flip_slave:
  3953  033E                     l1993:	
  3954                           ;incstack = 0
  3955                           ; Regs used in _flip_slave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3956                           
  3957                           
  3958                           ;main.c: 155:     switch (state) {
  3959  033E  2BF4               	goto	l2035
  3960  033F                     l146:	
  3961                           ;main.c: 156:         case 0:
  3962                           
  3963                           
  3964                           ;main.c: 157:             RB4 = 0;
  3965  033F  1206               	bcf	6,4	;volatile
  3966                           
  3967                           ;main.c: 158:             RB6 = 1;
  3968  0340  1706               	bsf	6,6	;volatile
  3969                           
  3970                           ;main.c: 159:             RB5 = 1;
  3971  0341  1686               	bsf	6,5	;volatile
  3972  0342                     l1995:
  3973                           
  3974                           ;main.c: 160:             _delay((unsigned long)((1)*(4000000/4000.0)));
  3975  0342  30C7               	movlw	199
  3976  0343  1283               	bcf	3,5	;RP0=0, select bank0
  3977  0344  1303               	bcf	3,6	;RP1=0, select bank0
  3978  0345  00BD               	movwf	??_flip_slave
  3979  0346                     u1667:
  3980  0346  2B47               	nop2
  3981  0347  0BBD               	decfsz	??_flip_slave,f
  3982  0348  2B46               	goto	u1667
  3983  0349  2B4A               	nop2
  3984  034A                     l1997:
  3985                           
  3986                           ;main.c: 162:             spiWrite(trash);
  3987  034A  3000               	movlw	0
  3988  034B  120A  158A  268B  120A  118A  	fcall	_spiWrite
  3989  0350                     l1999:
  3990                           
  3991                           ;main.c: 163:             lector.volt = spiRead();
  3992  0350  120A  158A  26AE  120A  118A  	fcall	_spiRead
  3993  0355  1283               	bcf	3,5	;RP0=0, select bank0
  3994  0356  1303               	bcf	3,6	;RP1=0, select bank0
  3995  0357  00BD               	movwf	??_flip_slave
  3996  0358  083D               	movf	??_flip_slave,w
  3997  0359  00C4               	movwf	_lector
  3998                           
  3999                           ;main.c: 165:             _delay((unsigned long)((1)*(4000000/4000.0)));
  4000  035A  30C7               	movlw	199
  4001  035B  1283               	bcf	3,5	;RP0=0, select bank0
  4002  035C  1303               	bcf	3,6	;RP1=0, select bank0
  4003  035D  00BD               	movwf	??_flip_slave
  4004  035E                     u1677:
  4005  035E  2B5F               	nop2
  4006  035F  0BBD               	decfsz	??_flip_slave,f
  4007  0360  2B5E               	goto	u1677
  4008  0361  2B62               	nop2
  4009  0362                     l2001:
  4010                           
  4011                           ;main.c: 166:             RB4 = 1;
  4012  0362  1283               	bcf	3,5	;RP0=0, select bank0
  4013  0363  1303               	bcf	3,6	;RP1=0, select bank0
  4014  0364  1606               	bsf	6,4	;volatile
  4015                           
  4016                           ;main.c: 168:             _delay((unsigned long)((50)*(4000000/4000.0)));
  4017  0365  3041               	movlw	65
  4018  0366  1283               	bcf	3,5	;RP0=0, select bank0
  4019  0367  1303               	bcf	3,6	;RP1=0, select bank0
  4020  0368  00BE               	movwf	??_flip_slave+1
  4021  0369  30ED               	movlw	237
  4022  036A  00BD               	movwf	??_flip_slave
  4023  036B                     u1687:
  4024  036B  0BBD               	decfsz	??_flip_slave,f
  4025  036C  2B6B               	goto	u1687
  4026  036D  0BBE               	decfsz	??_flip_slave+1,f
  4027  036E  2B6B               	goto	u1687
  4028  036F  2B70               	nop2
  4029  0370                     l2003:
  4030                           
  4031                           ;main.c: 170:             state = 1;
  4032  0370  1283               	bcf	3,5	;RP0=0, select bank0
  4033  0371  1303               	bcf	3,6	;RP1=0, select bank0
  4034  0372  01C7               	clrf	_state
  4035  0373  0AC7               	incf	_state,f
  4036                           
  4037                           ;main.c: 171:             break;
  4038  0374  2C09               	goto	l151
  4039  0375                     l148:	
  4040                           ;main.c: 173:         case 1:
  4041                           
  4042                           
  4043                           ;main.c: 174:             RB4 = 1;
  4044  0375  1606               	bsf	6,4	;volatile
  4045                           
  4046                           ;main.c: 175:             RB6 = 0;
  4047  0376  1306               	bcf	6,6	;volatile
  4048                           
  4049                           ;main.c: 176:             RB5 = 1;
  4050  0377  1686               	bsf	6,5	;volatile
  4051  0378                     l2005:
  4052                           
  4053                           ;main.c: 177:             _delay((unsigned long)((1)*(4000000/4000.0)));
  4054  0378  30C7               	movlw	199
  4055  0379  1283               	bcf	3,5	;RP0=0, select bank0
  4056  037A  1303               	bcf	3,6	;RP1=0, select bank0
  4057  037B  00BD               	movwf	??_flip_slave
  4058  037C                     u1697:
  4059  037C  2B7D               	nop2
  4060  037D  0BBD               	decfsz	??_flip_slave,f
  4061  037E  2B7C               	goto	u1697
  4062  037F  2B80               	nop2
  4063  0380                     l2007:
  4064                           
  4065                           ;main.c: 179:             spiWrite(trash);
  4066  0380  3000               	movlw	0
  4067  0381  120A  158A  268B  120A  118A  	fcall	_spiWrite
  4068  0386                     l2009:
  4069                           
  4070                           ;main.c: 180:             lector.cont = spiRead();
  4071  0386  120A  158A  26AE  120A  118A  	fcall	_spiRead
  4072  038B  1283               	bcf	3,5	;RP0=0, select bank0
  4073  038C  1303               	bcf	3,6	;RP1=0, select bank0
  4074  038D  00BD               	movwf	??_flip_slave
  4075  038E  083D               	movf	??_flip_slave,w
  4076  038F  00C5               	movwf	_lector+1
  4077                           
  4078                           ;main.c: 182:             _delay((unsigned long)((1)*(4000000/4000.0)));
  4079  0390  30C7               	movlw	199
  4080  0391  1283               	bcf	3,5	;RP0=0, select bank0
  4081  0392  1303               	bcf	3,6	;RP1=0, select bank0
  4082  0393  00BD               	movwf	??_flip_slave
  4083  0394                     u1707:
  4084  0394  2B95               	nop2
  4085  0395  0BBD               	decfsz	??_flip_slave,f
  4086  0396  2B94               	goto	u1707
  4087  0397  2B98               	nop2
  4088  0398                     l2011:
  4089                           
  4090                           ;main.c: 183:             RB6 = 1;
  4091  0398  1283               	bcf	3,5	;RP0=0, select bank0
  4092  0399  1303               	bcf	3,6	;RP1=0, select bank0
  4093  039A  1706               	bsf	6,6	;volatile
  4094                           
  4095                           ;main.c: 185:             _delay((unsigned long)((50)*(4000000/4000.0)));
  4096  039B  3041               	movlw	65
  4097  039C  1283               	bcf	3,5	;RP0=0, select bank0
  4098  039D  1303               	bcf	3,6	;RP1=0, select bank0
  4099  039E  00BE               	movwf	??_flip_slave+1
  4100  039F  30ED               	movlw	237
  4101  03A0  00BD               	movwf	??_flip_slave
  4102  03A1                     u1717:
  4103  03A1  0BBD               	decfsz	??_flip_slave,f
  4104  03A2  2BA1               	goto	u1717
  4105  03A3  0BBE               	decfsz	??_flip_slave+1,f
  4106  03A4  2BA1               	goto	u1717
  4107  03A5  2BA6               	nop2
  4108                           
  4109                           ;main.c: 187:             state = 2;
  4110  03A6  3002               	movlw	2
  4111  03A7  1283               	bcf	3,5	;RP0=0, select bank0
  4112  03A8  1303               	bcf	3,6	;RP1=0, select bank0
  4113  03A9  00BD               	movwf	??_flip_slave
  4114  03AA  083D               	movf	??_flip_slave,w
  4115  03AB  00C7               	movwf	_state
  4116                           
  4117                           ;main.c: 188:             break;
  4118  03AC  2C09               	goto	l151
  4119  03AD                     l149:	
  4120                           ;main.c: 190:         case 2:
  4121                           
  4122                           
  4123                           ;main.c: 191:             RB4 = 1;
  4124  03AD  1606               	bsf	6,4	;volatile
  4125                           
  4126                           ;main.c: 192:             RB6 = 1;
  4127  03AE  1706               	bsf	6,6	;volatile
  4128                           
  4129                           ;main.c: 193:             RB5 = 0;
  4130  03AF  1286               	bcf	6,5	;volatile
  4131  03B0                     l2013:
  4132                           
  4133                           ;main.c: 194:             _delay((unsigned long)((1)*(4000000/4000.0)));
  4134  03B0  30C7               	movlw	199
  4135  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  4136  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  4137  03B3  00BD               	movwf	??_flip_slave
  4138  03B4                     u1727:
  4139  03B4  2BB5               	nop2
  4140  03B5  0BBD               	decfsz	??_flip_slave,f
  4141  03B6  2BB4               	goto	u1727
  4142  03B7  2BB8               	nop2
  4143  03B8                     l2015:
  4144                           
  4145                           ;main.c: 196:             spiWrite(trash);
  4146  03B8  3000               	movlw	0
  4147  03B9  120A  158A  268B  120A  118A  	fcall	_spiWrite
  4148  03BE                     l2017:
  4149                           
  4150                           ;main.c: 197:             lector.temp = spiRead();
  4151  03BE  120A  158A  26AE  120A  118A  	fcall	_spiRead
  4152  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  4153  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  4154  03C5  00BD               	movwf	??_flip_slave
  4155  03C6  083D               	movf	??_flip_slave,w
  4156  03C7  00C6               	movwf	_lector+2
  4157                           
  4158                           ;main.c: 199:             _delay((unsigned long)((1)*(4000000/4000.0)));
  4159  03C8  30C7               	movlw	199
  4160  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  4161  03CA  1303               	bcf	3,6	;RP1=0, select bank0
  4162  03CB  00BD               	movwf	??_flip_slave
  4163  03CC                     u1737:
  4164  03CC  2BCD               	nop2
  4165  03CD  0BBD               	decfsz	??_flip_slave,f
  4166  03CE  2BCC               	goto	u1737
  4167  03CF  2BD0               	nop2
  4168  03D0                     l2019:
  4169                           
  4170                           ;main.c: 200:             RB5 = 0;
  4171  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  4172  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  4173  03D2  1286               	bcf	6,5	;volatile
  4174                           
  4175                           ;main.c: 202:             _delay((unsigned long)((50)*(4000000/4000.0)));
  4176  03D3  3041               	movlw	65
  4177  03D4  1283               	bcf	3,5	;RP0=0, select bank0
  4178  03D5  1303               	bcf	3,6	;RP1=0, select bank0
  4179  03D6  00BE               	movwf	??_flip_slave+1
  4180  03D7  30ED               	movlw	237
  4181  03D8  00BD               	movwf	??_flip_slave
  4182  03D9                     u1747:
  4183  03D9  0BBD               	decfsz	??_flip_slave,f
  4184  03DA  2BD9               	goto	u1747
  4185  03DB  0BBE               	decfsz	??_flip_slave+1,f
  4186  03DC  2BD9               	goto	u1747
  4187  03DD  2BDE               	nop2
  4188  03DE                     l2021:
  4189                           
  4190                           ;main.c: 204:             state = 0;
  4191  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  4192  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  4193  03E0  01C7               	clrf	_state
  4194                           
  4195                           ;main.c: 205:             break;
  4196  03E1  2C09               	goto	l151
  4197  03E2                     l150:	
  4198                           ;main.c: 207:         default:
  4199                           
  4200                           
  4201                           ;main.c: 208:             RB4 = 1;
  4202  03E2  1606               	bsf	6,4	;volatile
  4203                           
  4204                           ;main.c: 209:             RB6 = 1;
  4205  03E3  1706               	bsf	6,6	;volatile
  4206                           
  4207                           ;main.c: 210:             RB5 = 1;
  4208  03E4  1686               	bsf	6,5	;volatile
  4209  03E5                     l2023:
  4210                           
  4211                           ;main.c: 211:             _delay((unsigned long)((1)*(4000000/4000.0)));
  4212  03E5  30C7               	movlw	199
  4213  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  4214  03E7  1303               	bcf	3,6	;RP1=0, select bank0
  4215  03E8  00BD               	movwf	??_flip_slave
  4216  03E9                     u1757:
  4217  03E9  2BEA               	nop2
  4218  03EA  0BBD               	decfsz	??_flip_slave,f
  4219  03EB  2BE9               	goto	u1757
  4220  03EC  2BED               	nop2
  4221  03ED                     l2025:
  4222                           
  4223                           ;main.c: 213:             spiWrite(trash);
  4224  03ED  3000               	movlw	0
  4225  03EE  120A  158A  268B  120A  118A  	fcall	_spiWrite
  4226  03F3  2B50               	goto	l1999
  4227  03F4                     l2035:
  4228  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  4229  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  4230  03F6  0847               	movf	_state,w
  4231  03F7  00BD               	movwf	??_flip_slave
  4232  03F8  01BE               	clrf	??_flip_slave+1
  4233                           
  4234                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4235                           ; Switch size 1, requested type "simple"
  4236                           ; Number of cases is 1, Range of values is 0 to 0
  4237                           ; switch strategies available:
  4238                           ; Name         Instructions Cycles
  4239                           ; simple_byte            4     3 (average)
  4240                           ; direct_byte           11     8 (fixed)
  4241                           ; jumptable            260     6 (fixed)
  4242                           ;	Chosen strategy is simple_byte
  4243  03F9  083E               	movf	??_flip_slave+1,w
  4244  03FA  3A00               	xorlw	0	; case 0
  4245  03FB  1903               	skipnz
  4246  03FC  2BFE               	goto	l2585
  4247  03FD  2BE2               	goto	l150
  4248  03FE                     l2585:
  4249                           
  4250                           ; Switch size 1, requested type "simple"
  4251                           ; Number of cases is 3, Range of values is 0 to 2
  4252                           ; switch strategies available:
  4253                           ; Name         Instructions Cycles
  4254                           ; simple_byte           10     6 (average)
  4255                           ; direct_byte           17     8 (fixed)
  4256                           ; jumptable            260     6 (fixed)
  4257                           ;	Chosen strategy is simple_byte
  4258  03FE  083D               	movf	??_flip_slave,w
  4259  03FF  3A00               	xorlw	0	; case 0
  4260  0400  1903               	skipnz
  4261  0401  2B3F               	goto	l146
  4262  0402  3A01               	xorlw	1	; case 1
  4263  0403  1903               	skipnz
  4264  0404  2B75               	goto	l148
  4265  0405  3A03               	xorlw	3	; case 2
  4266  0406  1903               	skipnz
  4267  0407  2BAD               	goto	l149
  4268  0408  2BE2               	goto	l150
  4269  0409                     l151:
  4270  0409  0008               	return
  4271  040A                     __end_of_flip_slave:
  4272                           
  4273                           	psect	text24
  4274  0E8B                     __ptext24:	
  4275 ;; *************** function _spiWrite *****************
  4276 ;; Defined at:
  4277 ;;		line 35 in file "SPI.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;  dat             1    wreg     unsigned char 
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;  dat             1   28[BANK0 ] unsigned char 
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  1    wreg      void 
  4284 ;; Registers used:
  4285 ;;		wreg
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4291 ;;      Params:         0       0       0       0       0
  4292 ;;      Locals:         0       1       0       0       0
  4293 ;;      Temps:          0       0       0       0       0
  4294 ;;      Totals:         0       1       0       0       0
  4295 ;;Total ram usage:        1 bytes
  4296 ;; Hardware stack levels used: 1
  4297 ;; Hardware stack levels required when called: 4
  4298 ;; This function calls:
  4299 ;;		Nothing
  4300 ;; This function is called by:
  4301 ;;		_flip_slave
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           
  4306                           ;psect for function _spiWrite
  4307  0E8B                     _spiWrite:
  4308                           
  4309                           ;incstack = 0
  4310                           ; Regs used in _spiWrite: [wreg]
  4311                           ;spiWrite@dat stored from wreg
  4312  0E8B  1283               	bcf	3,5	;RP0=0, select bank0
  4313  0E8C  1303               	bcf	3,6	;RP1=0, select bank0
  4314  0E8D  00BC               	movwf	spiWrite@dat
  4315  0E8E                     l1781:
  4316                           
  4317                           ;SPI.c: 35: void spiWrite(char dat);SPI.c: 36: {;SPI.c: 37:     SSPBUF = dat;
  4318  0E8E  083C               	movf	spiWrite@dat,w
  4319  0E8F  0093               	movwf	19	;volatile
  4320  0E90                     l30:
  4321  0E90  0008               	return
  4322  0E91                     __end_of_spiWrite:
  4323                           
  4324                           	psect	text25
  4325  0EAE                     __ptext25:	
  4326 ;; *************** function _spiRead *****************
  4327 ;; Defined at:
  4328 ;;		line 48 in file "SPI.c"
  4329 ;; Parameters:    Size  Location     Type
  4330 ;;		None
  4331 ;; Auto vars:     Size  Location     Type
  4332 ;;		None
  4333 ;; Return value:  Size  Location     Type
  4334 ;;                  1    wreg      unsigned char 
  4335 ;; Registers used:
  4336 ;;		wreg, status,2, status,0, pclath, cstack
  4337 ;; Tracked objects:
  4338 ;;		On entry : 0/0
  4339 ;;		On exit  : 0/0
  4340 ;;		Unchanged: 0/0
  4341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4342 ;;      Params:         0       0       0       0       0
  4343 ;;      Locals:         0       0       0       0       0
  4344 ;;      Temps:          0       0       0       0       0
  4345 ;;      Totals:         0       0       0       0       0
  4346 ;;Total ram usage:        0 bytes
  4347 ;; Hardware stack levels used: 1
  4348 ;; Hardware stack levels required when called: 5
  4349 ;; This function calls:
  4350 ;;		_spiReceiveWait
  4351 ;; This function is called by:
  4352 ;;		_flip_slave
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           
  4357                           ;psect for function _spiRead
  4358  0EAE                     _spiRead:
  4359  0EAE                     l1783:	
  4360                           ;incstack = 0
  4361                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  4362                           
  4363                           
  4364                           ;SPI.c: 50:     spiReceiveWait();
  4365  0EAE  120A  158A  2697  120A  158A  	fcall	_spiReceiveWait
  4366  0EB3                     l1785:
  4367                           
  4368                           ;SPI.c: 51:     return(SSPBUF);
  4369  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  4370  0EB4  1303               	bcf	3,6	;RP1=0, select bank0
  4371  0EB5  0813               	movf	19,w	;volatile
  4372  0EB6                     l38:
  4373  0EB6  0008               	return
  4374  0EB7                     __end_of_spiRead:
  4375                           
  4376                           	psect	text26
  4377  0E97                     __ptext26:	
  4378 ;; *************** function _spiReceiveWait *****************
  4379 ;; Defined at:
  4380 ;;		line 30 in file "SPI.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;		None
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;		None
  4385 ;; Return value:  Size  Location     Type
  4386 ;;                  1    wreg      void 
  4387 ;; Registers used:
  4388 ;;		None
  4389 ;; Tracked objects:
  4390 ;;		On entry : 0/0
  4391 ;;		On exit  : 0/0
  4392 ;;		Unchanged: 0/0
  4393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4394 ;;      Params:         0       0       0       0       0
  4395 ;;      Locals:         0       0       0       0       0
  4396 ;;      Temps:          0       0       0       0       0
  4397 ;;      Totals:         0       0       0       0       0
  4398 ;;Total ram usage:        0 bytes
  4399 ;; Hardware stack levels used: 1
  4400 ;; Hardware stack levels required when called: 4
  4401 ;; This function calls:
  4402 ;;		Nothing
  4403 ;; This function is called by:
  4404 ;;		_spiRead
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           
  4409                           ;psect for function _spiReceiveWait
  4410  0E97                     _spiReceiveWait:
  4411  0E97                     l1559:	
  4412                           ;incstack = 0
  4413                           ; Regs used in _spiReceiveWait: []
  4414                           
  4415  0E97                     l24:	
  4416                           ;SPI.c: 32:     while ( !SSPSTATbits.BF );
  4417                           
  4418  0E97  1683               	bsf	3,5	;RP0=1, select bank1
  4419  0E98  1303               	bcf	3,6	;RP1=0, select bank1
  4420  0E99  1C14               	btfss	20,0	;volatile
  4421  0E9A  2E9C               	goto	u631
  4422  0E9B  2E9D               	goto	u630
  4423  0E9C                     u631:
  4424  0E9C  2E97               	goto	l24
  4425  0E9D                     u630:
  4426  0E9D                     l27:
  4427  0E9D  0008               	return
  4428  0E9E                     __end_of_spiReceiveWait:
  4429                           
  4430                           	psect	text27
  4431  0F16                     __ptext27:	
  4432 ;; *************** function _isr *****************
  4433 ;; Defined at:
  4434 ;;		line 127 in file "main.c"
  4435 ;; Parameters:    Size  Location     Type
  4436 ;;		None
  4437 ;; Auto vars:     Size  Location     Type
  4438 ;;		None
  4439 ;; Return value:  Size  Location     Type
  4440 ;;                  1    wreg      void 
  4441 ;; Registers used:
  4442 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4443 ;; Tracked objects:
  4444 ;;		On entry : 0/0
  4445 ;;		On exit  : 0/0
  4446 ;;		Unchanged: 0/0
  4447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4448 ;;      Params:         0       0       0       0       0
  4449 ;;      Locals:         0       0       0       0       0
  4450 ;;      Temps:          0       4       0       0       0
  4451 ;;      Totals:         0       4       0       0       0
  4452 ;;Total ram usage:        4 bytes
  4453 ;; Hardware stack levels used: 1
  4454 ;; Hardware stack levels required when called: 3
  4455 ;; This function calls:
  4456 ;;		_print
  4457 ;; This function is called by:
  4458 ;;		Interrupt level 1
  4459 ;; This function uses a non-reentrant model
  4460 ;;
  4461                           
  4462                           
  4463                           ;psect for function _isr
  4464  0F16                     _isr:
  4465  0F16                     i1l2071:
  4466                           
  4467                           ;main.c: 128:     if (PIR1bits.TMR1IF){
  4468  0F16  1C0C               	btfss	12,0	;volatile
  4469  0F17  2F19               	goto	u124_21
  4470  0F18  2F1A               	goto	u124_20
  4471  0F19                     u124_21:
  4472  0F19  2F26               	goto	i1l136
  4473  0F1A                     u124_20:
  4474  0F1A                     i1l2073:
  4475                           
  4476                           ;main.c: 131:         print();
  4477  0F1A  120A  118A  240A  120A  158A  	fcall	_print
  4478  0F1F                     i1l2075:
  4479                           
  4480                           ;main.c: 133:         TMR1H = 11;
  4481  0F1F  300B               	movlw	11
  4482  0F20  1283               	bcf	3,5	;RP0=0, select bank0
  4483  0F21  1303               	bcf	3,6	;RP1=0, select bank0
  4484  0F22  008F               	movwf	15	;volatile
  4485  0F23                     i1l2077:
  4486                           
  4487                           ;main.c: 134:         TMR1L = 220;
  4488  0F23  30DC               	movlw	220
  4489  0F24  008E               	movwf	14	;volatile
  4490  0F25                     i1l2079:
  4491                           
  4492                           ;main.c: 135:         PIR1bits.TMR1IF = 0;
  4493  0F25  100C               	bcf	12,0	;volatile
  4494  0F26                     i1l136:
  4495  0F26  083B               	movf	??_isr+3,w
  4496  0F27  00FF               	movwf	btemp+1
  4497  0F28  083A               	movf	??_isr+2,w
  4498  0F29  008A               	movwf	10
  4499  0F2A  0839               	movf	??_isr+1,w
  4500  0F2B  0084               	movwf	4
  4501  0F2C  0E38               	swapf	??_isr,w
  4502  0F2D  0083               	movwf	3
  4503  0F2E  0EFE               	swapf	btemp,f
  4504  0F2F  0E7E               	swapf	btemp,w
  4505  0F30  0009               	retfie
  4506  0F31                     __end_of_isr:
  4507                           
  4508                           	psect	intentry
  4509  0004                     __pintentry:	
  4510                           ;incstack = 0
  4511 ;; hardware stack exceeded
  4512                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4513                           
  4514  0004                     interrupt_function:
  4515  007E                     saved_w	set	btemp
  4516  0004  00FE               	movwf	btemp
  4517  0005  0E03               	swapf	3,w
  4518  0006  1283               	bcf	3,5	;RP0=0, select bank0
  4519  0007  1303               	bcf	3,6	;RP1=0, select bank0
  4520  0008  00B8               	movwf	??_isr
  4521  0009  0804               	movf	4,w
  4522  000A  00B9               	movwf	??_isr+1
  4523  000B  080A               	movf	10,w
  4524  000C  00BA               	movwf	??_isr+2
  4525  000D  087F               	movf	btemp+1,w
  4526  000E  00BB               	movwf	??_isr+3
  4527  000F  120A  158A  2F16   	ljmp	_isr
  4528                           
  4529                           	psect	text28
  4530  040A                     __ptext28:	
  4531 ;; *************** function _print *****************
  4532 ;; Defined at:
  4533 ;;		line 252 in file "main.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;		None
  4536 ;; Auto vars:     Size  Location     Type
  4537 ;;		None
  4538 ;; Return value:  Size  Location     Type
  4539 ;;                  1    wreg      void 
  4540 ;; Registers used:
  4541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4542 ;; Tracked objects:
  4543 ;;		On entry : 0/0
  4544 ;;		On exit  : 0/0
  4545 ;;		Unchanged: 0/0
  4546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4547 ;;      Params:         0       0       0       0       0
  4548 ;;      Locals:         0       0       0       0       0
  4549 ;;      Temps:          0       7       0       0       0
  4550 ;;      Totals:         0       7       0       0       0
  4551 ;;Total ram usage:        7 bytes
  4552 ;; Hardware stack levels used: 1
  4553 ;; Hardware stack levels required when called: 2
  4554 ;; This function calls:
  4555 ;;		_uartEnter
  4556 ;;		_uartWrite
  4557 ;;		i1_sprintf
  4558 ;; This function is called by:
  4559 ;;		_isr
  4560 ;; This function uses a non-reentrant model
  4561 ;;
  4562                           
  4563                           
  4564                           ;psect for function _print
  4565  040A                     _print:
  4566  040A                     i1l1983:	
  4567                           ;incstack = 0
  4568 ;; hardware stack exceeded
  4569                           ; Regs used in _print: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4570                           
  4571                           
  4572                           ;main.c: 253:     sprintf(buffer.potenciometro, "%d.%d%dV  ", pot.cen, pot.dec, pot.uni)
      +                          ;
  4573  040A  302A               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  4574  040B  1283               	bcf	3,5	;RP0=0, select bank0
  4575  040C  1303               	bcf	3,6	;RP1=0, select bank0
  4576  040D  00B1               	movwf	??_print
  4577  040E  0831               	movf	??_print,w
  4578  040F  00A0               	movwf	i1sprintf@f
  4579  0410  084F               	movf	_pot,w
  4580  0411  00B2               	movwf	??_print+1
  4581  0412  01B3               	clrf	??_print+2
  4582  0413  0832               	movf	??_print+1,w
  4583  0414  00A1               	movwf	?i1_sprintf+1
  4584  0415  0833               	movf	??_print+2,w
  4585  0416  00A2               	movwf	?i1_sprintf+2
  4586  0417  0850               	movf	_pot+1,w
  4587  0418  00B4               	movwf	??_print+3
  4588  0419  01B5               	clrf	??_print+4
  4589  041A  0834               	movf	??_print+3,w
  4590  041B  00A3               	movwf	?i1_sprintf+3
  4591  041C  0835               	movf	??_print+4,w
  4592  041D  00A4               	movwf	?i1_sprintf+4
  4593  041E  0851               	movf	_pot+2,w
  4594  041F  00B6               	movwf	??_print+5
  4595  0420  01B7               	clrf	??_print+6
  4596  0421  0836               	movf	??_print+5,w
  4597  0422  00A5               	movwf	?i1_sprintf+5
  4598  0423  0837               	movf	??_print+6,w
  4599  0424  00A6               	movwf	?i1_sprintf+6
  4600  0425  30AF               	movlw	(low ((_buffer| 0+15)))& (0+255)
  4601  0426  120A  118A  2256  120A  118A  	fcall	i1_sprintf
  4602                           
  4603                           ;main.c: 254:     sprintf(buffer.botones, "%d%d%d  ", bot.cen, bot.dec, bot.uni);
  4604  042B  3035               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  4605  042C  1283               	bcf	3,5	;RP0=0, select bank0
  4606  042D  1303               	bcf	3,6	;RP1=0, select bank0
  4607  042E  00B1               	movwf	??_print
  4608  042F  0831               	movf	??_print,w
  4609  0430  00A0               	movwf	i1sprintf@f
  4610  0431  084C               	movf	_bot,w
  4611  0432  00B2               	movwf	??_print+1
  4612  0433  01B3               	clrf	??_print+2
  4613  0434  0832               	movf	??_print+1,w
  4614  0435  00A1               	movwf	?i1_sprintf+1
  4615  0436  0833               	movf	??_print+2,w
  4616  0437  00A2               	movwf	?i1_sprintf+2
  4617  0438  084D               	movf	_bot+1,w
  4618  0439  00B4               	movwf	??_print+3
  4619  043A  01B5               	clrf	??_print+4
  4620  043B  0834               	movf	??_print+3,w
  4621  043C  00A3               	movwf	?i1_sprintf+3
  4622  043D  0835               	movf	??_print+4,w
  4623  043E  00A4               	movwf	?i1_sprintf+4
  4624  043F  084E               	movf	_bot+2,w
  4625  0440  00B6               	movwf	??_print+5
  4626  0441  01B7               	clrf	??_print+6
  4627  0442  0836               	movf	??_print+5,w
  4628  0443  00A5               	movwf	?i1_sprintf+5
  4629  0444  0837               	movf	??_print+6,w
  4630  0445  00A6               	movwf	?i1_sprintf+6
  4631  0446  30B9               	movlw	(low ((_buffer| 0+25)))& (0+255)
  4632  0447  120A  118A  2256  120A  118A  	fcall	i1_sprintf
  4633                           
  4634                           ;main.c: 255:     sprintf(buffer.temperatura, "%d%d%d", tem.cen, tem.dec, tem.uni);
  4635  044C  3047               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  4636  044D  1283               	bcf	3,5	;RP0=0, select bank0
  4637  044E  1303               	bcf	3,6	;RP1=0, select bank0
  4638  044F  00B1               	movwf	??_print
  4639  0450  0831               	movf	??_print,w
  4640  0451  00A0               	movwf	i1sprintf@f
  4641  0452  0849               	movf	_tem,w
  4642  0453  00B2               	movwf	??_print+1
  4643  0454  01B3               	clrf	??_print+2
  4644  0455  0832               	movf	??_print+1,w
  4645  0456  00A1               	movwf	?i1_sprintf+1
  4646  0457  0833               	movf	??_print+2,w
  4647  0458  00A2               	movwf	?i1_sprintf+2
  4648  0459  084A               	movf	_tem+1,w
  4649  045A  00B4               	movwf	??_print+3
  4650  045B  01B5               	clrf	??_print+4
  4651  045C  0834               	movf	??_print+3,w
  4652  045D  00A3               	movwf	?i1_sprintf+3
  4653  045E  0835               	movf	??_print+4,w
  4654  045F  00A4               	movwf	?i1_sprintf+4
  4655  0460  084B               	movf	_tem+2,w
  4656  0461  00B6               	movwf	??_print+5
  4657  0462  01B7               	clrf	??_print+6
  4658  0463  0836               	movf	??_print+5,w
  4659  0464  00A5               	movwf	?i1_sprintf+5
  4660  0465  0837               	movf	??_print+6,w
  4661  0466  00A6               	movwf	?i1_sprintf+6
  4662  0467  30C3               	movlw	(low ((_buffer| 0+35)))& (0+255)
  4663  0468  120A  118A  2256  120A  118A  	fcall	i1_sprintf
  4664                           
  4665                           ;main.c: 257:     uartWrite (&intro);
  4666  046D  300B               	movlw	(low ((_intro-__stringbase)| (0+32768)))& (0+255)
  4667  046E  00F0               	movwf	uartWrite@word
  4668  046F  3080               	movlw	128
  4669  0470  00F1               	movwf	uartWrite@word+1
  4670  0471  120A  158A  27AE  120A  118A  	fcall	_uartWrite
  4671  0476                     i1l1985:
  4672                           
  4673                           ;main.c: 258:     uartEnter();
  4674  0476  120A  158A  2686  120A  118A  	fcall	_uartEnter
  4675  047B                     i1l1987:
  4676                           
  4677                           ;main.c: 259:     uartWrite (&buffer.potenciometro);
  4678  047B  30AF               	movlw	(low ((_buffer| 0+15)))& (0+255)
  4679  047C  00F0               	movwf	uartWrite@word
  4680  047D  3000               	movlw	0
  4681  047E  00F1               	movwf	uartWrite@word+1
  4682  047F  120A  158A  27AE  120A  118A  	fcall	_uartWrite
  4683  0484                     i1l1989:
  4684                           
  4685                           ;main.c: 260:     uartWrite (&buffer.botones);
  4686  0484  30B9               	movlw	(low ((_buffer| 0+25)))& (0+255)
  4687  0485  00F0               	movwf	uartWrite@word
  4688  0486  3000               	movlw	0
  4689  0487  00F1               	movwf	uartWrite@word+1
  4690  0488  120A  158A  27AE  120A  118A  	fcall	_uartWrite
  4691  048D                     i1l1991:
  4692                           
  4693                           ;main.c: 261:     uartWrite (&buffer.temperatura);
  4694  048D  30C3               	movlw	(low ((_buffer| 0+35)))& (0+255)
  4695  048E  00F0               	movwf	uartWrite@word
  4696  048F  3000               	movlw	0
  4697  0490  00F1               	movwf	uartWrite@word+1
  4698  0491  120A  158A  27AE  120A  118A  	fcall	_uartWrite
  4699                           
  4700                           ;main.c: 262:     uartEnter();
  4701  0496  120A  158A  2686  120A  118A  	fcall	_uartEnter
  4702  049B                     i1l157:
  4703  049B  0008               	return
  4704  049C                     __end_of_print:
  4705                           
  4706                           	psect	text29
  4707  0256                     __ptext29:	
  4708 ;; *************** function i1_sprintf *****************
  4709 ;; Defined at:
  4710 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  sp              1    wreg     PTR unsigned char 
  4713 ;;		 -> buffer(45), 
  4714 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  4715 ;;		 -> STR_6(7), STR_5(9), STR_4(11), STR_3(7), 
  4716 ;;		 -> STR_2(7), STR_1(9), 
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;  sp              1   15[BANK0 ] PTR unsigned char 
  4719 ;;		 -> buffer(45), 
  4720 ;;  tmpval          4    0        struct .
  4721 ;;  val             2   13[BANK0 ] unsigned int 
  4722 ;;  cp              2    0        PTR const unsigned char 
  4723 ;;  len             2    0        unsigned int 
  4724 ;;  c               1   16[BANK0 ] unsigned char 
  4725 ;;  prec            1   12[BANK0 ] char 
  4726 ;;  flag            1   11[BANK0 ] unsigned char 
  4727 ;;  ap              1   10[BANK0 ] PTR void [1]
  4728 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  4729 ;; Return value:  Size  Location     Type
  4730 ;;                  2    0[BANK0 ] int 
  4731 ;; Registers used:
  4732 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4733 ;; Tracked objects:
  4734 ;;		On entry : 0/0
  4735 ;;		On exit  : 0/0
  4736 ;;		Unchanged: 0/0
  4737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4738 ;;      Params:         0       7       0       0       0
  4739 ;;      Locals:         0       7       0       0       0
  4740 ;;      Temps:          0       3       0       0       0
  4741 ;;      Totals:         0      17       0       0       0
  4742 ;;Total ram usage:       17 bytes
  4743 ;; Hardware stack levels used: 1
  4744 ;; Hardware stack levels required when called: 1
  4745 ;; This function calls:
  4746 ;;		i1___lwdiv
  4747 ;;		i1___lwmod
  4748 ;; This function is called by:
  4749 ;;		_print
  4750 ;; This function uses a non-reentrant model
  4751 ;;
  4752                           
  4753                           
  4754                           ;psect for function i1_sprintf
  4755  0256                     i1_sprintf:
  4756                           
  4757                           ;incstack = 0
  4758 ;; hardware stack exceeded
  4759                           ; Regs used in i1_sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4760                           ;i1sprintf@sp stored from wreg
  4761  0256  1283               	bcf	3,5	;RP0=0, select bank0
  4762  0257  1303               	bcf	3,6	;RP1=0, select bank0
  4763  0258  00AF               	movwf	i1sprintf@sp
  4764  0259                     i1l1921:
  4765                           
  4766                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  4767  0259  3021               	movlw	(low ((?i1_sprintf| 0+1)))& (0+255)
  4768  025A  00A7               	movwf	??i1_sprintf
  4769  025B  0827               	movf	??i1_sprintf,w
  4770  025C  00AA               	movwf	i1sprintf@ap
  4771                           
  4772                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4773  025D  2B27               	goto	i1l1973
  4774  025E                     i1l1923:
  4775                           
  4776                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  4777  025E  3025               	movlw	37
  4778  025F  0630               	xorwf	i1sprintf@c,w
  4779  0260  1903               	btfsc	3,2
  4780  0261  2A63               	goto	u117_21
  4781  0262  2A64               	goto	u117_20
  4782  0263                     u117_21:
  4783  0263  2A70               	goto	i1l1929
  4784  0264                     u117_20:
  4785  0264                     i1l1925:
  4786                           
  4787                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  4788  0264  0830               	movf	i1sprintf@c,w
  4789  0265  00A7               	movwf	??i1_sprintf
  4790  0266  082F               	movf	i1sprintf@sp,w
  4791  0267  0084               	movwf	4
  4792  0268  0827               	movf	??i1_sprintf,w
  4793  0269  1383               	bcf	3,7	;select IRP bank0
  4794  026A  0080               	movwf	0
  4795  026B                     i1l1927:
  4796  026B  3001               	movlw	1
  4797  026C  00A7               	movwf	??i1_sprintf
  4798  026D  0827               	movf	??i1_sprintf,w
  4799  026E  07AF               	addwf	i1sprintf@sp,f
  4800                           
  4801                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 559:    continue;
  4802  026F  2B27               	goto	i1l1973
  4803  0270                     i1l1929:
  4804                           
  4805                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  4806  0270  01AB               	clrf	i1sprintf@flag
  4807  0271                     i1l1933:	
  4808                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  4809                           
  4810  0271  3001               	movlw	1
  4811  0272  07A0               	addwf	i1sprintf@f,f
  4812  0273  30FF               	movlw	-1
  4813  0274  0720               	addwf	i1sprintf@f,w
  4814  0275  0084               	movwf	4
  4815  0276  120A  118A  2594  120A  118A  	fcall	stringdir
  4816  027B  00B0               	movwf	i1sprintf@c
  4817  027C  00A7               	movwf	??i1_sprintf
  4818  027D  01A8               	clrf	??i1_sprintf+1
  4819                           
  4820                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4821                           ; Switch size 1, requested type "simple"
  4822                           ; Number of cases is 1, Range of values is 0 to 0
  4823                           ; switch strategies available:
  4824                           ; Name         Instructions Cycles
  4825                           ; simple_byte            4     3 (average)
  4826                           ; direct_byte           11     8 (fixed)
  4827                           ; jumptable            260     6 (fixed)
  4828                           ;	Chosen strategy is simple_byte
  4829  027E  0828               	movf	??i1_sprintf+1,w
  4830  027F  3A00               	xorlw	0	; case 0
  4831  0280  1903               	skipnz
  4832  0281  2A83               	goto	i1l2587
  4833  0282  2B27               	goto	i1l1973
  4834  0283                     i1l2587:
  4835                           
  4836                           ; Switch size 1, requested type "simple"
  4837                           ; Number of cases is 3, Range of values is 0 to 105
  4838                           ; switch strategies available:
  4839                           ; Name         Instructions Cycles
  4840                           ; simple_byte           10     6 (average)
  4841                           ; jumptable            260     6 (fixed)
  4842                           ;	Chosen strategy is simple_byte
  4843  0283  0827               	movf	??i1_sprintf,w
  4844  0284  3A00               	xorlw	0	; case 0
  4845  0285  1903               	skipnz
  4846  0286  2B39               	goto	i1l1975
  4847  0287  3A64               	xorlw	100	; case 100
  4848  0288  1903               	skipnz
  4849  0289  2A8E               	goto	i1l1935
  4850  028A  3A0D               	xorlw	13	; case 105
  4851  028B  1903               	skipnz
  4852  028C  2A8E               	goto	i1l1935
  4853  028D  2B27               	goto	i1l1973
  4854  028E                     i1l1935:
  4855                           
  4856                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4857  028E  082A               	movf	i1sprintf@ap,w
  4858  028F  0084               	movwf	4
  4859  0290  1383               	bcf	3,7	;select IRP bank0
  4860  0291  0800               	movf	0,w
  4861  0292  00AD               	movwf	i1sprintf@val
  4862  0293  0A84               	incf	4,f
  4863  0294  0800               	movf	0,w
  4864  0295  00AE               	movwf	i1sprintf@val+1
  4865  0296                     i1l1937:
  4866  0296  3002               	movlw	2
  4867  0297  00A7               	movwf	??i1_sprintf
  4868  0298  0827               	movf	??i1_sprintf,w
  4869  0299  07AA               	addwf	i1sprintf@ap,f
  4870  029A                     i1l1939:
  4871                           
  4872                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  4873  029A  1FAE               	btfss	i1sprintf@val+1,7
  4874  029B  2A9D               	goto	u118_21
  4875  029C  2A9E               	goto	u118_20
  4876  029D                     u118_21:
  4877  029D  2AA7               	goto	i1l1945
  4878  029E                     u118_20:
  4879  029E                     i1l1941:
  4880                           
  4881                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  4882  029E  3003               	movlw	3
  4883  029F  00A7               	movwf	??i1_sprintf
  4884  02A0  0827               	movf	??i1_sprintf,w
  4885  02A1  04AB               	iorwf	i1sprintf@flag,f
  4886  02A2                     i1l1943:
  4887                           
  4888                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  4889  02A2  09AD               	comf	i1sprintf@val,f
  4890  02A3  09AE               	comf	i1sprintf@val+1,f
  4891  02A4  0AAD               	incf	i1sprintf@val,f
  4892  02A5  1903               	skipnz
  4893  02A6  0AAE               	incf	i1sprintf@val+1,f
  4894  02A7                     i1l1945:
  4895                           
  4896                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  4897  02A7  01B0               	clrf	i1sprintf@c
  4898  02A8  0AB0               	incf	i1sprintf@c,f
  4899  02A9                     i1l1951:
  4900                           
  4901                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  4902  02A9  0830               	movf	i1sprintf@c,w
  4903  02AA  00A7               	movwf	??i1_sprintf
  4904  02AB  0727               	addwf	??i1_sprintf,w
  4905  02AC  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4906  02AD  0084               	movwf	4
  4907  02AE  120A  118A  2594  120A  118A  	fcall	stringdir
  4908  02B3  00A8               	movwf	??i1_sprintf+1
  4909  02B4  120A  118A  2594  120A  118A  	fcall	stringdir
  4910  02B9  00A9               	movwf	??i1_sprintf+2
  4911  02BA  0829               	movf	??i1_sprintf+2,w
  4912  02BB  022E               	subwf	i1sprintf@val+1,w
  4913  02BC  1D03               	skipz
  4914  02BD  2AC0               	goto	u119_25
  4915  02BE  0828               	movf	??i1_sprintf+1,w
  4916  02BF  022D               	subwf	i1sprintf@val,w
  4917  02C0                     u119_25:
  4918  02C0  1803               	skipnc
  4919  02C1  2AC3               	goto	u119_21
  4920  02C2  2AC4               	goto	u119_20
  4921  02C3                     u119_21:
  4922  02C3  2AC5               	goto	i1l1955
  4923  02C4                     u119_20:
  4924  02C4  2ACF               	goto	i1l1957
  4925  02C5                     i1l1955:
  4926  02C5  3001               	movlw	1
  4927  02C6  00A7               	movwf	??i1_sprintf
  4928  02C7  0827               	movf	??i1_sprintf,w
  4929  02C8  07B0               	addwf	i1sprintf@c,f
  4930  02C9  3005               	movlw	5
  4931  02CA  0630               	xorwf	i1sprintf@c,w
  4932  02CB  1D03               	btfss	3,2
  4933  02CC  2ACE               	goto	u120_21
  4934  02CD  2ACF               	goto	u120_20
  4935  02CE                     u120_21:
  4936  02CE  2AA9               	goto	i1l1951
  4937  02CF                     u120_20:
  4938  02CF                     i1l1957:
  4939                           
  4940                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  4941  02CF  082B               	movf	i1sprintf@flag,w
  4942  02D0  3903               	andlw	3
  4943  02D1  1903               	btfsc	3,2
  4944  02D2  2AD4               	goto	u121_21
  4945  02D3  2AD5               	goto	u121_20
  4946  02D4                     u121_21:
  4947  02D4  2AE0               	goto	i1l1963
  4948  02D5                     u121_20:
  4949  02D5                     i1l1959:
  4950                           
  4951                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  4952  02D5  302D               	movlw	45
  4953  02D6  00A7               	movwf	??i1_sprintf
  4954  02D7  082F               	movf	i1sprintf@sp,w
  4955  02D8  0084               	movwf	4
  4956  02D9  0827               	movf	??i1_sprintf,w
  4957  02DA  1383               	bcf	3,7	;select IRP bank0
  4958  02DB  0080               	movwf	0
  4959  02DC                     i1l1961:
  4960  02DC  3001               	movlw	1
  4961  02DD  00A7               	movwf	??i1_sprintf
  4962  02DE  0827               	movf	??i1_sprintf,w
  4963  02DF  07AF               	addwf	i1sprintf@sp,f
  4964  02E0                     i1l1963:
  4965                           
  4966                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  4967  02E0  0830               	movf	i1sprintf@c,w
  4968  02E1  00A7               	movwf	??i1_sprintf
  4969  02E2  0827               	movf	??i1_sprintf,w
  4970  02E3  00AC               	movwf	i1sprintf@prec
  4971                           
  4972                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4973  02E4  2B1E               	goto	i1l1971
  4974  02E5                     i1l1965:
  4975                           
  4976                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  4977  02E5  300A               	movlw	10
  4978  02E6  00F8               	movwf	i1___lwmod@divisor
  4979  02E7  3000               	movlw	0
  4980  02E8  00F9               	movwf	i1___lwmod@divisor+1
  4981  02E9  082C               	movf	i1sprintf@prec,w
  4982  02EA  00A7               	movwf	??i1_sprintf
  4983  02EB  0727               	addwf	??i1_sprintf,w
  4984  02EC  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4985  02ED  0084               	movwf	4
  4986  02EE  120A  118A  2594  120A  118A  	fcall	stringdir
  4987  02F3  00F0               	movwf	i1___lwdiv@divisor
  4988  02F4  120A  118A  2594  120A  118A  	fcall	stringdir
  4989  02F9  00F1               	movwf	i1___lwdiv@divisor+1
  4990  02FA  082E               	movf	i1sprintf@val+1,w
  4991  02FB  00F3               	movwf	i1___lwdiv@dividend+1
  4992  02FC  082D               	movf	i1sprintf@val,w
  4993  02FD  00F2               	movwf	i1___lwdiv@dividend
  4994  02FE  120A  118A  26D7  120A  118A  	fcall	i1___lwdiv
  4995  0303  0871               	movf	?i1___lwdiv+1,w
  4996  0304  00FB               	movwf	i1___lwmod@dividend+1
  4997  0305  0870               	movf	?i1___lwdiv,w
  4998  0306  00FA               	movwf	i1___lwmod@dividend
  4999  0307  120A  118A  2792  120A  118A  	fcall	i1___lwmod
  5000  030C  0878               	movf	?i1___lwmod,w
  5001  030D  3E30               	addlw	48
  5002  030E  1283               	bcf	3,5	;RP0=0, select bank0
  5003  030F  1303               	bcf	3,6	;RP1=0, select bank0
  5004  0310  00A8               	movwf	??i1_sprintf+1
  5005  0311  0828               	movf	??i1_sprintf+1,w
  5006  0312  00B0               	movwf	i1sprintf@c
  5007  0313                     i1l1967:
  5008                           
  5009                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  5010  0313  0830               	movf	i1sprintf@c,w
  5011  0314  00A7               	movwf	??i1_sprintf
  5012  0315  082F               	movf	i1sprintf@sp,w
  5013  0316  0084               	movwf	4
  5014  0317  0827               	movf	??i1_sprintf,w
  5015  0318  1383               	bcf	3,7	;select IRP bank0
  5016  0319  0080               	movwf	0
  5017  031A                     i1l1969:
  5018  031A  3001               	movlw	1
  5019  031B  00A7               	movwf	??i1_sprintf
  5020  031C  0827               	movf	??i1_sprintf,w
  5021  031D  07AF               	addwf	i1sprintf@sp,f
  5022  031E                     i1l1971:
  5023                           
  5024                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  5025  031E  30FF               	movlw	255
  5026  031F  00A7               	movwf	??i1_sprintf
  5027  0320  0827               	movf	??i1_sprintf,w
  5028  0321  07AC               	addwf	i1sprintf@prec,f
  5029  0322  0A2C               	incf	i1sprintf@prec,w
  5030  0323  1D03               	btfss	3,2
  5031  0324  2B26               	goto	u122_21
  5032  0325  2B27               	goto	u122_20
  5033  0326                     u122_21:
  5034  0326  2AE5               	goto	i1l1965
  5035  0327                     u122_20:
  5036  0327                     i1l1973:
  5037                           
  5038                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  5039  0327  3001               	movlw	1
  5040  0328  07A0               	addwf	i1sprintf@f,f
  5041  0329  30FF               	movlw	-1
  5042  032A  0720               	addwf	i1sprintf@f,w
  5043  032B  0084               	movwf	4
  5044  032C  120A  118A  2594  120A  118A  	fcall	stringdir
  5045  0331  00A7               	movwf	??i1_sprintf
  5046  0332  0827               	movf	??i1_sprintf,w
  5047  0333  00B0               	movwf	i1sprintf@c
  5048  0334  0830               	movf	i1sprintf@c,w
  5049  0335  1D03               	btfss	3,2
  5050  0336  2B38               	goto	u123_21
  5051  0337  2B39               	goto	u123_20
  5052  0338                     u123_21:
  5053  0338  2A5E               	goto	i1l1923
  5054  0339                     u123_20:
  5055  0339                     i1l1975:
  5056                           
  5057                           ;C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  5058  0339  082F               	movf	i1sprintf@sp,w
  5059  033A  0084               	movwf	4
  5060  033B  1383               	bcf	3,7	;select IRP bank0
  5061  033C  0180               	clrf	0
  5062  033D                     i1l367:
  5063  033D  0008               	return
  5064  033E                     __end_ofi1_sprintf:
  5065                           
  5066                           	psect	text30
  5067  0792                     __ptext30:	
  5068 ;; *************** function i1___lwmod *****************
  5069 ;; Defined at:
  5070 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;  divisor         2    8[COMMON] unsigned int 
  5073 ;;  dividend        2   10[COMMON] unsigned int 
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;  counter         1   13[COMMON] unsigned char 
  5076 ;; Return value:  Size  Location     Type
  5077 ;;                  2    8[COMMON] unsigned int 
  5078 ;; Registers used:
  5079 ;;		wreg, status,2, status,0
  5080 ;; Tracked objects:
  5081 ;;		On entry : 0/0
  5082 ;;		On exit  : 0/0
  5083 ;;		Unchanged: 0/0
  5084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5085 ;;      Params:         4       0       0       0       0
  5086 ;;      Locals:         1       0       0       0       0
  5087 ;;      Temps:          1       0       0       0       0
  5088 ;;      Totals:         6       0       0       0       0
  5089 ;;Total ram usage:        6 bytes
  5090 ;; Hardware stack levels used: 1
  5091 ;; This function calls:
  5092 ;;		Nothing
  5093 ;; This function is called by:
  5094 ;;		i1_sprintf
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           
  5099                           ;psect for function i1___lwmod
  5100  0792                     i1___lwmod:
  5101  0792                     i1l1745:	
  5102                           ;incstack = 0
  5103 ;; hardware stack exceeded
  5104                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  5105                           
  5106  0792  0878               	movf	i1___lwmod@divisor,w
  5107  0793  0479               	iorwf	i1___lwmod@divisor+1,w
  5108  0794  1903               	btfsc	3,2
  5109  0795  2F97               	goto	u101_21
  5110  0796  2F98               	goto	u101_20
  5111  0797                     u101_21:
  5112  0797  2FC7               	goto	i1l1763
  5113  0798                     u101_20:
  5114  0798                     i1l1747:
  5115  0798  01FD               	clrf	i1___lwmod@counter
  5116  0799  0AFD               	incf	i1___lwmod@counter,f
  5117  079A  2FA6               	goto	i1l1753
  5118  079B                     i1l1749:
  5119  079B  3001               	movlw	1
  5120  079C                     u102_25:
  5121  079C  1003               	clrc
  5122  079D  0DF8               	rlf	i1___lwmod@divisor,f
  5123  079E  0DF9               	rlf	i1___lwmod@divisor+1,f
  5124  079F  3EFF               	addlw	-1
  5125  07A0  1D03               	skipz
  5126  07A1  2F9C               	goto	u102_25
  5127  07A2                     i1l1751:
  5128  07A2  3001               	movlw	1
  5129  07A3  00FC               	movwf	??i1___lwmod
  5130  07A4  087C               	movf	??i1___lwmod,w
  5131  07A5  07FD               	addwf	i1___lwmod@counter,f
  5132  07A6                     i1l1753:
  5133  07A6  1FF9               	btfss	i1___lwmod@divisor+1,7
  5134  07A7  2FA9               	goto	u103_21
  5135  07A8  2FAA               	goto	u103_20
  5136  07A9                     u103_21:
  5137  07A9  2F9B               	goto	i1l1749
  5138  07AA                     u103_20:
  5139  07AA                     i1l1755:
  5140  07AA  0879               	movf	i1___lwmod@divisor+1,w
  5141  07AB  027B               	subwf	i1___lwmod@dividend+1,w
  5142  07AC  1D03               	skipz
  5143  07AD  2FB0               	goto	u104_25
  5144  07AE  0878               	movf	i1___lwmod@divisor,w
  5145  07AF  027A               	subwf	i1___lwmod@dividend,w
  5146  07B0                     u104_25:
  5147  07B0  1C03               	skipc
  5148  07B1  2FB3               	goto	u104_21
  5149  07B2  2FB4               	goto	u104_20
  5150  07B3                     u104_21:
  5151  07B3  2FBA               	goto	i1l1759
  5152  07B4                     u104_20:
  5153  07B4                     i1l1757:
  5154  07B4  0878               	movf	i1___lwmod@divisor,w
  5155  07B5  02FA               	subwf	i1___lwmod@dividend,f
  5156  07B6  0879               	movf	i1___lwmod@divisor+1,w
  5157  07B7  1C03               	skipc
  5158  07B8  03FB               	decf	i1___lwmod@dividend+1,f
  5159  07B9  02FB               	subwf	i1___lwmod@dividend+1,f
  5160  07BA                     i1l1759:
  5161  07BA  3001               	movlw	1
  5162  07BB                     u105_25:
  5163  07BB  1003               	clrc
  5164  07BC  0CF9               	rrf	i1___lwmod@divisor+1,f
  5165  07BD  0CF8               	rrf	i1___lwmod@divisor,f
  5166  07BE  3EFF               	addlw	-1
  5167  07BF  1D03               	skipz
  5168  07C0  2FBB               	goto	u105_25
  5169  07C1                     i1l1761:
  5170  07C1  3001               	movlw	1
  5171  07C2  02FD               	subwf	i1___lwmod@counter,f
  5172  07C3  1D03               	btfss	3,2
  5173  07C4  2FC6               	goto	u106_21
  5174  07C5  2FC7               	goto	u106_20
  5175  07C6                     u106_21:
  5176  07C6  2FAA               	goto	i1l1755
  5177  07C7                     u106_20:
  5178  07C7                     i1l1763:
  5179  07C7  087B               	movf	i1___lwmod@dividend+1,w
  5180  07C8  00F9               	movwf	?i1___lwmod+1
  5181  07C9  087A               	movf	i1___lwmod@dividend,w
  5182  07CA  00F8               	movwf	?i1___lwmod
  5183  07CB                     i1l653:
  5184  07CB  0008               	return
  5185  07CC                     __end_ofi1___lwmod:
  5186                           
  5187                           	psect	text31
  5188  06D7                     __ptext31:	
  5189 ;; *************** function i1___lwdiv *****************
  5190 ;; Defined at:
  5191 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;  divisor         2    0[COMMON] unsigned int 
  5194 ;;  dividend        2    2[COMMON] unsigned int 
  5195 ;; Auto vars:     Size  Location     Type
  5196 ;;  quotient        2    5[COMMON] unsigned int 
  5197 ;;  counter         1    7[COMMON] unsigned char 
  5198 ;; Return value:  Size  Location     Type
  5199 ;;                  2    0[COMMON] unsigned int 
  5200 ;; Registers used:
  5201 ;;		wreg, status,2, status,0
  5202 ;; Tracked objects:
  5203 ;;		On entry : 0/0
  5204 ;;		On exit  : 0/0
  5205 ;;		Unchanged: 0/0
  5206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5207 ;;      Params:         4       0       0       0       0
  5208 ;;      Locals:         3       0       0       0       0
  5209 ;;      Temps:          1       0       0       0       0
  5210 ;;      Totals:         8       0       0       0       0
  5211 ;;Total ram usage:        8 bytes
  5212 ;; Hardware stack levels used: 1
  5213 ;; This function calls:
  5214 ;;		Nothing
  5215 ;; This function is called by:
  5216 ;;		i1_sprintf
  5217 ;; This function uses a non-reentrant model
  5218 ;;
  5219                           
  5220                           
  5221                           ;psect for function i1___lwdiv
  5222  06D7                     i1___lwdiv:
  5223  06D7                     i1l1719:	
  5224                           ;incstack = 0
  5225 ;; hardware stack exceeded
  5226                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  5227                           
  5228  06D7  01F5               	clrf	i1___lwdiv@quotient
  5229  06D8  01F6               	clrf	i1___lwdiv@quotient+1
  5230  06D9                     i1l1721:
  5231  06D9  0870               	movf	i1___lwdiv@divisor,w
  5232  06DA  0471               	iorwf	i1___lwdiv@divisor+1,w
  5233  06DB  1903               	btfsc	3,2
  5234  06DC  2EDE               	goto	u94_21
  5235  06DD  2EDF               	goto	u94_20
  5236  06DE                     u94_21:
  5237  06DE  2F16               	goto	i1l1741
  5238  06DF                     u94_20:
  5239  06DF                     i1l1723:
  5240  06DF  01F7               	clrf	i1___lwdiv@counter
  5241  06E0  0AF7               	incf	i1___lwdiv@counter,f
  5242  06E1  2EED               	goto	i1l1729
  5243  06E2                     i1l1725:
  5244  06E2  3001               	movlw	1
  5245  06E3                     u95_25:
  5246  06E3  1003               	clrc
  5247  06E4  0DF0               	rlf	i1___lwdiv@divisor,f
  5248  06E5  0DF1               	rlf	i1___lwdiv@divisor+1,f
  5249  06E6  3EFF               	addlw	-1
  5250  06E7  1D03               	skipz
  5251  06E8  2EE3               	goto	u95_25
  5252  06E9                     i1l1727:
  5253  06E9  3001               	movlw	1
  5254  06EA  00F4               	movwf	??i1___lwdiv
  5255  06EB  0874               	movf	??i1___lwdiv,w
  5256  06EC  07F7               	addwf	i1___lwdiv@counter,f
  5257  06ED                     i1l1729:
  5258  06ED  1FF1               	btfss	i1___lwdiv@divisor+1,7
  5259  06EE  2EF0               	goto	u96_21
  5260  06EF  2EF1               	goto	u96_20
  5261  06F0                     u96_21:
  5262  06F0  2EE2               	goto	i1l1725
  5263  06F1                     u96_20:
  5264  06F1                     i1l1731:
  5265  06F1  3001               	movlw	1
  5266  06F2                     u97_25:
  5267  06F2  1003               	clrc
  5268  06F3  0DF5               	rlf	i1___lwdiv@quotient,f
  5269  06F4  0DF6               	rlf	i1___lwdiv@quotient+1,f
  5270  06F5  3EFF               	addlw	-1
  5271  06F6  1D03               	skipz
  5272  06F7  2EF2               	goto	u97_25
  5273  06F8  0871               	movf	i1___lwdiv@divisor+1,w
  5274  06F9  0273               	subwf	i1___lwdiv@dividend+1,w
  5275  06FA  1D03               	skipz
  5276  06FB  2EFE               	goto	u98_25
  5277  06FC  0870               	movf	i1___lwdiv@divisor,w
  5278  06FD  0272               	subwf	i1___lwdiv@dividend,w
  5279  06FE                     u98_25:
  5280  06FE  1C03               	skipc
  5281  06FF  2F01               	goto	u98_21
  5282  0700  2F02               	goto	u98_20
  5283  0701                     u98_21:
  5284  0701  2F09               	goto	i1l1737
  5285  0702                     u98_20:
  5286  0702                     i1l1733:
  5287  0702  0870               	movf	i1___lwdiv@divisor,w
  5288  0703  02F2               	subwf	i1___lwdiv@dividend,f
  5289  0704  0871               	movf	i1___lwdiv@divisor+1,w
  5290  0705  1C03               	skipc
  5291  0706  03F3               	decf	i1___lwdiv@dividend+1,f
  5292  0707  02F3               	subwf	i1___lwdiv@dividend+1,f
  5293  0708                     i1l1735:
  5294  0708  1475               	bsf	i1___lwdiv@quotient,0
  5295  0709                     i1l1737:
  5296  0709  3001               	movlw	1
  5297  070A                     u99_25:
  5298  070A  1003               	clrc
  5299  070B  0CF1               	rrf	i1___lwdiv@divisor+1,f
  5300  070C  0CF0               	rrf	i1___lwdiv@divisor,f
  5301  070D  3EFF               	addlw	-1
  5302  070E  1D03               	skipz
  5303  070F  2F0A               	goto	u99_25
  5304  0710                     i1l1739:
  5305  0710  3001               	movlw	1
  5306  0711  02F7               	subwf	i1___lwdiv@counter,f
  5307  0712  1D03               	btfss	3,2
  5308  0713  2F15               	goto	u100_21
  5309  0714  2F16               	goto	u100_20
  5310  0715                     u100_21:
  5311  0715  2EF1               	goto	i1l1731
  5312  0716                     u100_20:
  5313  0716                     i1l1741:
  5314  0716  0876               	movf	i1___lwdiv@quotient+1,w
  5315  0717  00F1               	movwf	?i1___lwdiv+1
  5316  0718  0875               	movf	i1___lwdiv@quotient,w
  5317  0719  00F0               	movwf	?i1___lwdiv
  5318  071A                     i1l643:
  5319  071A  0008               	return
  5320  071B                     __end_ofi1___lwdiv:
  5321                           
  5322                           	psect	text32
  5323  0FAE                     __ptext32:	
  5324 ;; *************** function _uartWrite *****************
  5325 ;; Defined at:
  5326 ;;		line 36 in file "UART.c"
  5327 ;; Parameters:    Size  Location     Type
  5328 ;;  word            2    0[COMMON] PTR unsigned char 
  5329 ;;		 -> intro(16), buffer(45), 
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;		None
  5332 ;; Return value:  Size  Location     Type
  5333 ;;                  1    wreg      void 
  5334 ;; Registers used:
  5335 ;;		wreg, fsr0l, fsr0h, btemp+1, pclath
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5341 ;;      Params:         2       0       0       0       0
  5342 ;;      Locals:         0       0       0       0       0
  5343 ;;      Temps:          0       0       0       0       0
  5344 ;;      Totals:         2       0       0       0       0
  5345 ;;Total ram usage:        2 bytes
  5346 ;; Hardware stack levels used: 2
  5347 ;; This function calls:
  5348 ;;		Nothing
  5349 ;; This function is called by:
  5350 ;;		_print
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           
  5355                           ;psect for function _uartWrite
  5356  0FAE                     _uartWrite:
  5357  0FAE                     i1l1859:	
  5358                           ;incstack = 0
  5359 ;; hardware stack exceeded
  5360                           ; Regs used in _uartWrite: [wreg-fsr0h+btemp+1+pclath]
  5361                           
  5362                           
  5363                           ;UART.c: 37:     while (*word != 0){
  5364  0FAE  2FC5               	goto	i1l1865
  5365  0FAF                     i1l1861:
  5366                           
  5367                           ;UART.c: 38:         TXREG = (*word);
  5368  0FAF  0871               	movf	uartWrite@word+1,w
  5369  0FB0  00FF               	movwf	btemp+1
  5370  0FB1  0870               	movf	uartWrite@word,w
  5371  0FB2  0084               	movwf	4
  5372  0FB3  120A  118A  258A  120A  158A  	fcall	stringtab
  5373  0FB8  0099               	movwf	25	;volatile
  5374  0FB9                     i1l250:	
  5375                           ;UART.c: 39:         while(!TXSTAbits.TRMT);
  5376                           
  5377  0FB9  1683               	bsf	3,5	;RP0=1, select bank1
  5378  0FBA  1303               	bcf	3,6	;RP1=0, select bank1
  5379  0FBB  1C98               	btfss	24,1	;volatile
  5380  0FBC  2FBE               	goto	u115_21
  5381  0FBD  2FBF               	goto	u115_20
  5382  0FBE                     u115_21:
  5383  0FBE  2FB9               	goto	i1l250
  5384  0FBF                     u115_20:
  5385  0FBF                     i1l1863:
  5386                           
  5387                           ;UART.c: 40:         word++;
  5388  0FBF  3001               	movlw	1
  5389  0FC0  07F0               	addwf	uartWrite@word,f
  5390  0FC1  1803               	skipnc
  5391  0FC2  0AF1               	incf	uartWrite@word+1,f
  5392  0FC3  3000               	movlw	0
  5393  0FC4  07F1               	addwf	uartWrite@word+1,f
  5394  0FC5                     i1l1865:
  5395                           
  5396                           ;UART.c: 37:     while (*word != 0){
  5397  0FC5  0871               	movf	uartWrite@word+1,w
  5398  0FC6  1283               	bcf	3,5	;RP0=0, select bank0
  5399  0FC7  1303               	bcf	3,6	;RP1=0, select bank0
  5400  0FC8  00FF               	movwf	btemp+1
  5401  0FC9  0870               	movf	uartWrite@word,w
  5402  0FCA  0084               	movwf	4
  5403  0FCB  120A  118A  258A  120A  158A  	fcall	stringtab
  5404  0FD0  3A00               	xorlw	0
  5405  0FD1  1D03               	skipz
  5406  0FD2  2FD4               	goto	u116_21
  5407  0FD3  2FD5               	goto	u116_20
  5408  0FD4                     u116_21:
  5409  0FD4  2FAF               	goto	i1l1861
  5410  0FD5                     u116_20:
  5411  0FD5                     i1l254:
  5412  0FD5  0008               	return
  5413  0FD6                     __end_of_uartWrite:
  5414                           
  5415                           	psect	text33
  5416  0E86                     __ptext33:	
  5417 ;; *************** function _uartEnter *****************
  5418 ;; Defined at:
  5419 ;;		line 45 in file "UART.c"
  5420 ;; Parameters:    Size  Location     Type
  5421 ;;		None
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;		None
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  1    wreg      void 
  5426 ;; Registers used:
  5427 ;;		wreg
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5433 ;;      Params:         0       0       0       0       0
  5434 ;;      Locals:         0       0       0       0       0
  5435 ;;      Temps:          0       0       0       0       0
  5436 ;;      Totals:         0       0       0       0       0
  5437 ;;Total ram usage:        0 bytes
  5438 ;; Hardware stack levels used: 1
  5439 ;; This function calls:
  5440 ;;		Nothing
  5441 ;; This function is called by:
  5442 ;;		_print
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           
  5446                           
  5447                           ;psect for function _uartEnter
  5448  0E86                     _uartEnter:
  5449  0E86                     i1l1867:	
  5450                           ;incstack = 0
  5451                           ; Regs used in _uartEnter: [wreg]
  5452                           
  5453                           
  5454                           ;UART.c: 46:     TXREG = 13;
  5455  0E86  300D               	movlw	13
  5456  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  5457  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  5458  0E89  0099               	movwf	25	;volatile
  5459  0E8A                     i1l257:
  5460  0E8A  0008               	return
  5461  0E8B                     __end_of_uartEnter:
  5462  007E                     btemp	set	126	;btemp
  5463  007E                     wtemp0	set	126
  5464                           
  5465                           	psect	config
  5466                           
  5467                           ;Config register CONFIG1 @ 0x2007
  5468                           ;	Oscillator Selection bits
  5469                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  5470                           ;	Watchdog Timer Enable bit
  5471                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  5472                           ;	Power-up Timer Enable bit
  5473                           ;	PWRTE = OFF, PWRT disabled
  5474                           ;	RE3/MCLR pin function select bit
  5475                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  5476                           ;	Code Protection bit
  5477                           ;	CP = OFF, Program memory code protection is disabled
  5478                           ;	Data Code Protection bit
  5479                           ;	CPD = OFF, Data memory code protection is disabled
  5480                           ;	Brown Out Reset Selection bits
  5481                           ;	BOREN = OFF, BOR disabled
  5482                           ;	Internal External Switchover bit
  5483                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  5484                           ;	Fail-Safe Clock Monitor Enabled bit
  5485                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  5486                           ;	Low Voltage Programming Enable bit
  5487                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  5488                           ;	In-Circuit Debugger Mode bit
  5489                           ;	DEBUG = 0x1, unprogrammed default
  5490  2007                     	org	8199
  5491  2007  20D4               	dw	8404
  5492                           
  5493                           ;Config register CONFIG2 @ 0x2008
  5494                           ;	Brown-out Reset Selection bit
  5495                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  5496                           ;	Flash Program Memory Self Write Enable bits
  5497                           ;	WRT = OFF, Write protection off
  5498  2008                     	org	8200
  5499  2008  3FFF               	dw	16383

Data Sizes:
    Strings     51
    Constant    26
    Data        0
    BSS         61
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     36      52
    BANK1            80     30      75
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_6(CODE[7]), STR_5(CODE[9]), STR_4(CODE[11]), STR_3(CODE[7]), 
		 -> STR_2(CODE[7]), STR_1(CODE[9]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 45
		 -> buffer(BANK1[45]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    uartWrite@word	PTR unsigned char  size(2) Largest target is 45
		 -> intro(CODE[16]), buffer(BANK1[45]), 

    LCD_writeString@text	PTR unsigned char  size(2) Largest target is 45
		 -> STR_7(CODE[15]), buffer(BANK1[45]), 

    mapeo@mapeado	PTR unsigned int  size(1) Largest target is 2
		 -> final(BANK0[2]), 

    division@unidad	PTR unsigned char  size(1) Largest target is 3
		 -> tem(BANK0[3]), bot(BANK0[3]), pot(BANK0[3]), 

    division@decena	PTR unsigned char  size(1) Largest target is 3
		 -> tem(BANK0[3]), bot(BANK0[3]), pot(BANK0[3]), 

    division@centena	PTR unsigned char  size(1) Largest target is 3
		 -> tem(BANK0[3]), bot(BANK0[3]), pot(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    i1_sprintf->i1___lwmod
    i1___lwmod->i1___lwdiv

Critical Paths under _main in BANK0

    _config_lcd->_LCD_writeString
    _LCD_START->_LCD_CMD
    _lcd_show->_LCD_writeString
    _lcd_show->_mapeo
    _sprintf->___lwdiv
    _mapeo->___awdiv
    ___awdiv->___wmul
    _division->___lwdiv
    ___lwmod->___lwdiv
    _LCD_writeString->_LCD_write
    _LCD_write->_flip_EN
    _LCD_setCursor->_LCD_CMD
    _LCD_CMD->_flip_EN
    _flip_slave->_spiWrite

Critical Paths under _isr in BANK0

    _isr->_print
    _print->i1_sprintf

Critical Paths under _main in BANK1

    _main->_lcd_show
    _config_lcd->_LCD_writeString
    _lcd_show->_sprintf
    _sprintf->___lwmod
    _mapeo->___awdiv
    _division->___lwmod

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9691
                         _flip_slave
                           _lcd_show
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0    1427
                       _config_clock
                          _config_ie
                          _config_io
                         _config_lcd
                        _config_tmr1
                            _spiInit
                           _uartInit
 ---------------------------------------------------------------------------------
 (2) _uartInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _spiInit                                              4     1      3     360
                                             28 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _config_tmr1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_lcd                                           0     0      0    1067
                          _LCD_START
                      _LCD_setCursor
                    _LCD_writeString
 ---------------------------------------------------------------------------------
 (3) _LCD_START                                            2     2      0      31
                                             31 BANK0      2     2      0
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _config_io                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_ie                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _config_clock                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_show                                             7     7      0    8242
                                             23 BANK1      7     7      0
                      _LCD_setCursor
                    _LCD_writeString
                           _division
                              _mapeo
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             25    18      7    3080
                                              6 BANK1     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) _mapeo                                                4     3      1    1093
                                             35 BANK0      1     0      1
                                              8 BANK1      3     3      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     316
                                             28 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     625
                                             34 BANK0      1     1      0
                                              0 BANK1      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _division                                             8     3      5    3033
                                              6 BANK1      8     3      5
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     952
                                              0 BANK1      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     781
                                             28 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _LCD_writeString                                      7     5      2     521
                                             31 BANK0      5     3      2
                                              0 BANK1      2     2      0
                          _LCD_write
 ---------------------------------------------------------------------------------
 (4) _LCD_write                                            1     1      0      31
                                             30 BANK0      1     1      0
                            _flip_EN
 ---------------------------------------------------------------------------------
 (3) _LCD_setCursor                                        4     3      1     515
                                             31 BANK0      4     3      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (4) _LCD_CMD                                              1     1      0      31
                                             30 BANK0      1     1      0
                            _flip_EN
 ---------------------------------------------------------------------------------
 (5) _flip_EN                                              2     2      0       0
                                             28 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _flip_slave                                           2     2      0      22
                                             29 BANK0      2     2      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (2) _spiWrite                                             1     1      0      22
                                             28 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (3) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _isr                                                  4     4      0    1329
                                             24 BANK0      4     4      0
                              _print
 ---------------------------------------------------------------------------------
 (7) _print                                                7     7      0    1329
                                             17 BANK0      7     7      0
                          _uartEnter
                          _uartWrite
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (8) i1_sprintf                                           25    18      7     980
                                              0 BANK0     17    10      7
                          i1___lwdiv
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (9) i1___lwmod                                            6     2      4     211
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i1___lwdiv                                            8     4      4     214
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (9) _uartWrite                                            2     0      2     349
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (8) _uartEnter                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _flip_slave
     _spiRead
       _spiReceiveWait
     _spiWrite
   _lcd_show
     _LCD_setCursor
       _LCD_CMD
         _flip_EN
     _LCD_writeString
       _LCD_write
         _flip_EN
     _division
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
     _mapeo
       ___awdiv
         ___wmul (ARG)
       ___wmul
     _sprintf
       ___lwdiv
       ___lwmod
   _setup
     _config_clock
     _config_ie
     _config_io
     _config_lcd
       _LCD_START
         _LCD_CMD
       _LCD_setCursor
       _LCD_writeString
     _config_tmr1
     _spiInit
     _uartInit

 _isr (ROOT)
   _print
     _uartEnter
     _uartWrite
     i1_sprintf
       i1___lwdiv
       i1___lwmod
         i1___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      8D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     24      34       5       65.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     1E      4B       7       93.8%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      8D      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Feb 17 11:11:59 2022

                       pc 0002               _SSPSTATbits 0094                        l21 0F86  
                      l30 0E90                        l24 0E97                        l27 0E9D  
                      l38 0EB6              ___awdiv@sign 00D2                        fsr 0004  
     ___wmul@multiplicand 003E                       l202 063C                       l213 07FE  
                     l150 03E2                       l222 0690                       l142 0791  
                     l151 0409                       l216 0EDF                       l146 033F  
                     l154 015B                       l139 0518                       l171 0EF0  
                     l148 0375                       l180 0E96                       l149 03AD  
                     l245 0F66                       l174 0EA5                       l183 0ED0  
                     l168 0FFF                       l177 0F4B                       l371 0F95  
                     l196 0F02                       l524 0589                       l373 0FAD  
                     l199 0EC2                       l367 0255                       l643 06D6  
                     l653 0756                       _RB4 0034                       _RD0 0040  
                     _RB5 0035                       _RB6 0036                       _RB7 0037  
                     u630 0E9D                       u631 0E9C                       _bot 004C  
                     _isr 0F16                       _tem 0049                       _pot 004F  
                     fsr0 0004                       indf 0000           __end_of_LCD_CMD 0EC3  
                    l2001 0362                      l2011 0398                      l2003 0370  
                    l2021 03DE                      l2013 03B0                      l2005 0378  
                    l2023 03E5                      l2015 03B8                      l2007 0380  
                    l2025 03ED                      l2017 03BE                      l2009 0386  
                    l2201 0ED4                      l2019 03D0                      l2035 03F4  
                    l2211 07CF                      l2203 0ED5                      l2213 07D0  
                    l2221 07EE                      l2205 0ED7                      l2301 0552  
                    l2215 07DA                      l2207 0EDC                      l2231 0642  
                    l2311 0575                      l2303 0556                      l2217 07E4  
                    l2233 0666                      l2321 0691                      l2305 0567  
                    l2313 057B                      l2401 01AD                      l2241 05EF  
                    l2235 066E                      l2331 06A9                      l2323 0695  
                    l2315 0580                      l2307 056D                      l2411 01CB  
                    l2251 0618                      l2243 05FA                      l2229 063D  
                    l2341 06CC                      l2333 06AD                      l2325 069B  
                    l2317 0585                      l2309 056E                      l2421 01EB  
                    l2413 01D5                      l2261 0636                      l2253 061E  
                    l2245 0600                      l2237 05E7                      l2191 0EFF  
                    l2335 06BE                      l2327 069E                      l2343 06D2  
                    l2351 0726                      l2271 0FA3                      l2263 0F87  
                    l2423 022B                      l2415 01DB                      l2407 01AF  
                    l2431 0251                      l2255 0624                      l2247 060B  
                    l2239 05EB                      l2193 0EBA                      l2337 06C4  
                    l2329 06A5                      l2361 0745                      l2353 072D  
                    l2281 0520                      l2273 0FA9                      l2265 0F8B  
                    l2425 0232                      l2417 01E2                      l2257 062A  
                    l2249 0611                      l2441 0F36                      l2187 0EF1  
                    l2195 0EBB                      l2339 06C5                      l2363 074C  
                    l2355 0731                      l2347 071B                      l2371 04EF  
                    l2291 0538                      l2283 0525                      l2267 0F8F  
                    l2427 0236                      l2419 01E6                      l2451 0097  
                    l2259 0630                      l2443 0F40                      l2189 0EF4  
                    l2197 0EBD                      l2357 0735                      l2349 0723  
                    l2365 0752                      l2373 0502                      l2293 053A  
                    l2285 0527                      l2277 0519                      l2269 0F9C  
                    l2381 016A                      l2429 023F                      l2461 0150  
                    l2453 00B3                      l2445 002A                      l1901 0F54  
                    l1559 0E97                      l2359 073F                      l2295 0540  
                    l2287 052B                      l2279 051C                      l2375 075A  
                    l2391 0194                      l2383 0171                      l2455 00EE  
                    l2447 0055                      l2439 0F31                      l1911 0F5B  
                    l1903 0F55                      l2471 0FEF                      l2463 0FD6  
                    l2369 049C                      l2297 0543                      l2289 0530  
                    l2393 019C                      l2385 0176                      l2377 015F  
                    l2457 00F9                      l2449 0082                      l1913 0F5E  
                    l1905 0F58                      l2473 0FFA                      l2465 0FE0  
                    l2299 054A                      l2395 01A0                      l2379 0164  
                    l2459 0142                      l1771 0F77                      l1915 0F61  
                    l1907 0F59                      l2467 0FE5                      l2475 0F03  
                    l1781 0E8E                      l2397 01A4                      l2581 0189  
                    l2389 0177                      l1773 0F78                      l1917 0F62  
                    l1909 0F5A                      l2469 0FEA                      l2477 0F08  
                    l1783 0EAE                      l2583 07F6                      l2399 01A8  
                    l1871 0EEC                      l1775 0F7A                      l1767 0F6A  
                    l1919 0F65                      l2479 0F0D                      l1785 0EB3  
                    l2585 03FE                      l1873 0EEE                      l1777 0F7F  
                    l1769 0F73                      l1875 0EEF                      l1891 0ECF  
                    l1779 0F80                      l1877 0E9E                      l1893 0E91  
                    l1869 0EE0                      l1879 0EA4                      l1887 0EC3  
                    l1895 0F4C                      l1993 033E                      l1889 0ECB  
                    l1897 0F4F                      l1995 0342                      l1899 0F51  
                    l1997 034A                      l1999 0350                      ?_isr 0070  
                    STR_1 05D7                      STR_2 05E0                      STR_3 05E0  
                    STR_4 05C3                      STR_5 05CE                      STR_6 05E0  
                    STR_7 05B4                      u1310 0FA9                      u1070 0F73  
                    u1311 0FA8                      u1071 0F72                      u1400 057B  
                    u1320 0520                      u1401 057A                      u1321 051F  
                    u1305 0F9D                      u1250 0654                      u1410 0580  
                    u1330 052B                      u1411 057F                      u1331 052A  
                    u1260 067E                      u1420 069B                      u1340 0540  
                    u1421 069A                      u1341 053F                      u1270 0690  
                    u1510 0735                      u1271 068F                      u1511 0734  
                    u1440 06AD                      u1520 073F                      u1360 0556  
                    u1280 0F8F                      u1600 023F                      u1441 06AC  
                    u1521 073E                      u1505 0727                      u1361 0555  
                    u1281 0F8E                      u1601 023E                      u1610 0251  
                    u1435 069F                      u1355 0544                      u1611 0250  
                    u1460 06BE                      u1540 0752                      u1380 0567  
                    u1461 06BD                      u1541 0751                      u1525 073B  
                    u1381 0566                      u1550 016A                      u1455 06AE  
                    u1535 0746                      u1375 0557                      u1295 0F96  
                    u1551 0169                      u1480 06D2                      u1560 01A4  
                    u1481 06D1                      u1465 06BA                      u1385 0563  
                    u1561 01A3                      u1490 0723                      u1570 01CA  
                    u1707 0394                      u1475 06C6                      u1491 0722  
                    u1395 056F                      u1571 01C9                      u1627 05F5  
                    u1580 01D5                      u1717 03A1                      u1581 01D4  
                    u1637 0606                      u1590 01DB                      u1727 03B4  
                    u1591 01DA                      u1575 01C6                      u1647 0615  
                    u1737 03CC                      u1657 0EFA                      u1747 03D9  
                    u1667 0346                      u1757 03E9                      u1677 035E  
                    u1687 036B                      u1697 037C        __size_of_LCD_START 0056  
                    _main 0F03                      btemp 007E    __size_of_LCD_setCursor 0033  
          ??_config_clock 003C                      start 0012          ?_LCD_writeString 003F  
      __size_of_LCD_write 000F                     ??_isr 0038                     ?_main 0070  
         __end_of___awdiv 058A                     _ANSEL 0188           ___awdiv@divisor 00CD  
         __end_of___lwdiv 06D7                     i1l136 0F26                     i1l250 0FB9  
                   i1l157 049B                     i1l254 0FD5                     i1l257 0E8A  
         __end_of___lwmod 0757                     i1l367 033D                     i1l643 071A  
                   i1l653 07CB           ___awdiv@counter 00D1                     _TMR1H 000F  
                   _TMR1L 000E                     _SPBRG 0099                     _PORTA 0005  
                   _PORTB 0006                     _PORTC 0007                     _PORTD 0008  
                   _TRISA 0085                     _TRISB 0086                     _TRISD 0088  
                   _TRISE 0089                     u94_20 06DF                     u94_21 06DE  
                   u95_25 06E3                     u96_20 06F1                     u96_21 06F0  
                   _TXREG 0019                     u97_25 06F2                     u98_20 0702  
                   u98_21 0701                     u98_25 06FE                     u99_25 070A  
         __end_of_flip_EN 0F03        i1___lwmod@dividend 007A                     _final 0052  
         __end_of_dpowers 05A4                     _mapeo 0757                     _intro 05A4  
                   _setup 0FD6                     _print 040A                     _state 0047  
                   _trash 0048                     pclath 000A           __end_of_spiInit 0F87  
         __end_of_spiRead 0EB7                     status 0003                     wtemp0 007E  
         __end_of_sprintf 0256           division@centena 00D5        __size_ofi1___lwdiv 0044  
      __size_ofi1___lwmod 003A           __initialization 0015              __end_of_main 0F16  
              i1sprintf@c 0030                i1sprintf@f 0020                    ??_main 0044  
       __end_of_LCD_START 063D             _LCD_setCursor 07CC        __size_ofi1_sprintf 00E8  
               ??_LCD_CMD 003E         __end_of_LCD_write 0EE0                    ?_mapeo 0043  
        ___awdiv@dividend 00CF                    ?_setup 0070                    ?_print 0070  
                  _ANSELH 0189                    u100_20 0716                    u100_21 0715  
                  u101_20 0798                    u101_21 0797                    u102_25 079C  
                  u103_20 07AA                    u103_21 07A9                    i1l2071 0F16  
                  u104_20 07B4                    u120_20 02CF                    u104_21 07B3  
                  u120_21 02CE                    i1l2073 0F1A                    i1l2075 0F1F  
                  u104_25 07B0                    i1l2077 0F23                    i1l2079 0F25  
                  u121_20 02D5                    i1l1721 06D9                    u121_21 02D4  
                  i1l1731 06F1                    i1l1723 06DF                    i1l1733 0702  
                  i1l1725 06E2                    i1l1741 0716                    u105_25 07BB  
                  i1l1735 0708                    i1l1727 06E9                    i1l1719 06D7  
                  i1l1751 07A2                    u106_20 07C7                    u122_20 0327  
                  i1l1737 0709                    i1l1729 06ED                    u106_21 07C6  
                  i1l1761 07C1                    i1l1753 07A6                    i1l1745 0792  
                  u122_21 0326                    i1l1921 0259                    i1l1739 0710  
                  i1l1755 07AA                    i1l1747 0798                    i1l1763 07C7  
                  i1l1923 025E                    i1l1861 0FAF                    i1l1757 07B4  
                  i1l1749 079B                    i1l1941 029E                    i1l1933 0271  
                  i1l1925 0264                    i1l1863 0FBF                    i1l1759 07BA  
                  i1l1951 02A9                    i1l1943 02A2                    i1l1935 028E  
                  i1l1927 026B                    u115_20 0FBF                    u123_20 0339  
                  u115_21 0FBE                    i1l1865 0FC5                    u123_21 0338  
                  i1l1961 02DC                    i1l1945 02A7                    i1l1937 0296  
                  i1l1929 0270                    i1l1867 0E86                    i1l1859 0FAE  
                  i1l1971 031E                    i1l1963 02E0                    i1l1955 02C5  
                  i1l1939 029A                    i1l2587 0283                    i1l1965 02E5  
                  i1l1957 02CF                    i1l1973 0327                    i1l1967 0313  
                  i1l1959 02D5                    i1l1975 0339                    i1l1991 048D  
                  i1l1983 040A                    u116_20 0FD5                    u124_20 0F1A  
                  u116_21 0FD4                    i1l1969 031A                    i1l1985 0476  
                  u124_21 0F19                    i1l1987 047B                    i1l1989 0484  
                  u117_20 0264                    u117_21 0263                    u118_20 029E  
                  u118_21 029D                    u119_20 02C4                    u119_21 02C3  
                  u119_25 02C0                    _SPBRGH 009A                    _TRISA5 042D  
                  _TRISC3 043B                    _TRISC4 043C                    _TRISC5 043D  
                  _SSPCON 0014                    _SSPBUF 0013             i1sprintf@flag 002B  
           i1sprintf@prec 002C          __end_of_lcd_show 015C          __end_of_division 0519  
                  ___wmul 0F87                 ??___awdiv 0042      __size_of_config_tmr1 000E  
               ??___lwdiv 0040                 ??___lwmod 00D1                    _buffer 00A0  
                  _lector 0044          ___awdiv@quotient 00D3            ?_LCD_setCursor 003F  
               ??_flip_EN 003C      __end_of_config_clock 0EA6         __end_ofi1___lwdiv 071B  
       __end_ofi1___lwmod 07CC          __end_of_uartInit 0F67                    saved_w 007E  
        __end_of_spiWrite 0E91         LCD_setCursor@fila 0042                 ??_spiInit 003F  
               ??_spiRead 003C                 ??_sprintf 00DA              mapeo@mapeado 0043  
 __end_of__initialization 0026         __end_ofi1_sprintf 033E            __pcstackCOMMON 0070  
           __end_of_mapeo 0792             __end_of_intro 05B4             __end_of_setup 1000  
           __end_of_print 049C             division@value 00D3               i1sprintf@ap 002A  
             i1sprintf@sp 002F        __size_of_config_ie 0006        __size_of_config_io 0011  
                 ??_mapeo 00D5                   ??_setup 0044                   ??_print 0031  
              __pbssBANK0 0044                __pbssBANK1 00A0                __pmaintext 0F03  
                 ?___wmul 003C                __pintentry 0004           ??_LCD_setCursor 0040  
 __size_of_spiReceiveWait 0007            LCD_write@value 003E        __size_of_uartEnter 0005  
                 _LCD_CMD 0EB7        __size_of_uartWrite 0028                _config_lcd 0F31  
                 _SSPSTAT 0094                 ?_lcd_show 0070                __stringtab 058A  
               ?_division 00D3                _flip_slave 033E                 ?_uartInit 0070  
       __end_of_config_ie 0E97         __end_of_config_io 0EF1                 ?_spiWrite 0070  
                 ___awdiv 0519           __size_of___wmul 0027                   ___lwdiv 0691  
                 ___lwmod 071B     __size_of_config_clock 0008                   __ptext1 0FD6  
                 __ptext2 0F4C                   __ptext3 0F67                   __ptext4 0EC3  
                 __ptext5 0F31                   __ptext6 05E7                   __ptext7 0EE0  
                 __ptext8 0E91                   __ptext9 0E9E                   _flip_EN 0EF1  
__size_of_LCD_writeString 0054       LCD_writeString@text 003F                 _T1CONbits 0010  
                 _dpowers 059A         i1___lwdiv@divisor 0070              __size_of_isr 001B  
       i1___lwdiv@counter 0077          LCD_writeString@i 00CD                 _LCD_START 05E7  
                 _spiInit 0F67                   _spiRead 0EAE                   _sprintf 015C  
                 clrloop0 0EA7                ??_lcd_show 00E4      end_of_initialization 0026  
              ??_division 00D8                 _LCD_write 0ED1         __end_of_uartEnter 0E8B  
       __end_of_uartWrite 0FD6              _config_clock 0E9E                ??_uartInit 003C  
               _RCSTAbits 0018                ??_spiWrite 003C                LCD_CMD@cmd 003E  
             ?_config_lcd 0070                ?_LCD_START 0070                 i1___lwdiv 06D7  
               i1___lwmod 0792               spiWrite@dat 003C               ?_flip_slave 0070  
              ?_LCD_write 0070                 _TXSTAbits 0098             ??_config_tmr1 003C  
               i1_sprintf 0256            _spiReceiveWait 0E97            __end_of___wmul 0FAE  
             _BAUDCTLbits 0187         i1___lwmod@divisor 0078         i1___lwmod@counter 007D  
          division@decena 00D6       start_initialization 0015                mapeo@valor 00D7  
             __end_of_isr 0F31            division@unidad 00D7                ?i1___lwdiv 0070  
              ?i1___lwmod 0078         ??_LCD_writeString 0041              i1sprintf@val 002D  
  __end_of_spiReceiveWait 0E9E                ?i1_sprintf 0020       __size_of_config_lcd 001B  
                ??___wmul 0040       __end_of_config_tmr1 0ED1       __size_of_flip_slave 00CC  
                ?_LCD_CMD 0070                 ___latbits 0002             __pcstackBANK0 0020  
           __pcstackBANK1 00CD               ??_LCD_START 003F               ??_LCD_write 003E  
             sprintf@flag 00DE         __size_of_lcd_show 0132         __size_of_division 007D  
             sprintf@prec 00DF          ___lwdiv@dividend 003E           ?_spiReceiveWait 0070  
                ?___awdiv 00CD                  ?___lwdiv 003C         __size_of_uartInit 001B  
                ?___lwmod 00CD         __size_of_spiWrite 0006                 _config_ie 0E91  
               _config_io 0EE0     __end_of_LCD_setCursor 07FF                 __pstrings 058A  
                ?_flip_EN 0070                  ?_spiInit 003C                  ?_spiRead 0070  
        ___lwdiv@quotient 0042               ??i1___lwdiv 0074               ??i1___lwmod 007C  
                ?_sprintf 00D3            __size_of_mapeo 003B            __size_of_setup 002A  
          __size_of_print 0092      spiInit@sTransmitEdge 003E         interrupt_function 0004  
          ___wmul@product 0040                 clear_ram0 0EA6                  _PIE1bits 008C  
      spiInit@sDataSample 003C                  _PIR1bits 000C               _config_tmr1 0EC3  
               _uartEnter 0E86               ??i1_sprintf 0027                 _uartWrite 0FAE  
              ?_config_ie 0070                ?_config_io 0070               __stringbase 0599  
       ___wmul@multiplier 003C          __size_of_LCD_CMD 000C              ??_config_lcd 0044  
            ??_flip_slave 003D                ?_uartEnter 0070                ?_uartWrite 0070  
      __end_of_config_lcd 0F4C          __size_of___awdiv 0071          __size_of___lwdiv 0046  
        __size_of___lwmod 003C           _LCD_writeString 063D        __end_of__stringtab 059A  
      __end_of_flip_slave 040A          __size_of_flip_EN 0012                sprintf@val 00E0  
         ___lwdiv@divisor 003C           ___lwdiv@counter 0041                  __ptext10 002A  
                __ptext11 015C                  __ptext20 07CC                  __ptext12 0757  
                __ptext21 0EB7                  __ptext13 0F87                  __ptext30 0792  
                __ptext22 0EF1                  __ptext14 0519                  __ptext31 06D7  
                __ptext23 033E                  __ptext15 049C                  __ptext32 0FAE  
                __ptext24 0E8B                  __ptext16 071B                  __ptext33 0E86  
                __ptext25 0EAE                  __ptext17 0691                  __ptext26 0E97  
                __ptext18 063D                  __ptext27 0F16                  __ptext19 0ED1  
                __ptext28 040A                  __ptext29 0256          __size_of_spiInit 0020  
        __size_of_spiRead 0009                  _lcd_show 002A                  _division 049C  
        __size_of_sprintf 00FA        i1___lwdiv@dividend 0072             __size_of_main 0013  
    LCD_setCursor@columna 003F                  _uartInit 0F4C                  _spiWrite 0E8B  
            spiInit@sType 003F         spiInit@sClockIdle 003D               ??_config_ie 003C  
             ??_config_io 003C        i1___lwdiv@quotient 0075                _INTCONbits 000B  
           uartWrite@word 0070                  intlevel1 0000                 sprintf@ap 00DD  
               sprintf@sp 00E2          ___lwmod@dividend 00CF          ??_spiReceiveWait 003C  
               stringcode 0594                _OSCCONbits 008F               ??_uartEnter 0070  
 __end_of_LCD_writeString 0691               ??_uartWrite 0072                  sprintf@c 00E3  
                sprintf@f 00D3           ___lwmod@divisor 00CD           ___lwmod@counter 00D2  
                stringdir 0594                  stringtab 058A             _division$1331 00D9  
           ?_config_clock 0070              ?_config_tmr1 0070  
